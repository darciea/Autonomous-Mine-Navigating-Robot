

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 11:38:44 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    70   000000                     
    71                           ; Version 2.35
    72                           ; Generated 05/05/2021 GMT
    73                           ; 
    74                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution. Publication is not required when
    88                           ;        this file is used in an embedded application.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F67K40 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106   000000                     
   107                           	psect	idataBANK2
   108   012CE6                     __pidataBANK2:
   109                           	callstack 0
   110                           
   111                           ;initializer for main@F14702
   112   012CE6  08                 	db	8
   113   012CE7  00                 	db	0
   114   012CE8  00                 	db	0
   115   012CE9  00                 	db	0
   116   012CEA  00                 	db	0
   117   012CEB  00                 	db	0
   118   012CEC  00                 	db	0
   119   012CED  00                 	db	0
   120   012CEE  00                 	db	0
   121   012CEF  00                 	db	0
   122   012CF0  00                 	db	0
   123   012CF1  00                 	db	0
   124   012CF2  00                 	db	0
   125   012CF3  00                 	db	0
   126   012CF4  00                 	db	0
   127   012CF5  00                 	db	0
   128   012CF6  00                 	db	0
   129   012CF7  00                 	db	0
   130   012CF8  00                 	db	0
   131   012CF9  00                 	db	0
   132   012CFA  00                 	db	0
   133   012CFB  00                 	db	0
   134   012CFC  00                 	db	0
   135   012CFD  00                 	db	0
   136   012CFE  00                 	db	0
   137   012CFF  00                 	db	0
   138   012D00  00                 	db	0
   139   012D01  00                 	db	0
   140   012D02  00                 	db	0
   141   012D03  00                 	db	0
   142   000000                     _TX4REG	set	3812
   143   000000                     _RC4STAbits	set	3815
   144   000000                     _SP4BRGH	set	3814
   145   000000                     _LATGbits	set	3967
   146   000000                     _LATHbits	set	3968
   147   000000                     _TRISFbits	set	3974
   148   000000                     _TRISDbits	set	3972
   149   000000                     _TRISGbits	set	3975
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _RC7PPS	set	3689
   155   000000                     _RE2PPS	set	3700
   156   000000                     _TRISCbits	set	3971
   157   000000                     _TRISEbits	set	3973
   158   000000                     _TRISHbits	set	3976
   159   000000                     _PORTFbits	set	3982
   160   000000                     _T2PR	set	4028
   161   000000                     _T2CONbits	set	4029
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _RD5PPS	set	3695
   167   000000                     _ANSELDbits	set	3751
   168   000000                     _SSP2ADD	set	3798
   169   000000                     _SSP2CON1bits	set	3801
   170   000000                     _CCPR4H	set	3873
   171   000000                     _CCPR3H	set	3877
   172   000000                     _TMR0L	set	4051
   173   000000                     _TMR0H	set	4052
   174   000000                     _T0CON0bits	set	4053
   175   000000                     _T0CON1bits	set	4054
   176   000000                     _T2CLKCONbits	set	4031
   177   000000                     _T2HLTbits	set	4030
   178   000000                     _CCP1CONbits	set	4011
   179   000000                     _CCPTMRS0bits	set	4013
   180   000000                     _CCP2CONbits	set	4007
   181   000000                     _LATAbits	set	3961
   182   000000                     _LATDbits	set	3964
   183   000000                     _CCP3CONbits	set	3878
   184   000000                     _CCP4CONbits	set	3874
   185   000000                     _RC4REG	set	3811
   186   000000                     _SP4BRGL	set	3813
   187   000000                     _TX4STAbits	set	3816
   188   000000                     _BAUD4CONbits	set	3817
   189   000000                     _SSP2CON2	set	3802
   190   000000                     _SSP2STAT	set	3800
   191   000000                     _ANSELFbits	set	3764
   192   000000                     _SSP2BUF	set	3797
   193   000000                     _IPR0bits	set	3615
   194   000000                     _TMR0IE	set	29005
   195   000000                     _RD6PPS	set	3696
   196   000000                     _LATFbits	set	3966
   197   000000                     _TRISAbits	set	3969
   198   000000                     _PIE4bits	set	3629
   199   000000                     _TMR0IF	set	29085
   200   000000                     _INTCONbits	set	4082
   201   000000                     _PIR4bits	set	3639
   202   000000                     _RC0PPS	set	3682
   203                           
   204                           	psect	mediumconst
   205   00FEF2                     __pmediumconst:
   206                           	callstack 0
   207   00FEF2  00                 	db	0
   208   00FEF3                     STR_1:
   209                           
   210                           ; BSR set to: 14
   211   00FEF3  0A                 	db	10
   212   00FEF4  20                 	db	32
   213   00FEF5  45                 	db	69	;'E'
   214   00FEF6  58                 	db	88	;'X'
   215   00FEF7  50                 	db	80	;'P'
   216   00FEF8  45                 	db	69	;'E'
   217   00FEF9  43                 	db	67	;'C'
   218   00FEFA  54                 	db	84	;'T'
   219   00FEFB  45                 	db	69	;'E'
   220   00FEFC  44                 	db	68	;'D'
   221   00FEFD  3A                 	db	58	;':'
   222   00FEFE  20                 	db	32
   223   00FEFF  43                 	db	67	;'C'
   224   00FF00  6C                 	db	108	;'l'
   225   00FF01  65                 	db	101	;'e'
   226   00FF02  61                 	db	97	;'a'
   227   00FF03  72                 	db	114	;'r'
   228   00FF04  20                 	db	32
   229   00FF05  25                 	db	37
   230   00FF06  64                 	db	100	;'d'
   231   00FF07  2C                 	db	44
   232   00FF08  52                 	db	82	;'R'
   233   00FF09  20                 	db	32
   234   00FF0A  25                 	db	37
   235   00FF0B  64                 	db	100	;'d'
   236   00FF0C  2C                 	db	44
   237   00FF0D  20                 	db	32
   238   00FF0E  47                 	db	71	;'G'
   239   00FF0F  20                 	db	32
   240   00FF10  25                 	db	37
   241   00FF11  64                 	db	100	;'d'
   242   00FF12  2C                 	db	44
   243   00FF13  20                 	db	32
   244   00FF14  42                 	db	66	;'B'
   245   00FF15  20                 	db	32
   246   00FF16  25                 	db	37
   247   00FF17  64                 	db	100	;'d'
   248   00FF18  20                 	db	32
   249   00FF19  20                 	db	32
   250   00FF1A  43                 	db	67	;'C'
   251   00FF1B  41                 	db	65	;'A'
   252   00FF1C  52                 	db	82	;'R'
   253   00FF1D  44                 	db	68	;'D'
   254   00FF1E  3A                 	db	58	;':'
   255   00FF1F  20                 	db	32
   256   00FF20  25                 	db	37
   257   00FF21  64                 	db	100	;'d'
   258   00FF22  20                 	db	32
   259   00FF23  0A                 	db	10
   260   00FF24  00                 	db	0
   261   00FF25                     STR_11:
   262                           
   263                           ; BSR set to: 14
   264   00FF25  0A                 	db	10
   265   00FF26  20                 	db	32
   266   00FF27  41                 	db	65	;'A'
   267   00FF28  56                 	db	86	;'V'
   268   00FF29  47                 	db	71	;'G'
   269   00FF2A  3A                 	db	58	;':'
   270   00FF2B  20                 	db	32
   271   00FF2C  43                 	db	67	;'C'
   272   00FF2D  6C                 	db	108	;'l'
   273   00FF2E  65                 	db	101	;'e'
   274   00FF2F  61                 	db	97	;'a'
   275   00FF30  72                 	db	114	;'r'
   276   00FF31  20                 	db	32
   277   00FF32  25                 	db	37
   278   00FF33  64                 	db	100	;'d'
   279   00FF34  2C                 	db	44
   280   00FF35  20                 	db	32
   281   00FF36  52                 	db	82	;'R'
   282   00FF37  20                 	db	32
   283   00FF38  25                 	db	37
   284   00FF39  64                 	db	100	;'d'
   285   00FF3A  2C                 	db	44
   286   00FF3B  20                 	db	32
   287   00FF3C  47                 	db	71	;'G'
   288   00FF3D  20                 	db	32
   289   00FF3E  25                 	db	37
   290   00FF3F  64                 	db	100	;'d'
   291   00FF40  2C                 	db	44
   292   00FF41  20                 	db	32
   293   00FF42  42                 	db	66	;'B'
   294   00FF43  20                 	db	32
   295   00FF44  25                 	db	37
   296   00FF45  64                 	db	100	;'d'
   297   00FF46  20                 	db	32
   298   00FF47  0A                 	db	10
   299   00FF48  00                 	db	0
   300   00FF49                     STR_4:
   301                           
   302                           ; BSR set to: 14
   303   00FF49  54                 	db	84	;'T'
   304   00FF4A  69                 	db	105	;'i'
   305   00FF4B  6D                 	db	109	;'m'
   306   00FF4C  65                 	db	101	;'e'
   307   00FF4D  72                 	db	114	;'r'
   308   00FF4E  63                 	db	99	;'c'
   309   00FF4F  6F                 	db	111	;'o'
   310   00FF50  75                 	db	117	;'u'
   311   00FF51  6E                 	db	110	;'n'
   312   00FF52  74                 	db	116	;'t'
   313   00FF53  20                 	db	32
   314   00FF54  61                 	db	97	;'a'
   315   00FF55  72                 	db	114	;'r'
   316   00FF56  72                 	db	114	;'r'
   317   00FF57  61                 	db	97	;'a'
   318   00FF58  79                 	db	121	;'y'
   319   00FF59  20                 	db	32
   320   00FF5A  72                 	db	114	;'r'
   321   00FF5B  65                 	db	101	;'e'
   322   00FF5C  61                 	db	97	;'a'
   323   00FF5D  64                 	db	100	;'d'
   324   00FF5E  69                 	db	105	;'i'
   325   00FF5F  6E                 	db	110	;'n'
   326   00FF60  67                 	db	103	;'g'
   327   00FF61  20                 	db	32
   328   00FF62  25                 	db	37
   329   00FF63  64                 	db	100	;'d'
   330   00FF64  20                 	db	32
   331   00FF65  0A                 	db	10
   332   00FF66  00                 	db	0
   333   00FF67                     STR_9:
   334                           
   335                           ; BSR set to: 14
   336   00FF67  43                 	db	67	;'C'
   337   00FF68  61                 	db	97	;'a'
   338   00FF69  72                 	db	114	;'r'
   339   00FF6A  64                 	db	100	;'d'
   340   00FF6B  20                 	db	32
   341   00FF6C  67                 	db	103	;'g'
   342   00FF6D  6F                 	db	111	;'o'
   343   00FF6E  6E                 	db	110	;'n'
   344   00FF6F  6E                 	db	110	;'n'
   345   00FF70  61                 	db	97	;'a'
   346   00FF71  20                 	db	32
   347   00FF72  72                 	db	114	;'r'
   348   00FF73  65                 	db	101	;'e'
   349   00FF74  73                 	db	115	;'s'
   350   00FF75  70                 	db	112	;'p'
   351   00FF76  6F                 	db	111	;'o'
   352   00FF77  6E                 	db	110	;'n'
   353   00FF78  64                 	db	100	;'d'
   354   00FF79  20                 	db	32
   355   00FF7A  74                 	db	116	;'t'
   356   00FF7B  6F                 	db	111	;'o'
   357   00FF7C  20                 	db	32
   358   00FF7D  25                 	db	37
   359   00FF7E  64                 	db	100	;'d'
   360   00FF7F  20                 	db	32
   361   00FF80  0A                 	db	10
   362   00FF81  00                 	db	0
   363   00FF82                     STR_6:
   364                           
   365                           ; BSR set to: 14
   366   00FF82  54                 	db	84	;'T'
   367   00FF83  69                 	db	105	;'i'
   368   00FF84  6D                 	db	109	;'m'
   369   00FF85  65                 	db	101	;'e'
   370   00FF86  72                 	db	114	;'r'
   371   00FF87  63                 	db	99	;'c'
   372   00FF88  6F                 	db	111	;'o'
   373   00FF89  75                 	db	117	;'u'
   374   00FF8A  6E                 	db	110	;'n'
   375   00FF8B  74                 	db	116	;'t'
   376   00FF8C  20                 	db	32
   377   00FF8D  25                 	db	37
   378   00FF8E  64                 	db	100	;'d'
   379   00FF8F  2C                 	db	44
   380   00FF90  20                 	db	32
   381   00FF91  74                 	db	116	;'t'
   382   00FF92  69                 	db	105	;'i'
   383   00FF93  6D                 	db	109	;'m'
   384   00FF94  65                 	db	101	;'e'
   385   00FF95  20                 	db	32
   386   00FF96  25                 	db	37
   387   00FF97  64                 	db	100	;'d'
   388   00FF98  20                 	db	32
   389   00FF99  20                 	db	32
   390   00FF9A  0A                 	db	10
   391   00FF9B  00                 	db	0
   392   00FF9C                     STR_7:
   393                           
   394                           ; BSR set to: 14
   395   00FF9C  43                 	db	67	;'C'
   396   00FF9D  61                 	db	97	;'a'
   397   00FF9E  72                 	db	114	;'r'
   398   00FF9F  64                 	db	100	;'d'
   399   00FFA0  63                 	db	99	;'c'
   400   00FFA1  6F                 	db	111	;'o'
   401   00FFA2  75                 	db	117	;'u'
   402   00FFA3  6E                 	db	110	;'n'
   403   00FFA4  74                 	db	116	;'t'
   404   00FFA5  20                 	db	32
   405   00FFA6  25                 	db	37
   406   00FFA7  64                 	db	100	;'d'
   407   00FFA8  2C                 	db	44
   408   00FFA9  20                 	db	32
   409   00FFAA  63                 	db	99	;'c'
   410   00FFAB  61                 	db	97	;'a'
   411   00FFAC  72                 	db	114	;'r'
   412   00FFAD  64                 	db	100	;'d'
   413   00FFAE  20                 	db	32
   414   00FFAF  25                 	db	37
   415   00FFB0  64                 	db	100	;'d'
   416   00FFB1  20                 	db	32
   417   00FFB2  20                 	db	32
   418   00FFB3  0A                 	db	10
   419   00FFB4  00                 	db	0
   420   00FFB5                     STR_8:
   421                           
   422                           ; BSR set to: 14
   423   00FFB5  54                 	db	84	;'T'
   424   00FFB6  69                 	db	105	;'i'
   425   00FFB7  6D                 	db	109	;'m'
   426   00FFB8  65                 	db	101	;'e'
   427   00FFB9  20                 	db	32
   428   00FFBA  67                 	db	103	;'g'
   429   00FFBB  6F                 	db	111	;'o'
   430   00FFBC  6E                 	db	110	;'n'
   431   00FFBD  6E                 	db	110	;'n'
   432   00FFBE  61                 	db	97	;'a'
   433   00FFBF  20                 	db	32
   434   00FFC0  6D                 	db	109	;'m'
   435   00FFC1  6F                 	db	111	;'o'
   436   00FFC2  76                 	db	118	;'v'
   437   00FFC3  65                 	db	101	;'e'
   438   00FFC4  20                 	db	32
   439   00FFC5  66                 	db	102	;'f'
   440   00FFC6  6F                 	db	111	;'o'
   441   00FFC7  72                 	db	114	;'r'
   442   00FFC8  20                 	db	32
   443   00FFC9  25                 	db	37
   444   00FFCA  64                 	db	100	;'d'
   445   00FFCB  20                 	db	32
   446   00FFCC  0A                 	db	10
   447   00FFCD  00                 	db	0
   448   00FFCE                     STR_2:
   449                           
   450                           ; BSR set to: 14
   451   00FFCE  0A                 	db	10
   452   00FFCF  20                 	db	32
   453   00FFD0  45                 	db	69	;'E'
   454   00FFD1  78                 	db	120	;'x'
   455   00FFD2  70                 	db	112	;'p'
   456   00FFD3  65                 	db	101	;'e'
   457   00FFD4  63                 	db	99	;'c'
   458   00FFD5  74                 	db	116	;'t'
   459   00FFD6  65                 	db	101	;'e'
   460   00FFD7  64                 	db	100	;'d'
   461   00FFD8  20                 	db	32
   462   00FFD9  63                 	db	99	;'c'
   463   00FFDA  6C                 	db	108	;'l'
   464   00FFDB  65                 	db	101	;'e'
   465   00FFDC  61                 	db	97	;'a'
   466   00FFDD  72                 	db	114	;'r'
   467   00FFDE  3A                 	db	58	;':'
   468   00FFDF  20                 	db	32
   469   00FFE0  25                 	db	37
   470   00FFE1  64                 	db	100	;'d'
   471   00FFE2  20                 	db	32
   472   00FFE3  0A                 	db	10
   473   00FFE4  00                 	db	0
   474   00FFE5                     STR_3:
   475                           
   476                           ; BSR set to: 14
   477   00FFE5  43                 	db	67	;'C'
   478   00FFE6  61                 	db	97	;'a'
   479   00FFE7  72                 	db	114	;'r'
   480   00FFE8  64                 	db	100	;'d'
   481   00FFE9  63                 	db	99	;'c'
   482   00FFEA  6F                 	db	111	;'o'
   483   00FFEB  75                 	db	117	;'u'
   484   00FFEC  6E                 	db	110	;'n'
   485   00FFED  74                 	db	116	;'t'
   486   00FFEE  20                 	db	32
   487   00FFEF  25                 	db	37
   488   00FFF0  64                 	db	100	;'d'
   489   00FFF1  20                 	db	32
   490   00FFF2  0A                 	db	10
   491   00FFF3  00                 	db	0
   492   00FFF4                     STR_12:
   493                           
   494                           ; BSR set to: 14
   495   00FFF4  43                 	db	67	;'C'
   496   00FFF5  41                 	db	65	;'A'
   497   00FFF6  52                 	db	82	;'R'
   498   00FFF7  44                 	db	68	;'D'
   499   00FFF8  20                 	db	32
   500   00FFF9  25                 	db	37
   501   00FFFA  64                 	db	100	;'d'
   502   00FFFB  20                 	db	32
   503   00FFFC  0A                 	db	10
   504   00FFFD  00                 	db	0
   505   00FFFE  00                 	db	0	; dummy byte at the end
   506   000000                     
   507                           ; #config settings
   508                           
   509                           	psect	cinit
   510   012A68                     __pcinit:
   511                           	callstack 0
   512   012A68                     start_initialization:
   513                           	callstack 0
   514   012A68                     __initialization:
   515                           	callstack 0
   516                           
   517                           ; Initialize objects allocated to BANK2 (30 bytes)
   518                           ; load TBLPTR registers with __pidataBANK2
   519   012A68  0EE6               	movlw	low __pidataBANK2
   520   012A6A  6EF6               	movwf	tblptrl,c
   521   012A6C  0E2C               	movlw	high __pidataBANK2
   522   012A6E  6EF7               	movwf	tblptrh,c
   523   012A70  0E01               	movlw	low (__pidataBANK2 shr (0+16))
   524   012A72  6EF8               	movwf	tblptru,c
   525   012A74  EE02  F0AB         	lfsr	0,__pdataBANK2
   526   012A78  EE10 F01E          	lfsr	1,30
   527   012A7C                     copy_data0:
   528   012A7C  0009               	tblrd		*+
   529   012A7E  CFF5 FFEE          	movff	tablat,postinc0
   530   012A82  50E5               	movf	postdec1,w,c
   531   012A84  50E1               	movf	fsr1l,w,c
   532   012A86  E1FA               	bnz	copy_data0
   533                           
   534                           ; Clear objects allocated to BANK3 (120 bytes)
   535   012A88  EE03  F000         	lfsr	0,__pbssBANK3
   536   012A8C  0E78               	movlw	120
   537   012A8E                     clear_0:
   538   012A8E  6AEE               	clrf	postinc0,c
   539   012A90  06E8               	decf	wreg,f,c
   540   012A92  E1FD               	bnz	clear_0
   541                           
   542                           ; Clear objects allocated to BANK0 (64 bytes)
   543   012A94  EE00  F0BF         	lfsr	0,__pbssBANK0
   544   012A98  0E40               	movlw	64
   545   012A9A                     clear_1:
   546   012A9A  6AEE               	clrf	postinc0,c
   547   012A9C  06E8               	decf	wreg,f,c
   548   012A9E  E1FD               	bnz	clear_1
   549                           
   550                           ; Clear objects allocated to COMRAM (3 bytes)
   551   012AA0  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   552   012AA2  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   553   012AA4  6A58               	clrf	__pbssCOMRAM& (0+255),c
   554   012AA6                     end_of_initialization:
   555                           	callstack 0
   556   012AA6                     __end_of__initialization:
   557                           	callstack 0
   558   012AA6  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   559   012AA8  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   560   012AAA  0100               	movlb	0
   561   012AAC  EF83  F083         	goto	_main	;jump to C main() function
   562                           
   563                           	psect	bssCOMRAM
   564   000058                     __pbssCOMRAM:
   565                           	callstack 0
   566   000058                     _TxBufReadCnt:
   567                           	callstack 0
   568   000058                     	ds	1
   569   000059                     _TxBufWriteCnt:
   570                           	callstack 0
   571   000059                     	ds	1
   572   00005A                     _RxBufWriteCnt:
   573                           	callstack 0
   574   00005A                     	ds	1
   575                           
   576                           	psect	bssBANK0
   577   0000BF                     __pbssBANK0:
   578                           	callstack 0
   579   0000BF                     _EUSART4RXbuf:
   580                           	callstack 0
   581   0000BF                     	ds	20
   582   0000D3                     _width:
   583                           	callstack 0
   584   0000D3                     	ds	2
   585   0000D5                     _prec:
   586                           	callstack 0
   587   0000D5                     	ds	2
   588   0000D7                     _card_detected:
   589                           	callstack 0
   590   0000D7                     	ds	2
   591   0000D9                     _response_in_progress:
   592                           	callstack 0
   593   0000D9                     	ds	2
   594   0000DB                     _TimerFlag:
   595                           	callstack 0
   596   0000DB                     	ds	2
   597   0000DD                     _flags:
   598                           	callstack 0
   599   0000DD                     	ds	1
   600   0000DE                     _RxBufReadCnt:
   601                           	callstack 0
   602   0000DE                     	ds	1
   603   0000DF                     _dbuf:
   604                           	callstack 0
   605   0000DF                     	ds	32
   606                           
   607                           	psect	dataBANK2
   608   0002AB                     __pdataBANK2:
   609                           	callstack 0
   610   0002AB                     main@F14702:
   611                           	callstack 0
   612   0002AB                     	ds	30
   613                           
   614                           	psect	bssBANK3
   615   000300                     __pbssBANK3:
   616                           	callstack 0
   617   000300                     	ds	60
   618   00033C                     _EUSART4TXbuf:
   619                           	callstack 0
   620   00033C                     	ds	60
   621                           
   622                           	psect	cstackBANK2
   623   000200                     __pcstackBANK2:
   624                           	callstack 0
   625   000200                     main@ReturnHomeCards:
   626                           	callstack 0
   627                           
   628                           ; 30 bytes @ 0x0
   629   000200                     	ds	30
   630   00021E                     main@ReturnHomeTimes:
   631                           	callstack 0
   632                           
   633                           ; 60 bytes @ 0x1E
   634   00021E                     	ds	60
   635   00025A                     main@expected_values:
   636                           	callstack 0
   637                           
   638                           ; 72 bytes @ 0x5A
   639   00025A                     	ds	72
   640   0002A2                     main@motorR:
   641                           	callstack 0
   642                           
   643                           ; 9 bytes @ 0xA2
   644   0002A2                     	ds	9
   645                           
   646                           	psect	cstackBANK1
   647   000100                     __pcstackBANK1:
   648                           	callstack 0
   649   000100                     card_response@normalised_values:
   650                           	callstack 0
   651                           
   652                           ; 72 bytes @ 0x0
   653   000100                     	ds	72
   654   000148                     card_response@master_closeness:
   655                           	callstack 0
   656                           
   657                           ; 18 bytes @ 0x48
   658   000148                     	ds	18
   659   00015A                     main@buf:
   660                           	callstack 0
   661                           
   662                           ; 150 bytes @ 0x5A
   663   00015A                     	ds	150
   664   0001F0                     main@CardCount:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0xF0
   668   0001F0                     	ds	2
   669   0001F2                     main@blue_read:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0xF2
   673   0001F2                     	ds	2
   674   0001F4                     main@i:
   675                           	callstack 0
   676                           
   677                           ; 1 bytes @ 0xF4
   678   0001F4                     	ds	1
   679   0001F5                     main@clear_read:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0xF5
   683   0001F5                     	ds	2
   684   0001F7                     main@motorL:
   685                           	callstack 0
   686                           
   687                           ; 9 bytes @ 0xF7
   688   0001F7                     	ds	9
   689                           
   690                           	psect	cstackBANK0
   691   000060                     __pcstackBANK0:
   692                           	callstack 0
   693   000060                     ?_vfprintf:
   694                           	callstack 0
   695   000060                     vfprintf@fp:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0x0
   699   000060                     	ds	2
   700   000062                     vfprintf@fmt:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x2
   704   000062                     	ds	2
   705   000064                     vfprintf@ap:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x4
   709   000064                     	ds	2
   710   000066                     ?_sprintf:
   711                           	callstack 0
   712   000066                     sprintf@s:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x6
   716   000066                     	ds	2
   717   000068                     sprintf@fmt:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x8
   721   000068                     	ds	12
   722   000074                     sprintf@ap:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x14
   726   000074                     	ds	2
   727   000076                     sprintf@f:
   728                           	callstack 0
   729                           
   730                           ; 11 bytes @ 0x16
   731   000076                     	ds	11
   732   000081                     clear_read_calibration@buf:
   733                           	callstack 0
   734   000081                     motor_response@buf:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x21
   738   000081                     	ds	2
   739   000083                     motor_response@card:
   740                           	callstack 0
   741   000083                     clear_read_calibration@clear_read:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x23
   745   000083                     	ds	1
   746   000084                     motor_response@mL:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x24
   750   000084                     	ds	1
   751   000085                     clear_read_calibration@clear_read_check:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x25
   755   000085                     	ds	1
   756   000086                     motor_response@mR:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x26
   760   000086                     	ds	1
   761   000087                     ??_clear_read_calibration:
   762                           
   763                           ; 1 bytes @ 0x27
   764   000087                     	ds	1
   765   000088                     motor_response@ReturnHomeTimes:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x28
   769   000088                     	ds	2
   770   00008A                     motor_response@ReturnHomeCards:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x2A
   774   00008A                     	ds	1
   775   00008B                     clear_read_calibration@i:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x2B
   779   00008B                     	ds	1
   780   00008C                     motor_response@stop_all:
   781                           	callstack 0
   782                           
   783                           ; 2 bytes @ 0x2C
   784   00008C                     	ds	1
   785   00008D                     clear_read_calibration@i_1662:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x2D
   789   00008D                     	ds	1
   790   00008E                     ??_motor_response:
   791                           
   792                           ; 1 bytes @ 0x2E
   793   00008E                     	ds	6
   794   000094                     motor_response@j:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x34
   798   000094                     	ds	2
   799   000096                     motor_response@j_1718:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x36
   803   000096                     	ds	2
   804   000098                     motor_response@k:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x38
   808   000098                     	ds	2
   809   00009A                     motor_response@i:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x3A
   813   00009A                     	ds	2
   814   00009C                     card_response@buf:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x3C
   818   00009C                     	ds	2
   819   00009E                     card_response@clear_read:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x3E
   823   00009E                     	ds	2
   824   0000A0                     card_response@red_read:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x40
   828   0000A0                     	ds	2
   829   0000A2                     card_response@green_read:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x42
   833   0000A2                     	ds	2
   834   0000A4                     card_response@blue_read:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x44
   838   0000A4                     	ds	2
   839   0000A6                     card_response@expected_values:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x46
   843   0000A6                     	ds	2
   844   0000A8                     card_response@card:
   845                           	callstack 0
   846                           
   847                           ; 1 bytes @ 0x48
   848   0000A8                     	ds	1
   849   0000A9                     card_response@mL:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x49
   853   0000A9                     	ds	2
   854   0000AB                     card_response@mR:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x4B
   858   0000AB                     	ds	2
   859   0000AD                     card_response@ReturnHomeTimes:
   860                           	callstack 0
   861                           
   862                           ; 2 bytes @ 0x4D
   863   0000AD                     	ds	2
   864   0000AF                     card_response@ReturnHomeCards:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x4F
   868   0000AF                     	ds	2
   869   0000B1                     card_response@stop_all:
   870                           	callstack 0
   871                           
   872                           ; 2 bytes @ 0x51
   873   0000B1                     	ds	2
   874   0000B3                     main@PWMcycle:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x53
   878   0000B3                     	ds	1
   879   0000B4                     main@card:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x54
   883   0000B4                     	ds	1
   884   0000B5                     main@TimerCount:
   885                           	callstack 0
   886                           
   887                           ; 2 bytes @ 0x55
   888   0000B5                     	ds	2
   889   0000B7                     main@clear_read_check:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x57
   893   0000B7                     	ds	2
   894   0000B9                     main@stop_all:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x59
   898   0000B9                     	ds	2
   899   0000BB                     main@red_read:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x5B
   903   0000BB                     	ds	2
   904   0000BD                     main@green_read:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x5D
   908   0000BD                     	ds	2
   909                           
   910                           	psect	cstackCOMRAM
   911   000001                     __pcstackCOMRAM:
   912                           	callstack 0
   913   000001                     ??_LowISR:
   914   000001                     
   915                           ; 1 bytes @ 0x0
   916   000001                     	ds	3
   917   000004                     ??_I2C_2_Master_Idle:
   918   000004                     ?___wmul:
   919                           	callstack 0
   920   000004                     ?___lwmod:
   921                           	callstack 0
   922   000004                     ?___aodiv:
   923                           	callstack 0
   924   000004                     ?___aomod:
   925                           	callstack 0
   926   000004                     sendCharSerial4@charToSend:
   927                           	callstack 0
   928   000004                     make_master_closeness@buf:
   929                           	callstack 0
   930   000004                     determine_card@master_closeness:
   931                           	callstack 0
   932   000004                     ___wmul@multiplier:
   933                           	callstack 0
   934   000004                     ___lwmod@dividend:
   935                           	callstack 0
   936   000004                     fputc@c:
   937                           	callstack 0
   938   000004                     ___aodiv@dividend:
   939                           	callstack 0
   940   000004                     ___aomod@dividend:
   941                           	callstack 0
   942                           
   943                           ; 8 bytes @ 0x3
   944   000004                     	ds	1
   945   000005                     ??_I2C_2_Master_Read:
   946   000005                     I2C_2_Master_Write@data_byte:
   947                           	callstack 0
   948   000005                     sendStringSerial4@string:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x4
   952   000005                     	ds	1
   953   000006                     ??_determine_card:
   954   000006                     color_writetoaddr@value:
   955                           	callstack 0
   956   000006                     I2C_2_Master_Read@ack:
   957                           	callstack 0
   958   000006                     make_master_closeness@normalised_values:
   959                           	callstack 0
   960   000006                     ___wmul@multiplicand:
   961                           	callstack 0
   962   000006                     ___lwmod@divisor:
   963                           	callstack 0
   964   000006                     fputc@fp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x5
   968   000006                     	ds	1
   969   000007                     color_writetoaddr@address:
   970                           	callstack 0
   971   000007                     I2C_2_Master_Read@tmp:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x6
   975   000007                     	ds	1
   976   000008                     ??_fputc:
   977   000008                     ??_color_click_init:
   978   000008                     ?_color_read_Red:
   979                           	callstack 0
   980   000008                     ?_color_read_Green:
   981                           	callstack 0
   982   000008                     ?_color_read_Blue:
   983                           	callstack 0
   984   000008                     ?_color_read_Clear:
   985                           	callstack 0
   986   000008                     ___lwmod@counter:
   987                           	callstack 0
   988   000008                     make_master_closeness@master_closeness:
   989                           	callstack 0
   990   000008                     ___wmul@product:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x7
   994   000008                     	ds	2
   995   00000A                     ??_color_read_Red:
   996   00000A                     ??_color_read_Green:
   997   00000A                     ??_color_read_Blue:
   998   00000A                     ??_color_read_Clear:
   999   00000A                     ??_make_master_closeness:
  1000   00000A                     ?___lwdiv:
  1001                           	callstack 0
  1002   00000A                     determine_card@current_smallest:
  1003                           	callstack 0
  1004   00000A                     ___lwdiv@dividend:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x9
  1008   00000A                     	ds	2
  1009   00000C                     determine_card@predicted_colour:
  1010                           	callstack 0
  1011   00000C                     ___lwdiv@divisor:
  1012                           	callstack 0
  1013   00000C                     ___aodiv@divisor:
  1014                           	callstack 0
  1015   00000C                     ___aomod@divisor:
  1016                           	callstack 0
  1017                           
  1018                           ; 8 bytes @ 0xB
  1019   00000C                     	ds	1
  1020   00000D                     determine_card@i:
  1021                           	callstack 0
  1022   00000D                     color_read_Red@tmp:
  1023                           	callstack 0
  1024   00000D                     color_read_Green@tmp:
  1025                           	callstack 0
  1026   00000D                     color_read_Blue@tmp:
  1027                           	callstack 0
  1028   00000D                     color_read_Clear@tmp:
  1029                           	callstack 0
  1030   00000D                     fputs@s:
  1031                           	callstack 0
  1032                           
  1033                           ; 2 bytes @ 0xC
  1034   00000D                     	ds	1
  1035   00000E                     ___lwdiv@counter:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0xD
  1039   00000E                     	ds	1
  1040   00000F                     collect_avg_readings@clear_read:
  1041                           	callstack 0
  1042   00000F                     ___lwdiv@quotient:
  1043                           	callstack 0
  1044   00000F                     fputs@fp:
  1045                           	callstack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048   00000F                     	ds	2
  1049   000011                     fputs@c:
  1050                           	callstack 0
  1051   000011                     setMotorPWM@m:
  1052                           	callstack 0
  1053   000011                     collect_avg_readings@red_read:
  1054                           	callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x10
  1057   000011                     	ds	1
  1058   000012                     fputs@i:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x11
  1062   000012                     	ds	1
  1063   000013                     ??_setMotorPWM:
  1064   000013                     collect_avg_readings@green_read:
  1065                           	callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x12
  1068   000013                     	ds	1
  1069   000014                     ___aodiv@counter:
  1070                           	callstack 0
  1071   000014                     ___aomod@counter:
  1072                           	callstack 0
  1073   000014                     pad@fp:
  1074                           	callstack 0
  1075                           
  1076                           ; 2 bytes @ 0x13
  1077   000014                     	ds	1
  1078   000015                     setMotorPWM@posDuty:
  1079                           	callstack 0
  1080   000015                     ___aodiv@sign:
  1081                           	callstack 0
  1082   000015                     ___aomod@sign:
  1083                           	callstack 0
  1084   000015                     collect_avg_readings@blue_read:
  1085                           	callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x14
  1088   000015                     	ds	1
  1089   000016                     ?_abs:
  1090                           	callstack 0
  1091   000016                     setMotorPWM@negDuty:
  1092                           	callstack 0
  1093   000016                     abs@a:
  1094                           	callstack 0
  1095   000016                     pad@buf:
  1096                           	callstack 0
  1097   000016                     ___aodiv@quotient:
  1098                           	callstack 0
  1099                           
  1100                           ; 8 bytes @ 0x15
  1101   000016                     	ds	1
  1102   000017                     ??_collect_avg_readings:
  1103   000017                     stop@mL:
  1104                           	callstack 0
  1105   000017                     turnLeft45@mL:
  1106                           	callstack 0
  1107   000017                     turnRight45@mL:
  1108                           	callstack 0
  1109   000017                     fullSpeedAhead@mL:
  1110                           	callstack 0
  1111   000017                     reverseFullSpeed@mL:
  1112                           	callstack 0
  1113                           
  1114                           ; 2 bytes @ 0x16
  1115   000017                     	ds	1
  1116   000018                     ??_abs:
  1117   000018                     pad@p:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x17
  1121   000018                     	ds	1
  1122   000019                     stop@mR:
  1123                           	callstack 0
  1124   000019                     turnLeft45@mR:
  1125                           	callstack 0
  1126   000019                     turnRight45@mR:
  1127                           	callstack 0
  1128   000019                     fullSpeedAhead@mR:
  1129                           	callstack 0
  1130   000019                     reverseFullSpeed@mR:
  1131                           	callstack 0
  1132   000019                     collect_avg_readings@i:
  1133                           	callstack 0
  1134                           
  1135                           ; 2 bytes @ 0x18
  1136   000019                     	ds	1
  1137   00001A                     ??_pad:
  1138   00001A                     normalise_readings@buf:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x19
  1142   00001A                     	ds	1
  1143   00001B                     ??_stop:
  1144   00001B                     ??_turnLeft45:
  1145   00001B                     ??_turnRight45:
  1146   00001B                     ??_fullSpeedAhead:
  1147   00001B                     ??_reverseFullSpeed:
  1148   00001B                     collect_avg_readings@i_1673:
  1149                           	callstack 0
  1150   00001B                     pad@i:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x1A
  1154   00001B                     	ds	1
  1155   00001C                     fullSpeedAhead@i:
  1156                           	callstack 0
  1157   00001C                     reverseFullSpeed@i:
  1158                           	callstack 0
  1159   00001C                     normalise_readings@clear_read:
  1160                           	callstack 0
  1161                           
  1162                           ; 2 bytes @ 0x1B
  1163   00001C                     	ds	1
  1164   00001D                     turnLeft45@i:
  1165                           	callstack 0
  1166   00001D                     turnRight45@i:
  1167                           	callstack 0
  1168   00001D                     collect_avg_readings@i_1674:
  1169                           	callstack 0
  1170   00001D                     pad@w:
  1171                           	callstack 0
  1172                           
  1173                           ; 2 bytes @ 0x1C
  1174   00001D                     	ds	1
  1175   00001E                     normalise_readings@red_read:
  1176                           	callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x1D
  1179   00001E                     	ds	1
  1180   00001F                     collect_avg_readings@i_1675:
  1181                           	callstack 0
  1182   00001F                     home_response@mL:
  1183                           	callstack 0
  1184   00001F                     dtoa@fp:
  1185                           	callstack 0
  1186                           
  1187                           ; 2 bytes @ 0x1E
  1188   00001F                     	ds	1
  1189   000020                     normalise_readings@green_read:
  1190                           	callstack 0
  1191                           
  1192                           ; 2 bytes @ 0x1F
  1193   000020                     	ds	1
  1194   000021                     collect_avg_readings@i_1676:
  1195                           	callstack 0
  1196   000021                     home_response@mR:
  1197                           	callstack 0
  1198   000021                     dtoa@d:
  1199                           	callstack 0
  1200                           
  1201                           ; 8 bytes @ 0x20
  1202   000021                     	ds	1
  1203   000022                     normalise_readings@blue_read:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0x21
  1207   000022                     	ds	1
  1208   000023                     ??_home_response:
  1209                           
  1210                           ; 1 bytes @ 0x22
  1211   000023                     	ds	1
  1212   000024                     normalise_readings@expected_values:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x23
  1216   000024                     	ds	1
  1217   000025                     home_response@i:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x24
  1221   000025                     	ds	1
  1222   000026                     home_response@card:
  1223                           	callstack 0
  1224   000026                     normalise_readings@normalised_values:
  1225                           	callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x25
  1228   000026                     	ds	2
  1229   000028                     ??_normalise_readings:
  1230   000028                     make_master_closeness@i:
  1231                           	callstack 0
  1232                           
  1233                           ; 1 bytes @ 0x27
  1234   000028                     	ds	1
  1235   000029                     ??_dtoa:
  1236                           
  1237                           ; 1 bytes @ 0x28
  1238   000029                     	ds	7
  1239   000030                     normalise_readings@difference:
  1240                           	callstack 0
  1241                           
  1242                           ; 2 bytes @ 0x2F
  1243   000030                     	ds	1
  1244   000031                     _dtoa$2598:
  1245                           	callstack 0
  1246                           
  1247                           ; 2 bytes @ 0x30
  1248   000031                     	ds	1
  1249   000032                     normalise_readings@i:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x31
  1253   000032                     	ds	1
  1254   000033                     dtoa@p:
  1255                           	callstack 0
  1256                           
  1257                           ; 2 bytes @ 0x32
  1258   000033                     	ds	2
  1259   000035                     dtoa@w:
  1260                           	callstack 0
  1261                           
  1262                           ; 2 bytes @ 0x34
  1263   000035                     	ds	2
  1264   000037                     dtoa@n:
  1265                           	callstack 0
  1266                           
  1267                           ; 8 bytes @ 0x36
  1268   000037                     	ds	8
  1269   00003F                     dtoa@s:
  1270                           	callstack 0
  1271                           
  1272                           ; 1 bytes @ 0x3E
  1273   00003F                     	ds	1
  1274   000040                     dtoa@i:
  1275                           	callstack 0
  1276                           
  1277                           ; 2 bytes @ 0x3F
  1278   000040                     	ds	2
  1279   000042                     vfpfcnvrt@fp:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x41
  1283   000042                     	ds	2
  1284   000044                     vfpfcnvrt@fmt:
  1285                           	callstack 0
  1286                           
  1287                           ; 2 bytes @ 0x43
  1288   000044                     	ds	2
  1289   000046                     vfpfcnvrt@ap:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x45
  1293   000046                     	ds	2
  1294   000048                     ??_vfpfcnvrt:
  1295                           
  1296                           ; 1 bytes @ 0x47
  1297   000048                     	ds	2
  1298   00004A                     vfpfcnvrt@convarg:
  1299                           	callstack 0
  1300                           
  1301                           ; 8 bytes @ 0x49
  1302   00004A                     	ds	8
  1303   000052                     vfpfcnvrt@cp:
  1304                           	callstack 0
  1305                           
  1306                           ; 2 bytes @ 0x51
  1307   000052                     	ds	2
  1308   000054                     vfprintf@cfmt:
  1309                           	callstack 0
  1310                           
  1311                           ; 2 bytes @ 0x53
  1312   000054                     	ds	2
  1313   000056                     ??_main:
  1314                           
  1315                           ; 1 bytes @ 0x55
  1316   000056                     	ds	2
  1317                           
  1318 ;;
  1319 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1320 ;;
  1321 ;; *************** function _main *****************
  1322 ;; Defined at:
  1323 ;;		line 21 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  i               1  244[BANK1 ] enum E14569
  1328 ;;  buf           150   90[BANK1 ] unsigned char [150]
  1329 ;;  expected_val   72   90[BANK2 ] unsigned int [9][4]
  1330 ;;  ReturnHomeTi   60   30[BANK2 ] unsigned int [30]
  1331 ;;  expected_val   40    0        unsigned int [5][4]
  1332 ;;  ReturnHomeCa   30    0[BANK2 ] enum E14569[30]
  1333 ;;  motorL          9  247[BANK1 ] struct DC_motor
  1334 ;;  motorR          9  162[BANK2 ] struct DC_motor
  1335 ;;  clear_read      2  245[BANK1 ] unsigned int 
  1336 ;;  blue_read       2  242[BANK1 ] unsigned int 
  1337 ;;  green_read      2   93[BANK0 ] unsigned int 
  1338 ;;  red_read        2   91[BANK0 ] unsigned int 
  1339 ;;  CardCount       2  240[BANK1 ] unsigned int 
  1340 ;;  stop_all        2   89[BANK0 ] unsigned int 
  1341 ;;  clear_read_c    2   87[BANK0 ] unsigned int 
  1342 ;;  TimerCount      2   85[BANK0 ] unsigned int 
  1343 ;;  card            1   84[BANK0 ] enum E14569
  1344 ;;  PWMcycle        1   83[BANK0 ] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Locals:         0      12     166     171       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;      Totals:         2      12     166     171       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;Total ram usage:      351 bytes
  1359 ;; Hardware stack levels required when called: 11
  1360 ;; This function calls:
  1361 ;;		_I2C_2_Master_Init
  1362 ;;		_Interrupts_init
  1363 ;;		_LEDSon_init
  1364 ;;		___lwmod
  1365 ;;		_card_response
  1366 ;;		_clear_read_calibration
  1367 ;;		_collect_avg_readings
  1368 ;;		_color_click_init
  1369 ;;		_color_read_Clear
  1370 ;;		_fullSpeedAhead
  1371 ;;		_initDCmotorsPWM
  1372 ;;		_initUSART4
  1373 ;;		_reverseFullSpeed
  1374 ;;		_sendStringSerial4
  1375 ;;		_setMotorPWM
  1376 ;;		_sprintf
  1377 ;;		_stop
  1378 ;; This function is called by:
  1379 ;;		Startup code after reset
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text0
  1384   010706                     __ptext0:
  1385                           	callstack 0
  1386   010706                     _main:
  1387                           	callstack 20
  1388   010706                     
  1389                           ;main.c: 26:     LEDSon_init();
  1390   010706  EC02  F096         	call	_LEDSon_init	;wreg free
  1391   01070A                     
  1392                           ;main.c: 27:     I2C_2_Master_Init();
  1393   01070A  ECED  F095         	call	_I2C_2_Master_Init	;wreg free
  1394   01070E                     
  1395                           ;main.c: 28:     color_click_init();
  1396   01070E  ECBB  F095         	call	_color_click_init	;wreg free
  1397   010712                     
  1398                           ;main.c: 29:     initDCmotorsPWM();
  1399   010712  ECE6  F092         	call	_initDCmotorsPWM	;wreg free
  1400   010716                     
  1401                           ;main.c: 30:     initUSART4();
  1402   010716  EC53  F096         	call	_initUSART4	;wreg free
  1403   01071A                     
  1404                           ;main.c: 31:     Interrupts_init();
  1405   01071A  EC17  F096         	call	_Interrupts_init	;wreg free
  1406   01071E                     
  1407                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1408   01071E  8486               	bsf	134,2,c	;volatile
  1409   010720                     
  1410                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1411   010720  010E               	movlb	14	; () banked
  1412   010722  95B4               	bcf	180,2,b	;volatile
  1413   010724                     
  1414                           ; BSR set to: 14
  1415                           ;main.c: 36:     TRISFbits.TRISF3=1;
  1416   010724  8686               	bsf	134,3,c	;volatile
  1417   010726                     
  1418                           ; BSR set to: 14
  1419                           ;main.c: 37:     ANSELFbits.ANSELF3=0;
  1420   010726  97B4               	bcf	180,3,b	;volatile
  1421   010728                     
  1422                           ; BSR set to: 14
  1423                           ;main.c: 43:     unsigned char PWMcycle = T2PR;
  1424   010728  CFBC F0B3          	movff	4028,main@PWMcycle	;volatile
  1425   01072C                     
  1426                           ; BSR set to: 14
  1427                           ;main.c: 45:     struct DC_motor motorL, motorR;;main.c: 47:     motorL.power=0;
  1428   01072C  0E00               	movlw	0
  1429   01072E  0101               	movlb	1	; () banked
  1430   010730  6FF7               	movwf	main@motorL& (0+255),b
  1431   010732                     
  1432                           ; BSR set to: 1
  1433                           ;main.c: 48:     motorL.direction=1;
  1434   010732  0E01               	movlw	1
  1435   010734  6FF8               	movwf	(main@motorL+1)& (0+255),b
  1436   010736                     
  1437                           ; BSR set to: 1
  1438                           ;main.c: 49:     motorL.brakemode=1;
  1439   010736  0E01               	movlw	1
  1440   010738  6FF9               	movwf	(main@motorL+2)& (0+255),b
  1441   01073A                     
  1442                           ; BSR set to: 1
  1443                           ;main.c: 50:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1444   01073A  0EAA               	movlw	170
  1445   01073C  6FFC               	movwf	(main@motorL+5)& (0+255),b
  1446   01073E  0E0F               	movlw	15
  1447   010740  6FFD               	movwf	(main@motorL+6)& (0+255),b
  1448   010742                     
  1449                           ; BSR set to: 1
  1450                           ;main.c: 51:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1451   010742  0EA6               	movlw	166
  1452   010744  6FFE               	movwf	(main@motorL+7)& (0+255),b
  1453   010746  0E0F               	movlw	15
  1454   010748  6FFF               	movwf	(main@motorL+8)& (0+255),b
  1455   01074A                     
  1456                           ; BSR set to: 1
  1457                           ;main.c: 52:     motorL.PWMperiod=PWMcycle;
  1458   01074A  C0B3  F1FA         	movff	main@PWMcycle,main@motorL+3
  1459   01074E  6BFB               	clrf	(main@motorL+4)& (0+255),b
  1460   010750                     
  1461                           ; BSR set to: 1
  1462                           ;main.c: 54:     motorR.power=0;
  1463   010750  0E00               	movlw	0
  1464   010752  0102               	movlb	2	; () banked
  1465   010754  6FA2               	movwf	main@motorR& (0+255),b
  1466   010756                     
  1467                           ; BSR set to: 2
  1468                           ;main.c: 55:     motorR.direction=1;
  1469   010756  0E01               	movlw	1
  1470   010758  6FA3               	movwf	(main@motorR+1)& (0+255),b
  1471   01075A                     
  1472                           ; BSR set to: 2
  1473                           ;main.c: 56:     motorR.brakemode=1;
  1474   01075A  0E01               	movlw	1
  1475   01075C  6FA4               	movwf	(main@motorR+2)& (0+255),b
  1476                           
  1477                           ;main.c: 57:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1478   01075E  0E25               	movlw	37
  1479   010760  6FA7               	movwf	(main@motorR+5)& (0+255),b
  1480   010762  0E0F               	movlw	15
  1481   010764  6FA8               	movwf	(main@motorR+6)& (0+255),b
  1482                           
  1483                           ;main.c: 58:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1484   010766  0E21               	movlw	33
  1485   010768  6FA9               	movwf	(main@motorR+7)& (0+255),b
  1486   01076A  0E0F               	movlw	15
  1487   01076C  6FAA               	movwf	(main@motorR+8)& (0+255),b
  1488   01076E                     
  1489                           ; BSR set to: 2
  1490                           ;main.c: 59:     motorR.PWMperiod=PWMcycle;
  1491   01076E  C0B3  F2A5         	movff	main@PWMcycle,main@motorR+3
  1492   010772  6BA6               	clrf	(main@motorR+4)& (0+255),b
  1493   010774                     
  1494                           ; BSR set to: 2
  1495                           ;main.c: 61:     setMotorPWM(&motorL);
  1496   010774  0EF7               	movlw	low main@motorL
  1497   010776  6E11               	movwf	setMotorPWM@m^0,c
  1498   010778  0E01               	movlw	high main@motorL
  1499   01077A  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1500   01077C  EC16  F08E         	call	_setMotorPWM	;wreg free
  1501   010780                     
  1502                           ;main.c: 62:     setMotorPWM(&motorR);
  1503   010780  0EA2               	movlw	low main@motorR
  1504   010782  6E11               	movwf	setMotorPWM@m^0,c
  1505   010784  0E02               	movlw	high main@motorR
  1506   010786  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1507   010788  EC16  F08E         	call	_setMotorPWM	;wreg free
  1508   01078C                     
  1509                           ;main.c: 68:     colour card;;main.c: 69:     char buf[150];;main.c: 72:     unsigned in
      +                          t red_read = 0;
  1510   01078C  0E00               	movlw	0
  1511   01078E  0100               	movlb	0	; () banked
  1512   010790  6FBC               	movwf	(main@red_read+1)& (0+255),b
  1513   010792  0E00               	movlw	0
  1514   010794  6FBB               	movwf	main@red_read& (0+255),b
  1515   010796                     
  1516                           ; BSR set to: 0
  1517                           ;main.c: 73:     unsigned int green_read = 0;
  1518   010796  0E00               	movlw	0
  1519   010798  6FBE               	movwf	(main@green_read+1)& (0+255),b
  1520   01079A  0E00               	movlw	0
  1521   01079C  6FBD               	movwf	main@green_read& (0+255),b
  1522   01079E                     
  1523                           ; BSR set to: 0
  1524                           ;main.c: 74:     unsigned int blue_read = 0;
  1525   01079E  0E00               	movlw	0
  1526   0107A0  0101               	movlb	1	; () banked
  1527   0107A2  6FF3               	movwf	(main@blue_read+1)& (0+255),b
  1528   0107A4  0E00               	movlw	0
  1529   0107A6  6FF2               	movwf	main@blue_read& (0+255),b
  1530   0107A8                     
  1531                           ; BSR set to: 1
  1532                           ;main.c: 75:     unsigned int clear_read = 0;
  1533   0107A8  0E00               	movlw	0
  1534   0107AA  6FF6               	movwf	(main@clear_read+1)& (0+255),b
  1535   0107AC  0E00               	movlw	0
  1536   0107AE  6FF5               	movwf	main@clear_read& (0+255),b
  1537   0107B0                     
  1538                           ; BSR set to: 1
  1539                           ;main.c: 77:     unsigned int TimerCount = 0;
  1540   0107B0  0E00               	movlw	0
  1541   0107B2  0100               	movlb	0	; () banked
  1542   0107B4  6FB6               	movwf	(main@TimerCount+1)& (0+255),b
  1543   0107B6  0E00               	movlw	0
  1544   0107B8  6FB5               	movwf	main@TimerCount& (0+255),b
  1545   0107BA                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 78:     unsigned int CardCount = 0;
  1548   0107BA  0E00               	movlw	0
  1549   0107BC  0101               	movlb	1	; () banked
  1550   0107BE  6FF1               	movwf	(main@CardCount+1)& (0+255),b
  1551   0107C0  0E00               	movlw	0
  1552   0107C2  6FF0               	movwf	main@CardCount& (0+255),b
  1553   0107C4                     
  1554                           ; BSR set to: 1
  1555                           ;main.c: 79:     unsigned int clear_read_check = 0;
  1556   0107C4  0E00               	movlw	0
  1557   0107C6  0100               	movlb	0	; () banked
  1558   0107C8  6FB8               	movwf	(main@clear_read_check+1)& (0+255),b
  1559   0107CA  0E00               	movlw	0
  1560   0107CC  6FB7               	movwf	main@clear_read_check& (0+255),b
  1561   0107CE                     
  1562                           ; BSR set to: 0
  1563                           ;main.c: 81:     unsigned int expected_values[4][9];;main.c: 82:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 84:     unsigned int ReturnHomeTimes[30] = {0};
  1564   0107CE  EE22  F01E         	lfsr	2,main@ReturnHomeTimes
  1565   0107D2  0E3B               	movlw	59
  1566   0107D4                     u2581:
  1567   0107D4  6ADE               	clrf	postinc2,c
  1568   0107D6  06E8               	decf	wreg,f,c
  1569   0107D8  E2FD               	bc	u2581
  1570   0107DA                     
  1571                           ; BSR set to: 0
  1572                           ;main.c: 85:     colour ReturnHomeCards[30] = {BLACK};
  1573   0107DA  EE22  F0AB         	lfsr	2,main@F14702
  1574   0107DE  EE12  F000         	lfsr	1,main@ReturnHomeCards
  1575   0107E2  0E1D               	movlw	29
  1576   0107E4                     u2591:
  1577   0107E4  CFDB FFE3          	movff	plusw2,plusw1
  1578   0107E8  06E8               	decf	wreg,f,c
  1579   0107EA  E2FC               	bc	u2591
  1580   0107EC                     
  1581                           ; BSR set to: 0
  1582                           ;main.c: 87:     unsigned int stop_all = 0;
  1583   0107EC  0E00               	movlw	0
  1584   0107EE  6FBA               	movwf	(main@stop_all+1)& (0+255),b
  1585   0107F0  0E00               	movlw	0
  1586   0107F2  6FB9               	movwf	main@stop_all& (0+255),b
  1587   0107F4                     
  1588                           ; BSR set to: 0
  1589                           ;main.c: 98:     LATDbits.LATD4 = 0;
  1590   0107F4  987C               	bcf	124,4,c	;volatile
  1591   0107F6                     
  1592                           ; BSR set to: 0
  1593                           ;main.c: 99:     for(colour i = RED; i<= BLACK; i++){
  1594   0107F6  0E00               	movlw	0
  1595   0107F8  0101               	movlb	1	; () banked
  1596   0107FA  6FF4               	movwf	main@i& (0+255),b
  1597   0107FC  EF01  F084         	goto	l245
  1598   010800                     l246:
  1599                           
  1600                           ;main.c: 101:             LATDbits.LATD4 = 1;
  1601   010800  887C               	bsf	124,4,c	;volatile
  1602   010802                     l245:
  1603                           
  1604                           ;main.c: 100:         while(PORTFbits.RF2){
  1605   010802  B48E               	btfsc	142,2,c	;volatile
  1606   010804  EF06  F084         	goto	u2601
  1607   010808  EF08  F084         	goto	u2600
  1608   01080C                     u2601:
  1609   01080C  EF00  F084         	goto	l246
  1610   010810                     u2600:
  1611   010810                     
  1612                           ;main.c: 103:         LATDbits.LATD4 = 0;
  1613   010810  987C               	bcf	124,4,c	;volatile
  1614   010812                     
  1615                           ;main.c: 104:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1616   010812  0E09               	movlw	9
  1617   010814  6E57               	movwf	(??_main+1)^0,c
  1618   010816  0E1E               	movlw	30
  1619   010818  6E56               	movwf	??_main^0,c
  1620   01081A  0EE4               	movlw	228
  1621   01081C                     u2727:
  1622   01081C  2EE8               	decfsz	wreg,f,c
  1623   01081E  D7FE               	bra	u2727
  1624   010820  2E56               	decfsz	??_main^0,f,c
  1625   010822  D7FC               	bra	u2727
  1626   010824  2E57               	decfsz	(??_main+1)^0,f,c
  1627   010826  D7FA               	bra	u2727
  1628   010828  D000               	nop2	
  1629   01082A                     
  1630                           ;main.c: 105:         stop(&motorL, &motorR);
  1631   01082A  0EF7               	movlw	low main@motorL
  1632   01082C  6E17               	movwf	stop@mL^0,c
  1633   01082E  0E01               	movlw	high main@motorL
  1634   010830  6E18               	movwf	(stop@mL+1)^0,c
  1635   010832  0EA2               	movlw	low main@motorR
  1636   010834  6E19               	movwf	stop@mR^0,c
  1637   010836  0E02               	movlw	high main@motorR
  1638   010838  6E1A               	movwf	(stop@mR+1)^0,c
  1639   01083A  EC13  F094         	call	_stop	;wreg free
  1640   01083E                     
  1641                           ;main.c: 106:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1642   01083E  0E02               	movlw	2
  1643   010840  6E57               	movwf	(??_main+1)^0,c
  1644   010842  0EA0               	movlw	160
  1645   010844  6E56               	movwf	??_main^0,c
  1646   010846  0E92               	movlw	146
  1647   010848                     u2737:
  1648   010848  2EE8               	decfsz	wreg,f,c
  1649   01084A  D7FE               	bra	u2737
  1650   01084C  2E56               	decfsz	??_main^0,f,c
  1651   01084E  D7FC               	bra	u2737
  1652   010850  2E57               	decfsz	(??_main+1)^0,f,c
  1653   010852  D7FA               	bra	u2737
  1654   010854  D000               	nop2	
  1655                           
  1656                           ;main.c: 107:         reverseFullSpeed(&motorL, &motorR);
  1657   010856  0EF7               	movlw	low main@motorL
  1658   010858  6E17               	movwf	reverseFullSpeed@mL^0,c
  1659   01085A  0E01               	movlw	high main@motorL
  1660   01085C  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  1661   01085E  0EA2               	movlw	low main@motorR
  1662   010860  6E19               	movwf	reverseFullSpeed@mR^0,c
  1663   010862  0E02               	movlw	high main@motorR
  1664   010864  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  1665   010866  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  1666   01086A                     
  1667                           ;main.c: 108:         _delay((unsigned long)((260)*(64000000/4000.0)));
  1668   01086A  0E16               	movlw	22
  1669   01086C  6E57               	movwf	(??_main+1)^0,c
  1670   01086E  0E1B               	movlw	27
  1671   010870  6E56               	movwf	??_main^0,c
  1672   010872  0E88               	movlw	136
  1673   010874                     u2747:
  1674   010874  2EE8               	decfsz	wreg,f,c
  1675   010876  D7FE               	bra	u2747
  1676   010878  2E56               	decfsz	??_main^0,f,c
  1677   01087A  D7FC               	bra	u2747
  1678   01087C  2E57               	decfsz	(??_main+1)^0,f,c
  1679   01087E  D7FA               	bra	u2747
  1680   010880  D000               	nop2	
  1681   010882                     
  1682                           ;main.c: 109:         stop(&motorL, &motorR);
  1683   010882  0EF7               	movlw	low main@motorL
  1684   010884  6E17               	movwf	stop@mL^0,c
  1685   010886  0E01               	movlw	high main@motorL
  1686   010888  6E18               	movwf	(stop@mL+1)^0,c
  1687   01088A  0EA2               	movlw	low main@motorR
  1688   01088C  6E19               	movwf	stop@mR^0,c
  1689   01088E  0E02               	movlw	high main@motorR
  1690   010890  6E1A               	movwf	(stop@mR+1)^0,c
  1691   010892  EC13  F094         	call	_stop	;wreg free
  1692   010896                     
  1693                           ;main.c: 110:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_re
      +                          ad);
  1694   010896  0EF5               	movlw	low main@clear_read
  1695   010898  6E0F               	movwf	collect_avg_readings@clear_read^0,c
  1696   01089A  0E01               	movlw	high main@clear_read
  1697   01089C  6E10               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1698   01089E  0EBB               	movlw	low main@red_read
  1699   0108A0  6E11               	movwf	collect_avg_readings@red_read^0,c
  1700   0108A2  0E00               	movlw	high main@red_read
  1701   0108A4  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1702   0108A6  0EBD               	movlw	low main@green_read
  1703   0108A8  6E13               	movwf	collect_avg_readings@green_read^0,c
  1704   0108AA  0E00               	movlw	high main@green_read
  1705   0108AC  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1706   0108AE  0EF2               	movlw	low main@blue_read
  1707   0108B0  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1708   0108B2  0E01               	movlw	high main@blue_read
  1709   0108B4  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1710   0108B6  EC5C  F08B         	call	_collect_avg_readings	;wreg free
  1711   0108BA                     
  1712                           ;main.c: 111:         expected_values[RED][i] = red_read;
  1713   0108BA  0101               	movlb	1	; () banked
  1714   0108BC  51F4               	movf	main@i& (0+255),w,b
  1715   0108BE  0D02               	mullw	2
  1716   0108C0  0E5A               	movlw	low main@expected_values
  1717   0108C2  24F3               	addwf	243,w,c
  1718   0108C4  6ED9               	movwf	fsr2l,c
  1719   0108C6  0E02               	movlw	high main@expected_values
  1720   0108C8  20F4               	addwfc	prodh,w,c
  1721   0108CA  6EDA               	movwf	fsr2h,c
  1722   0108CC  C0BB  FFDE         	movff	main@red_read,postinc2
  1723   0108D0  C0BC  FFDD         	movff	main@red_read+1,postdec2
  1724   0108D4                     
  1725                           ; BSR set to: 1
  1726                           ;main.c: 112:         expected_values[GREEN][i] = green_read;
  1727   0108D4  51F4               	movf	main@i& (0+255),w,b
  1728   0108D6  0D02               	mullw	2
  1729   0108D8  0E12               	movlw	18
  1730   0108DA  26F3               	addwf	243,f,c
  1731   0108DC  0E00               	movlw	0
  1732   0108DE  22F4               	addwfc	244,f,c
  1733   0108E0  0E5A               	movlw	low main@expected_values
  1734   0108E2  24F3               	addwf	243,w,c
  1735   0108E4  6ED9               	movwf	fsr2l,c
  1736   0108E6  0E02               	movlw	high main@expected_values
  1737   0108E8  20F4               	addwfc	prodh,w,c
  1738   0108EA  6EDA               	movwf	fsr2h,c
  1739   0108EC  C0BD  FFDE         	movff	main@green_read,postinc2
  1740   0108F0  C0BE  FFDD         	movff	main@green_read+1,postdec2
  1741   0108F4                     
  1742                           ; BSR set to: 1
  1743                           ;main.c: 113:         expected_values[BLUE][i] = blue_read;
  1744   0108F4  51F4               	movf	main@i& (0+255),w,b
  1745   0108F6  0D02               	mullw	2
  1746   0108F8  0E24               	movlw	36
  1747   0108FA  26F3               	addwf	243,f,c
  1748   0108FC  0E00               	movlw	0
  1749   0108FE  22F4               	addwfc	244,f,c
  1750   010900  0E5A               	movlw	low main@expected_values
  1751   010902  24F3               	addwf	243,w,c
  1752   010904  6ED9               	movwf	fsr2l,c
  1753   010906  0E02               	movlw	high main@expected_values
  1754   010908  20F4               	addwfc	prodh,w,c
  1755   01090A  6EDA               	movwf	fsr2h,c
  1756   01090C  C1F2  FFDE         	movff	main@blue_read,postinc2
  1757   010910  C1F3  FFDD         	movff	main@blue_read+1,postdec2
  1758   010914                     
  1759                           ; BSR set to: 1
  1760                           ;main.c: 114:         expected_values[3][i] = clear_read;
  1761   010914  51F4               	movf	main@i& (0+255),w,b
  1762   010916  0D02               	mullw	2
  1763   010918  0E36               	movlw	54
  1764   01091A  26F3               	addwf	243,f,c
  1765   01091C  0E00               	movlw	0
  1766   01091E  22F4               	addwfc	244,f,c
  1767   010920  0E5A               	movlw	low main@expected_values
  1768   010922  24F3               	addwf	243,w,c
  1769   010924  6ED9               	movwf	fsr2l,c
  1770   010926  0E02               	movlw	high main@expected_values
  1771   010928  20F4               	addwfc	prodh,w,c
  1772   01092A  6EDA               	movwf	fsr2h,c
  1773   01092C  C1F5  FFDE         	movff	main@clear_read,postinc2
  1774   010930  C1F6  FFDD         	movff	main@clear_read+1,postdec2
  1775   010934                     
  1776                           ; BSR set to: 1
  1777                           ;main.c: 115:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read, i );
  1778   010934  0E5A               	movlw	low main@buf
  1779   010936  0100               	movlb	0	; () banked
  1780   010938  6F66               	movwf	sprintf@s& (0+255),b
  1781   01093A  0E01               	movlw	high main@buf
  1782   01093C  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1783   01093E  0EF3               	movlw	low STR_1
  1784   010940  6F68               	movwf	sprintf@fmt& (0+255),b
  1785   010942  0EFE               	movlw	high STR_1
  1786   010944  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1787   010946  C1F5  F06A         	movff	main@clear_read,?_sprintf+4
  1788   01094A  C1F6  F06B         	movff	main@clear_read+1,?_sprintf+5
  1789   01094E  C0BB  F06C         	movff	main@red_read,?_sprintf+6
  1790   010952  C0BC  F06D         	movff	main@red_read+1,?_sprintf+7
  1791   010956  C0BD  F06E         	movff	main@green_read,?_sprintf+8
  1792   01095A  C0BE  F06F         	movff	main@green_read+1,?_sprintf+9
  1793   01095E  C1F2  F070         	movff	main@blue_read,?_sprintf+10
  1794   010962  C1F3  F071         	movff	main@blue_read+1,?_sprintf+11
  1795   010966  C1F4  F072         	movff	main@i,?_sprintf+12
  1796   01096A  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1797   01096C  EC6B  F094         	call	_sprintf	;wreg free
  1798   010970                     
  1799                           ;main.c: 116:         sendStringSerial4(buf);
  1800   010970  0E5A               	movlw	low main@buf
  1801   010972  6E05               	movwf	sendStringSerial4@string^0,c
  1802   010974  0E01               	movlw	high main@buf
  1803   010976  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1804   010978  ECD5  F095         	call	_sendStringSerial4	;wreg free
  1805   01097C                     
  1806                           ;main.c: 117:     }
  1807   01097C  0101               	movlb	1	; () banked
  1808   01097E  2BF4               	incf	main@i& (0+255),f,b
  1809   010980                     
  1810                           ; BSR set to: 1
  1811   010980  0E08               	movlw	8
  1812   010982  65F4               	cpfsgt	main@i& (0+255),b
  1813   010984  EFC6  F084         	goto	u2611
  1814   010988  EFC8  F084         	goto	u2610
  1815   01098C                     u2611:
  1816   01098C  EF01  F084         	goto	l245
  1817   010990                     u2610:
  1818   010990  EFCB  F084         	goto	l248
  1819   010994                     l249:
  1820   010994  887C               	bsf	124,4,c	;volatile
  1821   010996                     l248:
  1822   010996  B48E               	btfsc	142,2,c	;volatile
  1823   010998  EFD0  F084         	goto	u2621
  1824   01099C  EFD2  F084         	goto	u2620
  1825   0109A0                     u2621:
  1826   0109A0  EFCA  F084         	goto	l249
  1827   0109A4                     u2620:
  1828   0109A4                     
  1829                           ;main.c: 119:     LATDbits.LATD4 = 0;
  1830   0109A4  987C               	bcf	124,4,c	;volatile
  1831   0109A6                     
  1832                           ;main.c: 120:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1833   0109A6  0E5A               	movlw	low main@buf
  1834   0109A8  0100               	movlb	0	; () banked
  1835   0109AA  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1836   0109AC  0E01               	movlw	high main@buf
  1837   0109AE  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1838   0109B0  0EF5               	movlw	low main@clear_read
  1839   0109B2  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1840   0109B4  0E01               	movlw	high main@clear_read
  1841   0109B6  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1842   0109B8  0EB7               	movlw	low main@clear_read_check
  1843   0109BA  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1844   0109BC  0E00               	movlw	high main@clear_read_check
  1845   0109BE  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1846   0109C0  EC2D  F090         	call	_clear_read_calibration	;wreg free
  1847                           
  1848                           ;main.c: 122:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1849   0109C4  0E5A               	movlw	low main@buf
  1850   0109C6  0100               	movlb	0	; () banked
  1851   0109C8  6F66               	movwf	sprintf@s& (0+255),b
  1852   0109CA  0E01               	movlw	high main@buf
  1853   0109CC  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1854   0109CE  0ECE               	movlw	low STR_2
  1855   0109D0  6F68               	movwf	sprintf@fmt& (0+255),b
  1856   0109D2  0EFF               	movlw	high STR_2
  1857   0109D4  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1858   0109D6  C1F5  F06A         	movff	main@clear_read,?_sprintf+4
  1859   0109DA  C1F6  F06B         	movff	main@clear_read+1,?_sprintf+5
  1860   0109DE  EC6B  F094         	call	_sprintf	;wreg free
  1861   0109E2                     
  1862                           ;main.c: 123:     sendStringSerial4(buf);
  1863   0109E2  0E5A               	movlw	low main@buf
  1864   0109E4  6E05               	movwf	sendStringSerial4@string^0,c
  1865   0109E6  0E01               	movlw	high main@buf
  1866   0109E8  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1867   0109EA  ECD5  F095         	call	_sendStringSerial4	;wreg free
  1868                           
  1869                           ;main.c: 129:     while(PORTFbits.RF2){LATFbits.LATF0 = 1; LATHbits.LATH0 = 1;}
  1870   0109EE  EFFB  F084         	goto	l251
  1871   0109F2                     l252:
  1872   0109F2  807E               	bsf	126,0,c	;volatile
  1873   0109F4  8080               	bsf	128,0,c	;volatile
  1874   0109F6                     l251:
  1875   0109F6  B48E               	btfsc	142,2,c	;volatile
  1876   0109F8  EF00  F085         	goto	u2631
  1877   0109FC  EF02  F085         	goto	u2630
  1878   010A00                     u2631:
  1879   010A00  EFF9  F084         	goto	l252
  1880   010A04                     u2630:
  1881   010A04                     
  1882                           ;main.c: 130:     LATFbits.LATF0 = 0; LATHbits.LATH0 = 0;
  1883   010A04  907E               	bcf	126,0,c	;volatile
  1884   010A06  9080               	bcf	128,0,c	;volatile
  1885   010A08                     l4953:
  1886                           
  1887                           ;main.c: 131:     fullSpeedAhead(&motorL, &motorR);
  1888   010A08  0EF7               	movlw	low main@motorL
  1889   010A0A  6E17               	movwf	fullSpeedAhead@mL^0,c
  1890   010A0C  0E01               	movlw	high main@motorL
  1891   010A0E  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1892   010A10  0EA2               	movlw	low main@motorR
  1893   010A12  6E19               	movwf	fullSpeedAhead@mR^0,c
  1894   010A14  0E02               	movlw	high main@motorR
  1895   010A16  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1896   010A18  EC53  F092         	call	_fullSpeedAhead	;wreg free
  1897   010A1C                     l4955:
  1898                           
  1899                           ;main.c: 134:         if (TimerFlag == 1){
  1900   010A1C  0100               	movlb	0	; () banked
  1901   010A1E  05DB               	decf	_TimerFlag& (0+255),w,b
  1902   010A20  11DC               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1903   010A22  A4D8               	btfss	status,2,c
  1904   010A24  EF16  F085         	goto	u2641
  1905   010A28  EF18  F085         	goto	u2640
  1906   010A2C                     u2641:
  1907   010A2C  EF44  F085         	goto	l4965
  1908   010A30                     u2640:
  1909   010A30                     
  1910                           ; BSR set to: 0
  1911                           ;main.c: 135:             TimerCount += 1;
  1912   010A30  4BB5               	infsnz	main@TimerCount& (0+255),f,b
  1913   010A32  2BB6               	incf	(main@TimerCount+1)& (0+255),f,b
  1914   010A34                     
  1915                           ; BSR set to: 0
  1916                           ;main.c: 136:             if (TimerCount % 10 == 0){LATHbits.LATH3=!LATHbits.LATH3;}
  1917   010A34  C0B5  F004         	movff	main@TimerCount,___lwmod@dividend
  1918   010A38  C0B6  F005         	movff	main@TimerCount+1,___lwmod@dividend+1
  1919   010A3C  0E00               	movlw	0
  1920   010A3E  6E07               	movwf	(___lwmod@divisor+1)^0,c
  1921   010A40  0E0A               	movlw	10
  1922   010A42  6E06               	movwf	___lwmod@divisor^0,c
  1923   010A44  ECE1  F093         	call	___lwmod	;wreg free
  1924   010A48  5004               	movf	?___lwmod^0,w,c
  1925   010A4A  1005               	iorwf	(?___lwmod+1)^0,w,c
  1926   010A4C  A4D8               	btfss	status,2,c
  1927   010A4E  EF2B  F085         	goto	u2651
  1928   010A52  EF2D  F085         	goto	u2650
  1929   010A56                     u2651:
  1930   010A56  EF3F  F085         	goto	l4963
  1931   010A5A                     u2650:
  1932   010A5A  A680               	btfss	128,3,c	;volatile
  1933   010A5C  EF32  F085         	goto	u2661
  1934   010A60  EF36  F085         	goto	u2660
  1935   010A64                     u2661:
  1936   010A64  6A56               	clrf	??_main^0,c
  1937   010A66  2A56               	incf	??_main^0,f,c
  1938   010A68  EF37  F085         	goto	u2678
  1939   010A6C                     u2660:
  1940   010A6C  6A56               	clrf	??_main^0,c
  1941   010A6E                     u2678:
  1942   010A6E  4656               	rlncf	??_main^0,f,c
  1943   010A70  4656               	rlncf	??_main^0,f,c
  1944   010A72  4656               	rlncf	??_main^0,f,c
  1945   010A74  5080               	movf	128,w,c	;volatile
  1946   010A76  1856               	xorwf	??_main^0,w,c
  1947   010A78  0BF7               	andlw	-9
  1948   010A7A  1856               	xorwf	??_main^0,w,c
  1949   010A7C  6E80               	movwf	128,c	;volatile
  1950   010A7E                     l4963:
  1951                           
  1952                           ;main.c: 137:             TimerFlag = 0;
  1953   010A7E  0E00               	movlw	0
  1954   010A80  0100               	movlb	0	; () banked
  1955   010A82  6FDC               	movwf	(_TimerFlag+1)& (0+255),b
  1956   010A84  0E00               	movlw	0
  1957   010A86  6FDB               	movwf	_TimerFlag& (0+255),b
  1958   010A88                     l4965:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 139:         clear_read = color_read_Clear();
  1962   010A88  ECE4  F094         	call	_color_read_Clear	;wreg free
  1963   010A8C  C008  F1F5         	movff	?_color_read_Clear,main@clear_read
  1964   010A90  C009  F1F6         	movff	?_color_read_Clear+1,main@clear_read+1
  1965   010A94                     
  1966                           ;main.c: 140:         if (clear_read > clear_read_check && stop_all == 0){
  1967   010A94  0101               	movlb	1	; () banked
  1968   010A96  51F5               	movf	main@clear_read& (0+255),w,b
  1969   010A98  0100               	movlb	0	; () banked
  1970   010A9A  5DB7               	subwf	main@clear_read_check& (0+255),w,b
  1971   010A9C  0101               	movlb	1	; () banked
  1972   010A9E  51F6               	movf	(main@clear_read+1)& (0+255),w,b
  1973   010AA0  0100               	movlb	0	; () banked
  1974   010AA2  59B8               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1975   010AA4  B0D8               	btfsc	status,0,c
  1976   010AA6  EF57  F085         	goto	u2681
  1977   010AAA  EF59  F085         	goto	u2680
  1978   010AAE                     u2681:
  1979   010AAE  EF4B  F086         	goto	l5009
  1980   010AB2                     u2680:
  1981   010AB2                     
  1982                           ; BSR set to: 0
  1983   010AB2  51B9               	movf	main@stop_all& (0+255),w,b
  1984   010AB4  11BA               	iorwf	(main@stop_all+1)& (0+255),w,b
  1985   010AB6  A4D8               	btfss	status,2,c
  1986   010AB8  EF60  F085         	goto	u2691
  1987   010ABC  EF62  F085         	goto	u2690
  1988   010AC0                     u2691:
  1989   010AC0  EF4B  F086         	goto	l5009
  1990   010AC4                     u2690:
  1991   010AC4                     
  1992                           ; BSR set to: 0
  1993                           ;main.c: 142:             sprintf(buf, "Cardcount %d \n", CardCount);
  1994   010AC4  0E5A               	movlw	low main@buf
  1995   010AC6  6F66               	movwf	sprintf@s& (0+255),b
  1996   010AC8  0E01               	movlw	high main@buf
  1997   010ACA  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1998   010ACC  0EE5               	movlw	low STR_3
  1999   010ACE  6F68               	movwf	sprintf@fmt& (0+255),b
  2000   010AD0  0EFF               	movlw	high STR_3
  2001   010AD2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2002   010AD4  C1F0  F06A         	movff	main@CardCount,?_sprintf+4
  2003   010AD8  C1F1  F06B         	movff	main@CardCount+1,?_sprintf+5
  2004   010ADC  EC6B  F094         	call	_sprintf	;wreg free
  2005   010AE0                     
  2006                           ;main.c: 143:             sendStringSerial4(buf);
  2007   010AE0  0E5A               	movlw	low main@buf
  2008   010AE2  6E05               	movwf	sendStringSerial4@string^0,c
  2009   010AE4  0E01               	movlw	high main@buf
  2010   010AE6  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2011   010AE8  ECD5  F095         	call	_sendStringSerial4	;wreg free
  2012   010AEC                     
  2013                           ;main.c: 145:             ReturnHomeTimes[CardCount] = TimerCount - 6;
  2014   010AEC  0EFA               	movlw	250
  2015   010AEE  0100               	movlb	0	; () banked
  2016   010AF0  25B5               	addwf	main@TimerCount& (0+255),w,b
  2017   010AF2  6E56               	movwf	??_main^0,c
  2018   010AF4  0EFF               	movlw	255
  2019   010AF6  21B6               	addwfc	(main@TimerCount+1)& (0+255),w,b
  2020   010AF8  6E57               	movwf	(??_main+1)^0,c
  2021   010AFA  90D8               	bcf	status,0,c
  2022   010AFC  0101               	movlb	1	; () banked
  2023   010AFE  35F0               	rlcf	main@CardCount& (0+255),w,b
  2024   010B00  6ED9               	movwf	fsr2l,c
  2025   010B02  35F1               	rlcf	(main@CardCount+1)& (0+255),w,b
  2026   010B04  6EDA               	movwf	fsr2h,c
  2027   010B06  0E1E               	movlw	low main@ReturnHomeTimes
  2028   010B08  26D9               	addwf	fsr2l,f,c
  2029   010B0A  0E02               	movlw	high main@ReturnHomeTimes
  2030   010B0C  22DA               	addwfc	fsr2h,f,c
  2031   010B0E  C056  FFDE         	movff	??_main,postinc2
  2032   010B12  C057  FFDD         	movff	??_main+1,postdec2
  2033   010B16                     
  2034                           ; BSR set to: 1
  2035                           ;main.c: 147:             sprintf(buf, "Timercount array reading %d \n", ReturnHomeTimes
      +                          [CardCount]);
  2036   010B16  0E5A               	movlw	low main@buf
  2037   010B18  0100               	movlb	0	; () banked
  2038   010B1A  6F66               	movwf	sprintf@s& (0+255),b
  2039   010B1C  0E01               	movlw	high main@buf
  2040   010B1E  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2041   010B20  0E49               	movlw	low STR_4
  2042   010B22  6F68               	movwf	sprintf@fmt& (0+255),b
  2043   010B24  0EFF               	movlw	high STR_4
  2044   010B26  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2045   010B28  90D8               	bcf	status,0,c
  2046   010B2A  0101               	movlb	1	; () banked
  2047   010B2C  35F0               	rlcf	main@CardCount& (0+255),w,b
  2048   010B2E  6ED9               	movwf	fsr2l,c
  2049   010B30  35F1               	rlcf	(main@CardCount+1)& (0+255),w,b
  2050   010B32  6EDA               	movwf	fsr2h,c
  2051   010B34  0E1E               	movlw	low main@ReturnHomeTimes
  2052   010B36  26D9               	addwf	fsr2l,f,c
  2053   010B38  0E02               	movlw	high main@ReturnHomeTimes
  2054   010B3A  22DA               	addwfc	fsr2h,f,c
  2055   010B3C  CFDE F06A          	movff	postinc2,?_sprintf+4
  2056   010B40  CFDD F06B          	movff	postdec2,?_sprintf+5
  2057   010B44  EC6B  F094         	call	_sprintf	;wreg free
  2058   010B48                     
  2059                           ;main.c: 148:             sendStringSerial4(buf);
  2060   010B48  0E5A               	movlw	low main@buf
  2061   010B4A  6E05               	movwf	sendStringSerial4@string^0,c
  2062   010B4C  0E01               	movlw	high main@buf
  2063   010B4E  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2064   010B50  ECD5  F095         	call	_sendStringSerial4	;wreg free
  2065   010B54                     
  2066                           ;main.c: 150:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2067   010B54  0E2A               	movlw	42
  2068   010B56  6E56               	movwf	??_main^0,c
  2069   010B58  0E8E               	movlw	142
  2070   010B5A                     u2757:
  2071   010B5A  2EE8               	decfsz	wreg,f,c
  2072   010B5C  D7FE               	bra	u2757
  2073   010B5E  2E56               	decfsz	??_main^0,f,c
  2074   010B60  D7FC               	bra	u2757
  2075   010B62                     
  2076                           ;main.c: 151:             stop(&motorL, &motorR);
  2077   010B62  0EF7               	movlw	low main@motorL
  2078   010B64  6E17               	movwf	stop@mL^0,c
  2079   010B66  0E01               	movlw	high main@motorL
  2080   010B68  6E18               	movwf	(stop@mL+1)^0,c
  2081   010B6A  0EA2               	movlw	low main@motorR
  2082   010B6C  6E19               	movwf	stop@mR^0,c
  2083   010B6E  0E02               	movlw	high main@motorR
  2084   010B70  6E1A               	movwf	(stop@mR+1)^0,c
  2085   010B72  EC13  F094         	call	_stop	;wreg free
  2086   010B76                     
  2087                           ;main.c: 152:             _delay((unsigned long)((20)*(64000000/4000.0)));
  2088   010B76  0E02               	movlw	2
  2089   010B78  6E57               	movwf	(??_main+1)^0,c
  2090   010B7A  0EA0               	movlw	160
  2091   010B7C  6E56               	movwf	??_main^0,c
  2092   010B7E  0E92               	movlw	146
  2093   010B80                     u2767:
  2094   010B80  2EE8               	decfsz	wreg,f,c
  2095   010B82  D7FE               	bra	u2767
  2096   010B84  2E56               	decfsz	??_main^0,f,c
  2097   010B86  D7FC               	bra	u2767
  2098   010B88  2E57               	decfsz	(??_main+1)^0,f,c
  2099   010B8A  D7FA               	bra	u2767
  2100   010B8C  D000               	nop2	
  2101   010B8E                     
  2102                           ;main.c: 153:             reverseFullSpeed(&motorL, &motorR);
  2103   010B8E  0EF7               	movlw	low main@motorL
  2104   010B90  6E17               	movwf	reverseFullSpeed@mL^0,c
  2105   010B92  0E01               	movlw	high main@motorL
  2106   010B94  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  2107   010B96  0EA2               	movlw	low main@motorR
  2108   010B98  6E19               	movwf	reverseFullSpeed@mR^0,c
  2109   010B9A  0E02               	movlw	high main@motorR
  2110   010B9C  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  2111   010B9E  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  2112   010BA2                     
  2113                           ;main.c: 154:             _delay((unsigned long)((260)*(64000000/4000.0)));
  2114   010BA2  0E16               	movlw	22
  2115   010BA4  6E57               	movwf	(??_main+1)^0,c
  2116   010BA6  0E1B               	movlw	27
  2117   010BA8  6E56               	movwf	??_main^0,c
  2118   010BAA  0E88               	movlw	136
  2119   010BAC                     u2777:
  2120   010BAC  2EE8               	decfsz	wreg,f,c
  2121   010BAE  D7FE               	bra	u2777
  2122   010BB0  2E56               	decfsz	??_main^0,f,c
  2123   010BB2  D7FC               	bra	u2777
  2124   010BB4  2E57               	decfsz	(??_main+1)^0,f,c
  2125   010BB6  D7FA               	bra	u2777
  2126   010BB8  D000               	nop2	
  2127   010BBA                     
  2128                           ;main.c: 155:             stop(&motorL, &motorR);
  2129   010BBA  0EF7               	movlw	low main@motorL
  2130   010BBC  6E17               	movwf	stop@mL^0,c
  2131   010BBE  0E01               	movlw	high main@motorL
  2132   010BC0  6E18               	movwf	(stop@mL+1)^0,c
  2133   010BC2  0EA2               	movlw	low main@motorR
  2134   010BC4  6E19               	movwf	stop@mR^0,c
  2135   010BC6  0E02               	movlw	high main@motorR
  2136   010BC8  6E1A               	movwf	(stop@mR+1)^0,c
  2137   010BCA  EC13  F094         	call	_stop	;wreg free
  2138   010BCE                     
  2139                           ;main.c: 156:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2140   010BCE  0E2A               	movlw	42
  2141   010BD0  6E56               	movwf	??_main^0,c
  2142   010BD2  0E8E               	movlw	142
  2143   010BD4                     u2787:
  2144   010BD4  2EE8               	decfsz	wreg,f,c
  2145   010BD6  D7FE               	bra	u2787
  2146   010BD8  2E56               	decfsz	??_main^0,f,c
  2147   010BDA  D7FC               	bra	u2787
  2148   010BDC                     
  2149                           ;main.c: 159:             card = card_response(buf, &clear_read, &red_read, &green_read,
      +                           &blue_read, expected_values, card, &motorL, &motorR, ReturnHomeTimes, ReturnHomeCards, 
      +                          &stop_all);
  2150   010BDC  0E5A               	movlw	low main@buf
  2151   010BDE  0100               	movlb	0	; () banked
  2152   010BE0  6F9C               	movwf	card_response@buf& (0+255),b
  2153   010BE2  0E01               	movlw	high main@buf
  2154   010BE4  6F9D               	movwf	(card_response@buf+1)& (0+255),b
  2155   010BE6  0EF5               	movlw	low main@clear_read
  2156   010BE8  6F9E               	movwf	card_response@clear_read& (0+255),b
  2157   010BEA  0E01               	movlw	high main@clear_read
  2158   010BEC  6F9F               	movwf	(card_response@clear_read+1)& (0+255),b
  2159   010BEE  0EBB               	movlw	low main@red_read
  2160   010BF0  6FA0               	movwf	card_response@red_read& (0+255),b
  2161   010BF2  0E00               	movlw	high main@red_read
  2162   010BF4  6FA1               	movwf	(card_response@red_read+1)& (0+255),b
  2163   010BF6  0EBD               	movlw	low main@green_read
  2164   010BF8  6FA2               	movwf	card_response@green_read& (0+255),b
  2165   010BFA  0E00               	movlw	high main@green_read
  2166   010BFC  6FA3               	movwf	(card_response@green_read+1)& (0+255),b
  2167   010BFE  0EF2               	movlw	low main@blue_read
  2168   010C00  6FA4               	movwf	card_response@blue_read& (0+255),b
  2169   010C02  0E01               	movlw	high main@blue_read
  2170   010C04  6FA5               	movwf	(card_response@blue_read+1)& (0+255),b
  2171   010C06  0E5A               	movlw	low main@expected_values
  2172   010C08  6FA6               	movwf	card_response@expected_values& (0+255),b
  2173   010C0A  0E02               	movlw	high main@expected_values
  2174   010C0C  6FA7               	movwf	(card_response@expected_values+1)& (0+255),b
  2175   010C0E  C0B4  F0A8         	movff	main@card,card_response@card
  2176   010C12  0EF7               	movlw	low main@motorL
  2177   010C14  6FA9               	movwf	card_response@mL& (0+255),b
  2178   010C16  0E01               	movlw	high main@motorL
  2179   010C18  6FAA               	movwf	(card_response@mL+1)& (0+255),b
  2180   010C1A  0EA2               	movlw	low main@motorR
  2181   010C1C  6FAB               	movwf	card_response@mR& (0+255),b
  2182   010C1E  0E02               	movlw	high main@motorR
  2183   010C20  6FAC               	movwf	(card_response@mR+1)& (0+255),b
  2184   010C22  0E1E               	movlw	low main@ReturnHomeTimes
  2185   010C24  6FAD               	movwf	card_response@ReturnHomeTimes& (0+255),b
  2186   010C26  0E02               	movlw	high main@ReturnHomeTimes
  2187   010C28  6FAE               	movwf	(card_response@ReturnHomeTimes+1)& (0+255),b
  2188   010C2A  0E00               	movlw	low main@ReturnHomeCards
  2189   010C2C  6FAF               	movwf	card_response@ReturnHomeCards& (0+255),b
  2190   010C2E  0E02               	movlw	high main@ReturnHomeCards
  2191   010C30  6FB0               	movwf	(card_response@ReturnHomeCards+1)& (0+255),b
  2192   010C32  0EB9               	movlw	low main@stop_all
  2193   010C34  6FB1               	movwf	card_response@stop_all& (0+255),b
  2194   010C36  0E00               	movlw	high main@stop_all
  2195   010C38  6FB2               	movwf	(card_response@stop_all+1)& (0+255),b
  2196   010C3A  EC5D  F08D         	call	_card_response	;wreg free
  2197   010C3E  0100               	movlb	0	; () banked
  2198   010C40  6FB4               	movwf	main@card& (0+255),b
  2199   010C42                     
  2200                           ; BSR set to: 0
  2201                           ;main.c: 160:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2202   010C42  0E2A               	movlw	42
  2203   010C44  6E56               	movwf	??_main^0,c
  2204   010C46  0E8E               	movlw	142
  2205   010C48                     u2797:
  2206   010C48  2EE8               	decfsz	wreg,f,c
  2207   010C4A  D7FE               	bra	u2797
  2208   010C4C  2E56               	decfsz	??_main^0,f,c
  2209   010C4E  D7FC               	bra	u2797
  2210   010C50                     
  2211                           ;main.c: 161:             ReturnHomeCards[CardCount] = card;
  2212   010C50  0E00               	movlw	low main@ReturnHomeCards
  2213   010C52  0101               	movlb	1	; () banked
  2214   010C54  25F0               	addwf	main@CardCount& (0+255),w,b
  2215   010C56  6ED9               	movwf	fsr2l,c
  2216   010C58  0E02               	movlw	high main@ReturnHomeCards
  2217   010C5A  21F1               	addwfc	(main@CardCount+1)& (0+255),w,b
  2218   010C5C  6EDA               	movwf	fsr2h,c
  2219   010C5E  C0B4  FFDF         	movff	main@card,indf2
  2220   010C62                     
  2221                           ; BSR set to: 1
  2222                           ;main.c: 165:             CardCount += 1;
  2223   010C62  4BF0               	infsnz	main@CardCount& (0+255),f,b
  2224   010C64  2BF1               	incf	(main@CardCount+1)& (0+255),f,b
  2225   010C66                     
  2226                           ; BSR set to: 1
  2227                           ;main.c: 167:             TimerCount = 0;
  2228   010C66  0E00               	movlw	0
  2229   010C68  0100               	movlb	0	; () banked
  2230   010C6A  6FB6               	movwf	(main@TimerCount+1)& (0+255),b
  2231   010C6C  0E00               	movlw	0
  2232   010C6E  6FB5               	movwf	main@TimerCount& (0+255),b
  2233   010C70                     
  2234                           ; BSR set to: 0
  2235                           ;main.c: 168:             if (stop_all == 0){fullSpeedAhead(&motorL, &motorR);}
  2236   010C70  51B9               	movf	main@stop_all& (0+255),w,b
  2237   010C72  11BA               	iorwf	(main@stop_all+1)& (0+255),w,b
  2238   010C74  A4D8               	btfss	status,2,c
  2239   010C76  EF3F  F086         	goto	u2701
  2240   010C7A  EF41  F086         	goto	u2700
  2241   010C7E                     u2701:
  2242   010C7E  EF4B  F086         	goto	l5009
  2243   010C82                     u2700:
  2244   010C82                     
  2245                           ; BSR set to: 0
  2246   010C82  0EF7               	movlw	low main@motorL
  2247   010C84  6E17               	movwf	fullSpeedAhead@mL^0,c
  2248   010C86  0E01               	movlw	high main@motorL
  2249   010C88  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  2250   010C8A  0EA2               	movlw	low main@motorR
  2251   010C8C  6E19               	movwf	fullSpeedAhead@mR^0,c
  2252   010C8E  0E02               	movlw	high main@motorR
  2253   010C90  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  2254   010C92  EC53  F092         	call	_fullSpeedAhead	;wreg free
  2255   010C96                     l5009:
  2256                           
  2257                           ;main.c: 171:         if(!PORTFbits.RF3){
  2258   010C96  B68E               	btfsc	142,3,c	;volatile
  2259   010C98  EF50  F086         	goto	u2711
  2260   010C9C  EF52  F086         	goto	u2710
  2261   010CA0                     u2711:
  2262   010CA0  EF0E  F085         	goto	l4955
  2263   010CA4                     u2710:
  2264   010CA4                     
  2265                           ;main.c: 172:             stop_all = 0;
  2266   010CA4  0E00               	movlw	0
  2267   010CA6  0100               	movlb	0	; () banked
  2268   010CA8  6FBA               	movwf	(main@stop_all+1)& (0+255),b
  2269   010CAA  0E00               	movlw	0
  2270   010CAC  6FB9               	movwf	main@stop_all& (0+255),b
  2271   010CAE  EF04  F085         	goto	l4953
  2272   010CB2  EF2E  F000         	goto	start
  2273   010CB6                     __end_of_main:
  2274                           	callstack 0
  2275                           
  2276 ;; *************** function _initUSART4 *****************
  2277 ;; Defined at:
  2278 ;;		line 6 in file "serial.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, status,2
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;Total ram usage:        0 bytes
  2297 ;; Hardware stack levels used: 1
  2298 ;; Hardware stack levels required when called: 1
  2299 ;; This function calls:
  2300 ;;		Nothing
  2301 ;; This function is called by:
  2302 ;;		_main
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text1
  2307   012CA6                     __ptext1:
  2308                           	callstack 0
  2309   012CA6                     _initUSART4:
  2310                           	callstack 29
  2311   012CA6                     
  2312                           ;serial.c: 10:     RC0PPS = 0x12;
  2313   012CA6  0E12               	movlw	18
  2314   012CA8  010E               	movlb	14	; () banked
  2315   012CAA  6F62               	movwf	98,b	;volatile
  2316                           
  2317                           ;serial.c: 11:     RX4PPS = 0x11;
  2318   012CAC  0E11               	movlw	17
  2319   012CAE  6F15               	movwf	21,b	;volatile
  2320   012CB0                     
  2321                           ; BSR set to: 14
  2322                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  2323   012CB0  8283               	bsf	131,1,c	;volatile
  2324   012CB2                     
  2325                           ; BSR set to: 14
  2326                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  2327   012CB2  97E9               	bcf	233,3,b	;volatile
  2328   012CB4                     
  2329                           ; BSR set to: 14
  2330                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  2331   012CB4  95E8               	bcf	232,2,b	;volatile
  2332                           
  2333                           ;serial.c: 17:     SP4BRGL = 51;
  2334   012CB6  0E33               	movlw	51
  2335   012CB8  6FE5               	movwf	229,b	;volatile
  2336                           
  2337                           ;serial.c: 18:     SP4BRGH = 0;
  2338   012CBA  0E00               	movlw	0
  2339   012CBC  6FE6               	movwf	230,b	;volatile
  2340   012CBE                     
  2341                           ; BSR set to: 14
  2342                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  2343   012CBE  89E7               	bsf	231,4,b	;volatile
  2344   012CC0                     
  2345                           ; BSR set to: 14
  2346                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  2347   012CC0  8BE8               	bsf	232,5,b	;volatile
  2348   012CC2                     
  2349                           ; BSR set to: 14
  2350                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  2351   012CC2  8FE7               	bsf	231,7,b	;volatile
  2352   012CC4                     
  2353                           ; BSR set to: 14
  2354   012CC4  0012               	return		;funcret
  2355   012CC6                     __end_of_initUSART4:
  2356                           	callstack 0
  2357                           
  2358 ;; *************** function _initDCmotorsPWM *****************
  2359 ;; Defined at:
  2360 ;;		line 6 in file "dc_motor.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, status,2
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2378 ;;Total ram usage:        0 bytes
  2379 ;; Hardware stack levels used: 1
  2380 ;; Hardware stack levels required when called: 1
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text2
  2389   0125CC                     __ptext2:
  2390                           	callstack 0
  2391   0125CC                     _initDCmotorsPWM:
  2392                           	callstack 29
  2393   0125CC                     
  2394                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  2395   0125CC  9485               	bcf	133,2,c	;volatile
  2396                           
  2397                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  2398   0125CE  9885               	bcf	133,4,c	;volatile
  2399                           
  2400                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  2401   0125D0  9E83               	bcf	131,7,c	;volatile
  2402                           
  2403                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  2404   0125D2  9C87               	bcf	135,6,c	;volatile
  2405   0125D4                     
  2406                           ;dc_motor.c: 14:     RE2PPS=0x05;
  2407   0125D4  0E05               	movlw	5
  2408   0125D6  010E               	movlb	14	; () banked
  2409   0125D8  6F74               	movwf	116,b	;volatile
  2410                           
  2411                           ;dc_motor.c: 15:     RE4PPS=0x06;
  2412   0125DA  0E06               	movlw	6
  2413   0125DC  6F76               	movwf	118,b	;volatile
  2414                           
  2415                           ;dc_motor.c: 16:     RC7PPS=0x07;
  2416   0125DE  0E07               	movlw	7
  2417   0125E0  6F69               	movwf	105,b	;volatile
  2418                           
  2419                           ;dc_motor.c: 17:     RG6PPS=0x08;
  2420   0125E2  0E08               	movlw	8
  2421   0125E4  6F88               	movwf	136,b	;volatile
  2422                           
  2423                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  2424   0125E6  50BD               	movf	189,w,c	;volatile
  2425   0125E8  0B8F               	andlw	-113
  2426   0125EA  0940               	iorlw	64
  2427   0125EC  6EBD               	movwf	189,c	;volatile
  2428                           
  2429                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  2430   0125EE  0EE0               	movlw	-32
  2431   0125F0  16BE               	andwf	190,f,c	;volatile
  2432                           
  2433                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  2434   0125F2  50BF               	movf	191,w,c	;volatile
  2435   0125F4  0BF0               	andlw	-16
  2436   0125F6  0901               	iorlw	1
  2437   0125F8  6EBF               	movwf	191,c	;volatile
  2438                           
  2439                           ;dc_motor.c: 26:     T2PR=99;
  2440   0125FA  0E63               	movlw	99
  2441   0125FC  6EBC               	movwf	188,c	;volatile
  2442   0125FE                     
  2443                           ; BSR set to: 14
  2444                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  2445   0125FE  8EBD               	bsf	189,7,c	;volatile
  2446                           
  2447                           ;dc_motor.c: 31:     CCPR1H=0;
  2448   012600  0E00               	movlw	0
  2449   012602  6EAA               	movwf	170,c	;volatile
  2450                           
  2451                           ;dc_motor.c: 32:     CCPR2H=0;
  2452   012604  0E00               	movlw	0
  2453   012606  6EA6               	movwf	166,c	;volatile
  2454                           
  2455                           ;dc_motor.c: 33:     CCPR3H=0;
  2456   012608  0E00               	movlw	0
  2457   01260A  010F               	movlb	15	; () banked
  2458   01260C  6F25               	movwf	37,b	;volatile
  2459                           
  2460                           ;dc_motor.c: 34:     CCPR4H=0;
  2461   01260E  0E00               	movlw	0
  2462   012610  6F21               	movwf	33,b	;volatile
  2463                           
  2464                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  2465   012612  0EFC               	movlw	-4
  2466   012614  16AD               	andwf	173,f,c	;volatile
  2467                           
  2468                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  2469   012616  0EF3               	movlw	-13
  2470   012618  16AD               	andwf	173,f,c	;volatile
  2471                           
  2472                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  2473   01261A  0ECF               	movlw	-49
  2474   01261C  16AD               	andwf	173,f,c	;volatile
  2475                           
  2476                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  2477   01261E  0E3F               	movlw	-193
  2478   012620  16AD               	andwf	173,f,c	;volatile
  2479   012622                     
  2480                           ; BSR set to: 15
  2481                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  2482   012622  88AB               	bsf	171,4,c	;volatile
  2483                           
  2484                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  2485   012624  50AB               	movf	171,w,c	;volatile
  2486   012626  0BF0               	andlw	-16
  2487   012628  090C               	iorlw	12
  2488   01262A  6EAB               	movwf	171,c	;volatile
  2489   01262C                     
  2490                           ; BSR set to: 15
  2491                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  2492   01262C  8EAB               	bsf	171,7,c	;volatile
  2493   01262E                     
  2494                           ; BSR set to: 15
  2495                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  2496   01262E  88A7               	bsf	167,4,c	;volatile
  2497                           
  2498                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  2499   012630  50A7               	movf	167,w,c	;volatile
  2500   012632  0BF0               	andlw	-16
  2501   012634  090C               	iorlw	12
  2502   012636  6EA7               	movwf	167,c	;volatile
  2503   012638                     
  2504                           ; BSR set to: 15
  2505                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  2506   012638  8EA7               	bsf	167,7,c	;volatile
  2507   01263A                     
  2508                           ; BSR set to: 15
  2509                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  2510   01263A  8926               	bsf	38,4,b	;volatile
  2511                           
  2512                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  2513   01263C  5126               	movf	38,w,b	;volatile
  2514   01263E  0BF0               	andlw	-16
  2515   012640  090C               	iorlw	12
  2516   012642  6F26               	movwf	38,b	;volatile
  2517   012644                     
  2518                           ; BSR set to: 15
  2519                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  2520   012644  8F26               	bsf	38,7,b	;volatile
  2521   012646                     
  2522                           ; BSR set to: 15
  2523                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  2524   012646  8922               	bsf	34,4,b	;volatile
  2525                           
  2526                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  2527   012648  5122               	movf	34,w,b	;volatile
  2528   01264A  0BF0               	andlw	-16
  2529   01264C  090C               	iorlw	12
  2530   01264E  6F22               	movwf	34,b	;volatile
  2531   012650                     
  2532                           ; BSR set to: 15
  2533                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2534   012650  8F22               	bsf	34,7,b	;volatile
  2535   012652                     
  2536                           ; BSR set to: 15
  2537   012652  0012               	return		;funcret
  2538   012654                     __end_of_initDCmotorsPWM:
  2539                           	callstack 0
  2540                           
  2541 ;; *************** function _color_click_init *****************
  2542 ;; Defined at:
  2543 ;;		line 5 in file "color.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2559 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;Total ram usage:        1 bytes
  2562 ;; Hardware stack levels used: 1
  2563 ;; Hardware stack levels required when called: 4
  2564 ;; This function calls:
  2565 ;;		_I2C_2_Master_Init
  2566 ;;		_color_writetoaddr
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text3
  2573   012B76                     __ptext3:
  2574                           	callstack 0
  2575   012B76                     _color_click_init:
  2576                           	callstack 26
  2577   012B76                     
  2578                           ;color.c: 8:     I2C_2_Master_Init();
  2579   012B76  ECED  F095         	call	_I2C_2_Master_Init	;wreg free
  2580   012B7A                     
  2581                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2582   012B7A  0E01               	movlw	1
  2583   012B7C  6E06               	movwf	color_writetoaddr@value^0,c
  2584   012B7E  0E00               	movlw	0
  2585   012B80  EC63  F096         	call	_color_writetoaddr
  2586   012B84                     
  2587                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2588   012B84  0E3F               	movlw	63
  2589   012B86  6E08               	movwf	??_color_click_init^0,c
  2590   012B88  0E55               	movlw	85
  2591   012B8A                     u2807:
  2592   012B8A  2EE8               	decfsz	wreg,f,c
  2593   012B8C  D7FE               	bra	u2807
  2594   012B8E  2E08               	decfsz	??_color_click_init^0,f,c
  2595   012B90  D7FC               	bra	u2807
  2596   012B92  F000               	nop	
  2597   012B94                     
  2598                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2599   012B94  0E03               	movlw	3
  2600   012B96  6E06               	movwf	color_writetoaddr@value^0,c
  2601   012B98  0E00               	movlw	0
  2602   012B9A  EC63  F096         	call	_color_writetoaddr
  2603   012B9E                     
  2604                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2605   012B9E  0ED5               	movlw	213
  2606   012BA0  6E06               	movwf	color_writetoaddr@value^0,c
  2607   012BA2  0E01               	movlw	1
  2608   012BA4  EC63  F096         	call	_color_writetoaddr
  2609   012BA8  0012               	return		;funcret
  2610   012BAA                     __end_of_color_click_init:
  2611                           	callstack 0
  2612                           
  2613 ;; *************** function _color_writetoaddr *****************
  2614 ;; Defined at:
  2615 ;;		line 21 in file "color.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  address         1    wreg     unsigned char 
  2618 ;;  value           1    5[COMRAM] unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  address         1    6[COMRAM] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2630 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2633 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2634 ;;Total ram usage:        2 bytes
  2635 ;; Hardware stack levels used: 1
  2636 ;; Hardware stack levels required when called: 3
  2637 ;; This function calls:
  2638 ;;		_I2C_2_Master_Start
  2639 ;;		_I2C_2_Master_Stop
  2640 ;;		_I2C_2_Master_Write
  2641 ;; This function is called by:
  2642 ;;		_color_click_init
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text4
  2647   012CC6                     __ptext4:
  2648                           	callstack 0
  2649   012CC6                     _color_writetoaddr:
  2650                           	callstack 26
  2651                           
  2652                           ;incstack = 0
  2653                           ;color_writetoaddr@address stored from wreg
  2654   012CC6  6E07               	movwf	color_writetoaddr@address^0,c
  2655   012CC8                     
  2656                           ;color.c: 22:     I2C_2_Master_Start();
  2657   012CC8  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  2658                           
  2659                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2660   012CCC  0E52               	movlw	82
  2661   012CCE  EC8E  F096         	call	_I2C_2_Master_Write
  2662                           
  2663                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2664   012CD2  5007               	movf	color_writetoaddr@address^0,w,c
  2665   012CD4  0980               	iorlw	128
  2666   012CD6  EC8E  F096         	call	_I2C_2_Master_Write
  2667                           
  2668                           ;color.c: 25:     I2C_2_Master_Write(value);
  2669   012CDA  5006               	movf	color_writetoaddr@value^0,w,c
  2670   012CDC  EC8E  F096         	call	_I2C_2_Master_Write
  2671                           
  2672                           ;color.c: 26:     I2C_2_Master_Stop();
  2673   012CE0  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  2674   012CE4  0012               	return		;funcret
  2675   012CE6                     __end_of_color_writetoaddr:
  2676                           	callstack 0
  2677                           
  2678 ;; *************** function _I2C_2_Master_Init *****************
  2679 ;; Defined at:
  2680 ;;		line 4 in file "i2c.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;Total ram usage:        0 bytes
  2699 ;; Hardware stack levels used: 1
  2700 ;; Hardware stack levels required when called: 1
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_color_click_init
  2705 ;;		_main
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text5
  2710   012BDA                     __ptext5:
  2711                           	callstack 0
  2712   012BDA                     _I2C_2_Master_Init:
  2713                           	callstack 28
  2714   012BDA                     
  2715                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2716   012BDA  010E               	movlb	14	; () banked
  2717   012BDC  51D9               	movf	217,w,b	;volatile
  2718   012BDE  0BF0               	andlw	-16
  2719   012BE0  0908               	iorlw	8
  2720   012BE2  6FD9               	movwf	217,b	;volatile
  2721   012BE4                     
  2722                           ; BSR set to: 14
  2723                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2724   012BE4  8BD9               	bsf	217,5,b	;volatile
  2725                           
  2726                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2727   012BE6  0E9F               	movlw	159
  2728   012BE8  6FD6               	movwf	214,b	;volatile
  2729   012BEA                     
  2730                           ; BSR set to: 14
  2731                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2732   012BEA  8A84               	bsf	132,5,c	;volatile
  2733   012BEC                     
  2734                           ; BSR set to: 14
  2735                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2736   012BEC  8C84               	bsf	132,6,c	;volatile
  2737   012BEE                     
  2738                           ; BSR set to: 14
  2739                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2740   012BEE  9BA7               	bcf	167,5,b	;volatile
  2741   012BF0                     
  2742                           ; BSR set to: 14
  2743                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2744   012BF0  9DA7               	bcf	167,6,b	;volatile
  2745                           
  2746                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2747   012BF2  0E1D               	movlw	29
  2748   012BF4  6F1D               	movwf	29,b	;volatile
  2749                           
  2750                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2751   012BF6  0E1E               	movlw	30
  2752   012BF8  6F1C               	movwf	28,b	;volatile
  2753                           
  2754                           ;i2c.c: 18:   RD5PPS=0x1C;
  2755   012BFA  0E1C               	movlw	28
  2756   012BFC  6F6F               	movwf	111,b	;volatile
  2757                           
  2758                           ;i2c.c: 19:   RD6PPS=0x1B;
  2759   012BFE  0E1B               	movlw	27
  2760   012C00  6F70               	movwf	112,b	;volatile
  2761   012C02                     
  2762                           ; BSR set to: 14
  2763   012C02  0012               	return		;funcret
  2764   012C04                     __end_of_I2C_2_Master_Init:
  2765                           	callstack 0
  2766                           
  2767 ;; *************** function _clear_read_calibration *****************
  2768 ;; Defined at:
  2769 ;;		line 11 in file "colour_identify.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2772 ;;		 -> main@buf(150), 
  2773 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2774 ;;		 -> main@clear_read(2), 
  2775 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2776 ;;		 -> main@clear_read_check(2), 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  i               2   45[BANK0 ] int 
  2779 ;;  i               2   43[BANK0 ] int 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2789 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2790 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2792 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2793 ;;Total ram usage:       14 bytes
  2794 ;; Hardware stack levels used: 1
  2795 ;; Hardware stack levels required when called: 9
  2796 ;; This function calls:
  2797 ;;		_color_read_Clear
  2798 ;;		_sendStringSerial4
  2799 ;;		_sprintf
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text6
  2806   01205A                     __ptext6:
  2807                           	callstack 0
  2808   01205A                     _clear_read_calibration:
  2809                           	callstack 21
  2810   01205A                     
  2811                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2812   01205A  0E00               	movlw	0
  2813   01205C  0100               	movlb	0	; () banked
  2814   01205E  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2815   012060  0E00               	movlw	0
  2816   012062  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2817   012064                     l4779:
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2821   012064  ECE4  F094         	call	_color_read_Clear	;wreg free
  2822   012068  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2823   01206C  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2824   012070  C008  FFDE         	movff	?_color_read_Clear,postinc2
  2825   012074  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  2826   012078                     
  2827                           ;colour_identify.c: 15:     }
  2828   012078  0100               	movlb	0	; () banked
  2829   01207A  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2830   01207C  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2831   01207E                     
  2832                           ; BSR set to: 0
  2833   01207E  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2834   012080  EF4B  F090         	goto	u2531
  2835   012084  0EF5               	movlw	245
  2836   012086  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2837   012088  0E01               	movlw	1
  2838   01208A  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2839   01208C  A0D8               	btfss	status,0,c
  2840   01208E  EF4B  F090         	goto	u2531
  2841   012092  EF4D  F090         	goto	u2530
  2842   012096                     u2531:
  2843   012096  EF32  F090         	goto	l4779
  2844   01209A                     u2530:
  2845   01209A                     
  2846                           ; BSR set to: 0
  2847                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2848   01209A  0E00               	movlw	0
  2849   01209C  6F8E               	movwf	(clear_read_calibration@i_1662+1)& (0+255),b
  2850   01209E  0E00               	movlw	0
  2851   0120A0  6F8D               	movwf	clear_read_calibration@i_1662& (0+255),b
  2852   0120A2                     l4791:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2856   0120A2  ECE4  F094         	call	_color_read_Clear	;wreg free
  2857   0120A6  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2858   0120AA  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2859   0120AE  5008               	movf	?_color_read_Clear^0,w,c
  2860   0120B0  26DE               	addwf	postinc2,f,c
  2861   0120B2  5009               	movf	(?_color_read_Clear+1)^0,w,c
  2862   0120B4  22DD               	addwfc	postdec2,f,c
  2863   0120B6                     
  2864                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2865   0120B6  0E11               	movlw	17
  2866   0120B8  0100               	movlb	0	; () banked
  2867   0120BA  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2868   0120BC  0E3C               	movlw	60
  2869   0120BE  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2870   0120C0  0ECB               	movlw	203
  2871   0120C2                     u2817:
  2872   0120C2  2EE8               	decfsz	wreg,f,c
  2873   0120C4  D7FE               	bra	u2817
  2874   0120C6  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2875   0120C8  D7FC               	bra	u2817
  2876   0120CA  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2877   0120CC  D7FA               	bra	u2817
  2878   0120CE                     
  2879                           ;colour_identify.c: 20:     }
  2880   0120CE  0100               	movlb	0	; () banked
  2881   0120D0  4B8D               	infsnz	clear_read_calibration@i_1662& (0+255),f,b
  2882   0120D2  2B8E               	incf	(clear_read_calibration@i_1662+1)& (0+255),f,b
  2883   0120D4                     
  2884                           ; BSR set to: 0
  2885   0120D4  BF8E               	btfsc	(clear_read_calibration@i_1662+1)& (0+255),7,b
  2886   0120D6  EF76  F090         	goto	u2541
  2887   0120DA  518E               	movf	(clear_read_calibration@i_1662+1)& (0+255),w,b
  2888   0120DC  E109               	bnz	u2540
  2889   0120DE  0E03               	movlw	3
  2890   0120E0  5D8D               	subwf	clear_read_calibration@i_1662& (0+255),w,b
  2891   0120E2  A0D8               	btfss	status,0,c
  2892   0120E4  EF76  F090         	goto	u2541
  2893   0120E8  EF78  F090         	goto	u2540
  2894   0120EC                     u2541:
  2895   0120EC  EF51  F090         	goto	l4791
  2896   0120F0                     u2540:
  2897   0120F0                     
  2898                           ; BSR set to: 0
  2899                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2900   0120F0  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2901   0120F4  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2902   0120F8  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2903   0120FC  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2904   012100  90D8               	bcf	status,0,c
  2905   012102  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2906   012104  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2907   012106  90D8               	bcf	status,0,c
  2908   012108  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2909   01210A  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2910   01210C  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2911   012110  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2912   012114  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2913   012118  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2914   01211C                     
  2915                           ; BSR set to: 0
  2916                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2917   01211C  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2918   012120  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2919   012124  0ECE               	movlw	low STR_2
  2920   012126  6F68               	movwf	sprintf@fmt& (0+255),b
  2921   012128  0EFF               	movlw	high STR_2
  2922   01212A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2923   01212C  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2924   012130  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2925   012134  EC6B  F094         	call	_sprintf	;wreg free
  2926   012138                     
  2927                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2928   012138  C081  F005         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2929   01213C  C082  F006         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2930   012140  ECD5  F095         	call	_sendStringSerial4	;wreg free
  2931   012144                     
  2932                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2933   012144  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2934   012148  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2935   01214C  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2936   012150  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2937   012154  0E20               	movlw	32
  2938   012156  0100               	movlb	0	; () banked
  2939   012158  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2940   01215A  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2941   01215C  0E03               	movlw	3
  2942   01215E  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2943   012160  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2944   012162  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2945   012166  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2946   01216A  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2947   01216E  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2948   012172                     
  2949                           ; BSR set to: 0
  2950   012172  0012               	return		;funcret
  2951   012174                     __end_of_clear_read_calibration:
  2952                           	callstack 0
  2953                           
  2954 ;; *************** function _card_response *****************
  2955 ;; Defined at:
  2956 ;;		line 345 in file "colour_identify.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  buf             2   60[BANK0 ] PTR unsigned char 
  2959 ;;		 -> main@buf(150), 
  2960 ;;  clear_read      2   62[BANK0 ] PTR unsigned int 
  2961 ;;		 -> main@clear_read(2), 
  2962 ;;  red_read        2   64[BANK0 ] PTR unsigned int 
  2963 ;;		 -> main@red_read(2), 
  2964 ;;  green_read      2   66[BANK0 ] PTR unsigned int 
  2965 ;;		 -> main@green_read(2), 
  2966 ;;  blue_read       2   68[BANK0 ] PTR unsigned int 
  2967 ;;		 -> main@blue_read(2), 
  2968 ;;  expected_val    2   70[BANK0 ] PTR unsigned int [9]
  2969 ;;		 -> main@expected_values(72), 
  2970 ;;  card            1   72[BANK0 ] enum E14551
  2971 ;;  mL              2   73[BANK0 ] PTR struct DC_motor
  2972 ;;		 -> main@motorL(9), 
  2973 ;;  mR              2   75[BANK0 ] PTR struct DC_motor
  2974 ;;		 -> main@motorR(9), 
  2975 ;;  ReturnHomeTi    2   77[BANK0 ] PTR unsigned int 
  2976 ;;		 -> main@ReturnHomeTimes(60), 
  2977 ;;  ReturnHomeCa    2   79[BANK0 ] PTR enum E14551
  2978 ;;		 -> main@ReturnHomeCards(30), 
  2979 ;;  stop_all        2   81[BANK0 ] PTR unsigned int 
  2980 ;;		 -> main@stop_all(2), 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  normalised_v   72    0[BANK1 ] unsigned int [9][4]
  2983 ;;  master_close   18   72[BANK1 ] unsigned int [9]
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      enum E14569
  2986 ;; Registers used:
  2987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2993 ;;      Params:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;      Locals:         0       0      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2996 ;;      Totals:         0      23      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2997 ;;Total ram usage:      113 bytes
  2998 ;; Hardware stack levels used: 1
  2999 ;; Hardware stack levels required when called: 10
  3000 ;; This function calls:
  3001 ;;		_collect_avg_readings
  3002 ;;		_determine_card
  3003 ;;		_make_master_closeness
  3004 ;;		_motor_response
  3005 ;;		_normalise_readings
  3006 ;;		_sendStringSerial4
  3007 ;;		_sprintf
  3008 ;; This function is called by:
  3009 ;;		_main
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text7
  3014   011ABA                     __ptext7:
  3015                           	callstack 0
  3016   011ABA                     _card_response:
  3017                           	callstack 20
  3018   011ABA                     
  3019                           ;colour_identify.c: 349:     unsigned int normalised_values[4][9];;colour_identify.c: 35
      +                          0:     unsigned int master_closeness[9];;colour_identify.c: 352:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  3020   011ABA  C09E  F00F         	movff	card_response@clear_read,collect_avg_readings@clear_read
  3021   011ABE  C09F  F010         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  3022   011AC2  C0A0  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  3023   011AC6  C0A1  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  3024   011ACA  C0A2  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  3025   011ACE  C0A3  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  3026   011AD2  C0A4  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  3027   011AD6  C0A5  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  3028   011ADA  EC5C  F08B         	call	_collect_avg_readings	;wreg free
  3029   011ADE                     
  3030                           ;colour_identify.c: 353:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  3031   011ADE  C09C  F066         	movff	card_response@buf,sprintf@s
  3032   011AE2  C09D  F067         	movff	card_response@buf+1,sprintf@s+1
  3033   011AE6  0E25               	movlw	low STR_11
  3034   011AE8  0100               	movlb	0	; () banked
  3035   011AEA  6F68               	movwf	sprintf@fmt& (0+255),b
  3036   011AEC  0EFF               	movlw	high STR_11
  3037   011AEE  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3038   011AF0  C09E  FFD9         	movff	card_response@clear_read,fsr2l
  3039   011AF4  C09F  FFDA         	movff	card_response@clear_read+1,fsr2h
  3040   011AF8  CFDE F06A          	movff	postinc2,?_sprintf+4
  3041   011AFC  CFDD F06B          	movff	postdec2,?_sprintf+5
  3042   011B00  C0A0  FFD9         	movff	card_response@red_read,fsr2l
  3043   011B04  C0A1  FFDA         	movff	card_response@red_read+1,fsr2h
  3044   011B08  CFDE F06C          	movff	postinc2,?_sprintf+6
  3045   011B0C  CFDD F06D          	movff	postdec2,?_sprintf+7
  3046   011B10  C0A2  FFD9         	movff	card_response@green_read,fsr2l
  3047   011B14  C0A3  FFDA         	movff	card_response@green_read+1,fsr2h
  3048   011B18  CFDE F06E          	movff	postinc2,?_sprintf+8
  3049   011B1C  CFDD F06F          	movff	postdec2,?_sprintf+9
  3050   011B20  C0A4  FFD9         	movff	card_response@blue_read,fsr2l
  3051   011B24  C0A5  FFDA         	movff	card_response@blue_read+1,fsr2h
  3052   011B28  CFDE F070          	movff	postinc2,?_sprintf+10
  3053   011B2C  CFDD F071          	movff	postdec2,?_sprintf+11
  3054   011B30  EC6B  F094         	call	_sprintf	;wreg free
  3055   011B34                     
  3056                           ;colour_identify.c: 354:     sendStringSerial4(buf);
  3057   011B34  C09C  F005         	movff	card_response@buf,sendStringSerial4@string
  3058   011B38  C09D  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3059   011B3C  ECD5  F095         	call	_sendStringSerial4	;wreg free
  3060   011B40                     
  3061                           ;colour_identify.c: 356:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  3062   011B40  C09C  F01A         	movff	card_response@buf,normalise_readings@buf
  3063   011B44  C09D  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  3064   011B48  C09E  FFD9         	movff	card_response@clear_read,fsr2l
  3065   011B4C  C09F  FFDA         	movff	card_response@clear_read+1,fsr2h
  3066   011B50  CFDE F01C          	movff	postinc2,normalise_readings@clear_read
  3067   011B54  CFDD F01D          	movff	postdec2,normalise_readings@clear_read+1
  3068   011B58  C0A0  FFD9         	movff	card_response@red_read,fsr2l
  3069   011B5C  C0A1  FFDA         	movff	card_response@red_read+1,fsr2h
  3070   011B60  CFDE F01E          	movff	postinc2,normalise_readings@red_read
  3071   011B64  CFDD F01F          	movff	postdec2,normalise_readings@red_read+1
  3072   011B68  C0A2  FFD9         	movff	card_response@green_read,fsr2l
  3073   011B6C  C0A3  FFDA         	movff	card_response@green_read+1,fsr2h
  3074   011B70  CFDE F020          	movff	postinc2,normalise_readings@green_read
  3075   011B74  CFDD F021          	movff	postdec2,normalise_readings@green_read+1
  3076   011B78  C0A4  FFD9         	movff	card_response@blue_read,fsr2l
  3077   011B7C  C0A5  FFDA         	movff	card_response@blue_read+1,fsr2h
  3078   011B80  CFDE F022          	movff	postinc2,normalise_readings@blue_read
  3079   011B84  CFDD F023          	movff	postdec2,normalise_readings@blue_read+1
  3080   011B88  C0A6  F024         	movff	card_response@expected_values,normalise_readings@expected_values
  3081   011B8C  C0A7  F025         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  3082   011B90  0E00               	movlw	low card_response@normalised_values
  3083   011B92  6E26               	movwf	normalise_readings@normalised_values^0,c
  3084   011B94  0E01               	movlw	high card_response@normalised_values
  3085   011B96  6E27               	movwf	(normalise_readings@normalised_values+1)^0,c
  3086   011B98  ECAC  F088         	call	_normalise_readings	;wreg free
  3087   011B9C                     
  3088                           ;colour_identify.c: 358:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  3089   011B9C  C09C  F004         	movff	card_response@buf,make_master_closeness@buf
  3090   011BA0  C09D  F005         	movff	card_response@buf+1,make_master_closeness@buf+1
  3091   011BA4  0E00               	movlw	low card_response@normalised_values
  3092   011BA6  6E06               	movwf	make_master_closeness@normalised_values^0,c
  3093   011BA8  0E01               	movlw	high card_response@normalised_values
  3094   011BAA  6E07               	movwf	(make_master_closeness@normalised_values+1)^0,c
  3095   011BAC  0E48               	movlw	low card_response@master_closeness
  3096   011BAE  6E08               	movwf	make_master_closeness@master_closeness^0,c
  3097   011BB0  0E01               	movlw	high card_response@master_closeness
  3098   011BB2  6E09               	movwf	(make_master_closeness@master_closeness+1)^0,c
  3099   011BB4  ECBA  F090         	call	_make_master_closeness	;wreg free
  3100   011BB8                     
  3101                           ;colour_identify.c: 360:     card = determine_card(master_closeness);
  3102   011BB8  0E48               	movlw	low card_response@master_closeness
  3103   011BBA  6E04               	movwf	determine_card@master_closeness^0,c
  3104   011BBC  0E01               	movlw	high card_response@master_closeness
  3105   011BBE  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  3106   011BC0  EC2A  F093         	call	_determine_card	;wreg free
  3107   011BC4  0100               	movlb	0	; () banked
  3108   011BC6  6FA8               	movwf	card_response@card& (0+255),b
  3109   011BC8                     
  3110                           ; BSR set to: 0
  3111                           ;colour_identify.c: 361:     sprintf(buf, "CARD %d \n", card);
  3112   011BC8  C09C  F066         	movff	card_response@buf,sprintf@s
  3113   011BCC  C09D  F067         	movff	card_response@buf+1,sprintf@s+1
  3114   011BD0  0EF4               	movlw	low STR_12
  3115   011BD2  6F68               	movwf	sprintf@fmt& (0+255),b
  3116   011BD4  0EFF               	movlw	high STR_12
  3117   011BD6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3118   011BD8  C0A8  F06A         	movff	card_response@card,?_sprintf+4
  3119   011BDC  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  3120   011BDE  EC6B  F094         	call	_sprintf	;wreg free
  3121   011BE2                     
  3122                           ;colour_identify.c: 362:     sendStringSerial4(buf);
  3123   011BE2  C09C  F005         	movff	card_response@buf,sendStringSerial4@string
  3124   011BE6  C09D  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3125   011BEA  ECD5  F095         	call	_sendStringSerial4	;wreg free
  3126   011BEE                     
  3127                           ;colour_identify.c: 364:     motor_response(buf, card, mL, mR, ReturnHomeTimes, ReturnHo
      +                          meCards, stop_all);
  3128   011BEE  C09C  F081         	movff	card_response@buf,motor_response@buf
  3129   011BF2  C09D  F082         	movff	card_response@buf+1,motor_response@buf+1
  3130   011BF6  C0A8  F083         	movff	card_response@card,motor_response@card
  3131   011BFA  C0A9  F084         	movff	card_response@mL,motor_response@mL
  3132   011BFE  C0AA  F085         	movff	card_response@mL+1,motor_response@mL+1
  3133   011C02  C0AB  F086         	movff	card_response@mR,motor_response@mR
  3134   011C06  C0AC  F087         	movff	card_response@mR+1,motor_response@mR+1
  3135   011C0A  C0AD  F088         	movff	card_response@ReturnHomeTimes,motor_response@ReturnHomeTimes
  3136   011C0E  C0AE  F089         	movff	card_response@ReturnHomeTimes+1,motor_response@ReturnHomeTimes+1
  3137   011C12  C0AF  F08A         	movff	card_response@ReturnHomeCards,motor_response@ReturnHomeCards
  3138   011C16  C0B0  F08B         	movff	card_response@ReturnHomeCards+1,motor_response@ReturnHomeCards+1
  3139   011C1A  C0B1  F08C         	movff	card_response@stop_all,motor_response@stop_all
  3140   011C1E  C0B2  F08D         	movff	card_response@stop_all+1,motor_response@stop_all+1
  3141   011C22  EC00  F080         	call	_motor_response	;wreg free
  3142   011C26                     
  3143                           ;colour_identify.c: 366:     return card;
  3144   011C26  0100               	movlb	0	; () banked
  3145   011C28  51A8               	movf	card_response@card& (0+255),w,b
  3146   011C2A                     
  3147                           ; BSR set to: 0
  3148   011C2A  0012               	return		;funcret
  3149   011C2C                     __end_of_card_response:
  3150                           	callstack 0
  3151                           
  3152 ;; *************** function _normalise_readings *****************
  3153 ;; Defined at:
  3154 ;;		line 70 in file "colour_identify.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  buf             2   25[COMRAM] PTR unsigned char 
  3157 ;;		 -> main@buf(150), 
  3158 ;;  clear_read      2   27[COMRAM] unsigned int 
  3159 ;;  red_read        2   29[COMRAM] unsigned int 
  3160 ;;  green_read      2   31[COMRAM] unsigned int 
  3161 ;;  blue_read       2   33[COMRAM] unsigned int 
  3162 ;;  expected_val    2   35[COMRAM] PTR unsigned int [9]
  3163 ;;		 -> main@expected_values(72), 
  3164 ;;  normalised_v    2   37[COMRAM] PTR unsigned int [9]
  3165 ;;		 -> card_response@normalised_values(72), 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  difference      2   47[COMRAM] unsigned int 
  3168 ;;  i               1   49[COMRAM] enum E14551
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3178 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;Total ram usage:       25 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 2
  3185 ;; This function calls:
  3186 ;;		___lwdiv
  3187 ;;		___wmul
  3188 ;;		_abs
  3189 ;; This function is called by:
  3190 ;;		_card_response
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text8
  3195   011158                     __ptext8:
  3196                           	callstack 0
  3197   011158                     _normalise_readings:
  3198                           	callstack 27
  3199   011158                     
  3200                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  3201   011158  0E00               	movlw	0
  3202   01115A  6E32               	movwf	normalise_readings@i^0,c
  3203   01115C                     l4453:
  3204                           
  3205                           ;colour_identify.c: 82:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3206   01115C  5032               	movf	normalise_readings@i^0,w,c
  3207   01115E  0D02               	mullw	2
  3208   011160  CFF3 F028          	movff	prodl,??_normalise_readings
  3209   011164  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3210   011168  5028               	movf	??_normalise_readings^0,w,c
  3211   01116A  2424               	addwf	normalise_readings@expected_values^0,w,c
  3212   01116C  6ED9               	movwf	fsr2l,c
  3213   01116E  5029               	movf	(??_normalise_readings+1)^0,w,c
  3214   011170  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3215   011172  6EDA               	movwf	fsr2h,c
  3216   011174  CFDE F02A          	movff	postinc2,??_normalise_readings+2
  3217   011178  CFDD F02B          	movff	postdec2,??_normalise_readings+3
  3218   01117C  502A               	movf	(??_normalise_readings+2)^0,w,c
  3219   01117E  5C1E               	subwf	normalise_readings@red_read^0,w,c
  3220   011180  6E16               	movwf	abs@a^0,c
  3221   011182  502B               	movf	(??_normalise_readings+3)^0,w,c
  3222   011184  581F               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3223   011186  6E17               	movwf	(abs@a+1)^0,c
  3224   011188  EC9B  F095         	call	_abs	;wreg free
  3225   01118C  C016  F030         	movff	?_abs,normalise_readings@difference
  3226   011190  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3227                           
  3228                           ;colour_identify.c: 83:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3229   011194  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3230   011198  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3231   01119C  0E00               	movlw	0
  3232   01119E  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3233   0111A0  0E64               	movlw	100
  3234   0111A2  6E06               	movwf	___wmul@multiplicand^0,c
  3235   0111A4  EC40  F096         	call	___wmul	;wreg free
  3236   0111A8  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3237   0111AC  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3238   0111B0  5032               	movf	normalise_readings@i^0,w,c
  3239   0111B2  0D02               	mullw	2
  3240   0111B4  CFF3 F028          	movff	prodl,??_normalise_readings
  3241   0111B8  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3242   0111BC  5028               	movf	??_normalise_readings^0,w,c
  3243   0111BE  2424               	addwf	normalise_readings@expected_values^0,w,c
  3244   0111C0  6ED9               	movwf	fsr2l,c
  3245   0111C2  5029               	movf	(??_normalise_readings+1)^0,w,c
  3246   0111C4  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3247   0111C6  6EDA               	movwf	fsr2h,c
  3248   0111C8  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3249   0111CC  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3250   0111D0  ECA7  F093         	call	___lwdiv	;wreg free
  3251   0111D4  5032               	movf	normalise_readings@i^0,w,c
  3252   0111D6  0D02               	mullw	2
  3253   0111D8  CFF3 F02A          	movff	prodl,??_normalise_readings+2
  3254   0111DC  CFF4 F02B          	movff	prodh,??_normalise_readings+3
  3255   0111E0  502A               	movf	(??_normalise_readings+2)^0,w,c
  3256   0111E2  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3257   0111E4  6ED9               	movwf	fsr2l,c
  3258   0111E6  502B               	movf	(??_normalise_readings+3)^0,w,c
  3259   0111E8  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3260   0111EA  6EDA               	movwf	fsr2h,c
  3261   0111EC  C00A  FFDE         	movff	?___lwdiv,postinc2
  3262   0111F0  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3263                           
  3264                           ;colour_identify.c: 86:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3265   0111F4  5032               	movf	normalise_readings@i^0,w,c
  3266   0111F6  0D02               	mullw	2
  3267   0111F8  CFF3 F028          	movff	prodl,??_normalise_readings
  3268   0111FC  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3269   011200  5028               	movf	??_normalise_readings^0,w,c
  3270   011202  2424               	addwf	normalise_readings@expected_values^0,w,c
  3271   011204  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3272   011206  5029               	movf	(??_normalise_readings+1)^0,w,c
  3273   011208  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3274   01120A  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3275   01120C  0E12               	movlw	18
  3276   01120E  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3277   011210  6ED9               	movwf	fsr2l,c
  3278   011212  0E00               	movlw	0
  3279   011214  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3280   011216  6EDA               	movwf	fsr2h,c
  3281   011218  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3282   01121C  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3283   011220  502C               	movf	(??_normalise_readings+4)^0,w,c
  3284   011222  5C20               	subwf	normalise_readings@green_read^0,w,c
  3285   011224  6E16               	movwf	abs@a^0,c
  3286   011226  502D               	movf	(??_normalise_readings+5)^0,w,c
  3287   011228  5821               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3288   01122A  6E17               	movwf	(abs@a+1)^0,c
  3289   01122C  EC9B  F095         	call	_abs	;wreg free
  3290   011230  C016  F030         	movff	?_abs,normalise_readings@difference
  3291   011234  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3292                           
  3293                           ;colour_identify.c: 87:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3294   011238  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3295   01123C  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3296   011240  0E00               	movlw	0
  3297   011242  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3298   011244  0E64               	movlw	100
  3299   011246  6E06               	movwf	___wmul@multiplicand^0,c
  3300   011248  EC40  F096         	call	___wmul	;wreg free
  3301   01124C  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3302   011250  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3303   011254  5032               	movf	normalise_readings@i^0,w,c
  3304   011256  0D02               	mullw	2
  3305   011258  CFF3 F028          	movff	prodl,??_normalise_readings
  3306   01125C  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3307   011260  5028               	movf	??_normalise_readings^0,w,c
  3308   011262  2424               	addwf	normalise_readings@expected_values^0,w,c
  3309   011264  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3310   011266  5029               	movf	(??_normalise_readings+1)^0,w,c
  3311   011268  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3312   01126A  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3313   01126C  0E12               	movlw	18
  3314   01126E  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3315   011270  6ED9               	movwf	fsr2l,c
  3316   011272  0E00               	movlw	0
  3317   011274  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3318   011276  6EDA               	movwf	fsr2h,c
  3319   011278  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3320   01127C  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3321   011280  ECA7  F093         	call	___lwdiv	;wreg free
  3322   011284  5032               	movf	normalise_readings@i^0,w,c
  3323   011286  0D02               	mullw	2
  3324   011288  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3325   01128C  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3326   011290  502C               	movf	(??_normalise_readings+4)^0,w,c
  3327   011292  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3328   011294  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3329   011296  502D               	movf	(??_normalise_readings+5)^0,w,c
  3330   011298  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3331   01129A  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3332   01129C  0E12               	movlw	18
  3333   01129E  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3334   0112A0  6ED9               	movwf	fsr2l,c
  3335   0112A2  0E00               	movlw	0
  3336   0112A4  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3337   0112A6  6EDA               	movwf	fsr2h,c
  3338   0112A8  C00A  FFDE         	movff	?___lwdiv,postinc2
  3339   0112AC  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3340                           
  3341                           ;colour_identify.c: 90:         difference = abs(blue_read - expected_values[BLUE][i]);
  3342   0112B0  5032               	movf	normalise_readings@i^0,w,c
  3343   0112B2  0D02               	mullw	2
  3344   0112B4  CFF3 F028          	movff	prodl,??_normalise_readings
  3345   0112B8  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3346   0112BC  5028               	movf	??_normalise_readings^0,w,c
  3347   0112BE  2424               	addwf	normalise_readings@expected_values^0,w,c
  3348   0112C0  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3349   0112C2  5029               	movf	(??_normalise_readings+1)^0,w,c
  3350   0112C4  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3351   0112C6  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3352   0112C8  0E24               	movlw	36
  3353   0112CA  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3354   0112CC  6ED9               	movwf	fsr2l,c
  3355   0112CE  0E00               	movlw	0
  3356   0112D0  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3357   0112D2  6EDA               	movwf	fsr2h,c
  3358   0112D4  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3359   0112D8  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3360   0112DC  502C               	movf	(??_normalise_readings+4)^0,w,c
  3361   0112DE  5C22               	subwf	normalise_readings@blue_read^0,w,c
  3362   0112E0  6E16               	movwf	abs@a^0,c
  3363   0112E2  502D               	movf	(??_normalise_readings+5)^0,w,c
  3364   0112E4  5823               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3365   0112E6  6E17               	movwf	(abs@a+1)^0,c
  3366   0112E8  EC9B  F095         	call	_abs	;wreg free
  3367   0112EC  C016  F030         	movff	?_abs,normalise_readings@difference
  3368   0112F0  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3369                           
  3370                           ;colour_identify.c: 91:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3371   0112F4  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3372   0112F8  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3373   0112FC  0E00               	movlw	0
  3374   0112FE  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3375   011300  0E64               	movlw	100
  3376   011302  6E06               	movwf	___wmul@multiplicand^0,c
  3377   011304  EC40  F096         	call	___wmul	;wreg free
  3378   011308  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3379   01130C  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3380   011310  5032               	movf	normalise_readings@i^0,w,c
  3381   011312  0D02               	mullw	2
  3382   011314  CFF3 F028          	movff	prodl,??_normalise_readings
  3383   011318  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3384   01131C  5028               	movf	??_normalise_readings^0,w,c
  3385   01131E  2424               	addwf	normalise_readings@expected_values^0,w,c
  3386   011320  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3387   011322  5029               	movf	(??_normalise_readings+1)^0,w,c
  3388   011324  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3389   011326  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3390   011328  0E24               	movlw	36
  3391   01132A  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3392   01132C  6ED9               	movwf	fsr2l,c
  3393   01132E  0E00               	movlw	0
  3394   011330  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3395   011332  6EDA               	movwf	fsr2h,c
  3396   011334  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3397   011338  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3398   01133C  ECA7  F093         	call	___lwdiv	;wreg free
  3399   011340  5032               	movf	normalise_readings@i^0,w,c
  3400   011342  0D02               	mullw	2
  3401   011344  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3402   011348  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3403   01134C  502C               	movf	(??_normalise_readings+4)^0,w,c
  3404   01134E  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3405   011350  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3406   011352  502D               	movf	(??_normalise_readings+5)^0,w,c
  3407   011354  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3408   011356  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3409   011358  0E24               	movlw	36
  3410   01135A  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3411   01135C  6ED9               	movwf	fsr2l,c
  3412   01135E  0E00               	movlw	0
  3413   011360  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3414   011362  6EDA               	movwf	fsr2h,c
  3415   011364  C00A  FFDE         	movff	?___lwdiv,postinc2
  3416   011368  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3417                           
  3418                           ;colour_identify.c: 94:         difference = abs(clear_read - expected_values[3][i]);
  3419   01136C  5032               	movf	normalise_readings@i^0,w,c
  3420   01136E  0D02               	mullw	2
  3421   011370  CFF3 F028          	movff	prodl,??_normalise_readings
  3422   011374  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3423   011378  5028               	movf	??_normalise_readings^0,w,c
  3424   01137A  2424               	addwf	normalise_readings@expected_values^0,w,c
  3425   01137C  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3426   01137E  5029               	movf	(??_normalise_readings+1)^0,w,c
  3427   011380  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3428   011382  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3429   011384  0E36               	movlw	54
  3430   011386  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3431   011388  6ED9               	movwf	fsr2l,c
  3432   01138A  0E00               	movlw	0
  3433   01138C  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3434   01138E  6EDA               	movwf	fsr2h,c
  3435   011390  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3436   011394  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3437   011398  502C               	movf	(??_normalise_readings+4)^0,w,c
  3438   01139A  5C1C               	subwf	normalise_readings@clear_read^0,w,c
  3439   01139C  6E16               	movwf	abs@a^0,c
  3440   01139E  502D               	movf	(??_normalise_readings+5)^0,w,c
  3441   0113A0  581D               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3442   0113A2  6E17               	movwf	(abs@a+1)^0,c
  3443   0113A4  EC9B  F095         	call	_abs	;wreg free
  3444   0113A8  C016  F030         	movff	?_abs,normalise_readings@difference
  3445   0113AC  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3446                           
  3447                           ;colour_identify.c: 95:         normalised_values[3][i] = (difference*100) / expected_va
      +                          lues[3][i];
  3448   0113B0  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3449   0113B4  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3450   0113B8  0E00               	movlw	0
  3451   0113BA  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3452   0113BC  0E64               	movlw	100
  3453   0113BE  6E06               	movwf	___wmul@multiplicand^0,c
  3454   0113C0  EC40  F096         	call	___wmul	;wreg free
  3455   0113C4  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3456   0113C8  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3457   0113CC  5032               	movf	normalise_readings@i^0,w,c
  3458   0113CE  0D02               	mullw	2
  3459   0113D0  CFF3 F028          	movff	prodl,??_normalise_readings
  3460   0113D4  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3461   0113D8  5028               	movf	??_normalise_readings^0,w,c
  3462   0113DA  2424               	addwf	normalise_readings@expected_values^0,w,c
  3463   0113DC  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3464   0113DE  5029               	movf	(??_normalise_readings+1)^0,w,c
  3465   0113E0  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3466   0113E2  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3467   0113E4  0E36               	movlw	54
  3468   0113E6  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3469   0113E8  6ED9               	movwf	fsr2l,c
  3470   0113EA  0E00               	movlw	0
  3471   0113EC  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3472   0113EE  6EDA               	movwf	fsr2h,c
  3473   0113F0  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3474   0113F4  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3475   0113F8  ECA7  F093         	call	___lwdiv	;wreg free
  3476   0113FC  5032               	movf	normalise_readings@i^0,w,c
  3477   0113FE  0D02               	mullw	2
  3478   011400  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3479   011404  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3480   011408  502C               	movf	(??_normalise_readings+4)^0,w,c
  3481   01140A  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3482   01140C  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3483   01140E  502D               	movf	(??_normalise_readings+5)^0,w,c
  3484   011410  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3485   011412  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3486   011414  0E36               	movlw	54
  3487   011416  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3488   011418  6ED9               	movwf	fsr2l,c
  3489   01141A  0E00               	movlw	0
  3490   01141C  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3491   01141E  6EDA               	movwf	fsr2h,c
  3492   011420  C00A  FFDE         	movff	?___lwdiv,postinc2
  3493   011424  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3494   011428                     
  3495                           ;colour_identify.c: 97:     }
  3496   011428  2A32               	incf	normalise_readings@i^0,f,c
  3497   01142A  0E08               	movlw	8
  3498   01142C  6432               	cpfsgt	normalise_readings@i^0,c
  3499   01142E  EF1B  F08A         	goto	u2441
  3500   011432  EF1D  F08A         	goto	u2440
  3501   011436                     u2441:
  3502   011436  EFAE  F088         	goto	l4453
  3503   01143A                     u2440:
  3504   01143A  0012               	return		;funcret
  3505   01143C                     __end_of_normalise_readings:
  3506                           	callstack 0
  3507                           
  3508 ;; *************** function _motor_response *****************
  3509 ;; Defined at:
  3510 ;;		line 125 in file "colour_identify.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  3513 ;;		 -> main@buf(150), 
  3514 ;;  card            1   35[BANK0 ] enum E14551
  3515 ;;  mL              2   36[BANK0 ] PTR struct DC_motor
  3516 ;;		 -> main@motorL(9), 
  3517 ;;  mR              2   38[BANK0 ] PTR struct DC_motor
  3518 ;;		 -> main@motorR(9), 
  3519 ;;  ReturnHomeTi    2   40[BANK0 ] PTR unsigned int 
  3520 ;;		 -> main@ReturnHomeTimes(60), 
  3521 ;;  ReturnHomeCa    2   42[BANK0 ] PTR enum E14551
  3522 ;;		 -> main@ReturnHomeCards(30), 
  3523 ;;  stop_all        2   44[BANK0 ] PTR unsigned int 
  3524 ;;		 -> main@stop_all(2), 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  j               2   52[BANK0 ] int 
  3527 ;;  j               2   54[BANK0 ] int 
  3528 ;;  i               2   58[BANK0 ] int 
  3529 ;;  k               2   56[BANK0 ] int 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3539 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3543 ;;Total ram usage:       27 bytes
  3544 ;; Hardware stack levels used: 1
  3545 ;; Hardware stack levels required when called: 9
  3546 ;; This function calls:
  3547 ;;		_fullSpeedAhead
  3548 ;;		_home_response
  3549 ;;		_reverseFullSpeed
  3550 ;;		_sendStringSerial4
  3551 ;;		_sprintf
  3552 ;;		_stop
  3553 ;;		_turnLeft45
  3554 ;;		_turnRight45
  3555 ;; This function is called by:
  3556 ;;		_card_response
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text9
  3561   010000                     __ptext9:
  3562                           	callstack 0
  3563   010000                     _motor_response:
  3564                           	callstack 20
  3565   010000                     
  3566                           ;colour_identify.c: 130:     switch (card){
  3567   010000  EF50  F083         	goto	l4701
  3568   010004                     l4497:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;colour_identify.c: 132:             reverseFullSpeed(mL,mR);
  3572   010004  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3573   010008  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3574   01000C  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3575   010010  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3576   010014  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3577   010018                     
  3578                           ;colour_identify.c: 133:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3579   010018  0E19               	movlw	25
  3580   01001A  0100               	movlb	0	; () banked
  3581   01001C  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3582   01001E  0E5A               	movlw	90
  3583   010020  6F8E               	movwf	??_motor_response& (0+255),b
  3584   010022  0EB1               	movlw	177
  3585   010024                     u2827:
  3586   010024  2EE8               	decfsz	wreg,f,c
  3587   010026  D7FE               	bra	u2827
  3588   010028  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3589   01002A  D7FC               	bra	u2827
  3590   01002C  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3591   01002E  D7FA               	bra	u2827
  3592   010030  D000               	nop2	
  3593   010032                     l4501:
  3594                           
  3595                           ;colour_identify.c: 134:             turnRight45(mL,mR);
  3596   010032  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3597   010036  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3598   01003A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3599   01003E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3600   010042  ECA5  F091         	call	_turnRight45	;wreg free
  3601   010046                     
  3602                           ;colour_identify.c: 135:             stop(mL,mR);
  3603   010046  C084  F017         	movff	motor_response@mL,stop@mL
  3604   01004A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3605   01004E  C086  F019         	movff	motor_response@mR,stop@mR
  3606   010052  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3607   010056  EC13  F094         	call	_stop	;wreg free
  3608   01005A                     
  3609                           ;colour_identify.c: 136:             turnRight45(mL,mR);
  3610   01005A  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3611   01005E  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3612   010062  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3613   010066  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3614   01006A  ECA5  F091         	call	_turnRight45	;wreg free
  3615   01006E                     l4507:
  3616                           
  3617                           ;colour_identify.c: 137:             stop(mL,mR);
  3618   01006E  C084  F017         	movff	motor_response@mL,stop@mL
  3619   010072  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3620   010076  C086  F019         	movff	motor_response@mR,stop@mR
  3621   01007A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3622   01007E  EC13  F094         	call	_stop	;wreg free
  3623                           
  3624                           ;colour_identify.c: 138:             break;
  3625   010082  EF82  F083         	goto	l391
  3626   010086                     l4509:
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;colour_identify.c: 140:             reverseFullSpeed(mL,mR);
  3630   010086  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3631   01008A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3632   01008E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3633   010092  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3634   010096  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3635   01009A                     
  3636                           ;colour_identify.c: 141:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3637   01009A  0E19               	movlw	25
  3638   01009C  0100               	movlb	0	; () banked
  3639   01009E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3640   0100A0  0E5A               	movlw	90
  3641   0100A2  6F8E               	movwf	??_motor_response& (0+255),b
  3642   0100A4  0EB1               	movlw	177
  3643   0100A6                     u2837:
  3644   0100A6  2EE8               	decfsz	wreg,f,c
  3645   0100A8  D7FE               	bra	u2837
  3646   0100AA  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3647   0100AC  D7FC               	bra	u2837
  3648   0100AE  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3649   0100B0  D7FA               	bra	u2837
  3650   0100B2  D000               	nop2	
  3651   0100B4                     l4513:
  3652                           
  3653                           ;colour_identify.c: 142:             turnLeft45(mL,mR);
  3654   0100B4  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3655   0100B8  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3656   0100BC  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3657   0100C0  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3658   0100C4  ECFC  F091         	call	_turnLeft45	;wreg free
  3659   0100C8                     
  3660                           ;colour_identify.c: 143:             stop(mL,mR);
  3661   0100C8  C084  F017         	movff	motor_response@mL,stop@mL
  3662   0100CC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3663   0100D0  C086  F019         	movff	motor_response@mR,stop@mR
  3664   0100D4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3665   0100D8  EC13  F094         	call	_stop	;wreg free
  3666   0100DC                     
  3667                           ;colour_identify.c: 144:             turnLeft45(mL,mR);
  3668   0100DC  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3669   0100E0  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3670   0100E4  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3671   0100E8  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3672   0100EC  ECFC  F091         	call	_turnLeft45	;wreg free
  3673   0100F0  EF37  F080         	goto	l4507
  3674   0100F4                     l4521:
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  3678   0100F4  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3679   0100F8  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3680   0100FC  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3681   010100  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3682   010104  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3683   010108                     
  3684                           ;colour_identify.c: 149:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3685   010108  0E19               	movlw	25
  3686   01010A  0100               	movlb	0	; () banked
  3687   01010C  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3688   01010E  0E5A               	movlw	90
  3689   010110  6F8E               	movwf	??_motor_response& (0+255),b
  3690   010112  0EB1               	movlw	177
  3691   010114                     u2847:
  3692   010114  2EE8               	decfsz	wreg,f,c
  3693   010116  D7FE               	bra	u2847
  3694   010118  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3695   01011A  D7FC               	bra	u2847
  3696   01011C  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3697   01011E  D7FA               	bra	u2847
  3698   010120  D000               	nop2	
  3699   010122                     
  3700                           ;colour_identify.c: 150:             turnRight45(mL,mR);
  3701   010122  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3702   010126  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3703   01012A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3704   01012E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3705   010132  ECA5  F091         	call	_turnRight45	;wreg free
  3706   010136                     
  3707                           ;colour_identify.c: 151:             stop(mL,mR);
  3708   010136  C084  F017         	movff	motor_response@mL,stop@mL
  3709   01013A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3710   01013E  C086  F019         	movff	motor_response@mR,stop@mR
  3711   010142  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3712   010146  EC13  F094         	call	_stop	;wreg free
  3713   01014A                     l4529:
  3714                           
  3715                           ;colour_identify.c: 152:             turnRight45(mL,mR);
  3716   01014A  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3717   01014E  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3718   010152  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3719   010156  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3720   01015A  ECA5  F091         	call	_turnRight45	;wreg free
  3721   01015E                     l4531:
  3722                           
  3723                           ;colour_identify.c: 153:             stop(mL,mR);
  3724   01015E  C084  F017         	movff	motor_response@mL,stop@mL
  3725   010162  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3726   010166  C086  F019         	movff	motor_response@mR,stop@mR
  3727   01016A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3728   01016E  EC13  F094         	call	_stop	;wreg free
  3729   010172  EF19  F080         	goto	l4501
  3730   010176                     l4541:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  3734   010176  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3735   01017A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3736   01017E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3737   010182  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3738   010186  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3739   01018A                     
  3740                           ;colour_identify.c: 162:             _delay((unsigned long)((1700)*(64000000/4000.0)));
  3741   01018A  0E8A               	movlw	138
  3742   01018C  0100               	movlb	0	; () banked
  3743   01018E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3744   010190  0EFD               	movlw	253
  3745   010192  6F8E               	movwf	??_motor_response& (0+255),b
  3746   010194  0E4F               	movlw	79
  3747   010196                     u2857:
  3748   010196  2EE8               	decfsz	wreg,f,c
  3749   010198  D7FE               	bra	u2857
  3750   01019A  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3751   01019C  D7FC               	bra	u2857
  3752   01019E  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3753   0101A0  D7FA               	bra	u2857
  3754   0101A2  EFAF  F080         	goto	l4531
  3755   0101A6                     l4555:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;colour_identify.c: 170:             reverseFullSpeed(mL,mR);
  3759   0101A6  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3760   0101AA  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3761   0101AE  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3762   0101B2  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3763   0101B6  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3764   0101BA                     
  3765                           ;colour_identify.c: 172:             _delay((unsigned long)((1700)*(64000000/4000.0)));
  3766   0101BA  0E8A               	movlw	138
  3767   0101BC  0100               	movlb	0	; () banked
  3768   0101BE  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3769   0101C0  0EFD               	movlw	253
  3770   0101C2  6F8E               	movwf	??_motor_response& (0+255),b
  3771   0101C4  0E4F               	movlw	79
  3772   0101C6                     u2867:
  3773   0101C6  2EE8               	decfsz	wreg,f,c
  3774   0101C8  D7FE               	bra	u2867
  3775   0101CA  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3776   0101CC  D7FC               	bra	u2867
  3777   0101CE  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3778   0101D0  D7FA               	bra	u2867
  3779   0101D2                     l4559:
  3780                           
  3781                           ;colour_identify.c: 173:             stop(mL,mR);
  3782   0101D2  C084  F017         	movff	motor_response@mL,stop@mL
  3783   0101D6  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3784   0101DA  C086  F019         	movff	motor_response@mR,stop@mR
  3785   0101DE  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3786   0101E2  EC13  F094         	call	_stop	;wreg free
  3787   0101E6  EF5A  F080         	goto	l4513
  3788   0101EA                     l4569:
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;colour_identify.c: 180:             reverseFullSpeed(mL,mR);
  3792   0101EA  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3793   0101EE  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3794   0101F2  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3795   0101F6  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3796   0101FA  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3797   0101FE                     
  3798                           ;colour_identify.c: 181:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3799   0101FE  0E19               	movlw	25
  3800   010200  0100               	movlb	0	; () banked
  3801   010202  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3802   010204  0E5A               	movlw	90
  3803   010206  6F8E               	movwf	??_motor_response& (0+255),b
  3804   010208  0EB1               	movlw	177
  3805   01020A                     u2877:
  3806   01020A  2EE8               	decfsz	wreg,f,c
  3807   01020C  D7FE               	bra	u2877
  3808   01020E  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3809   010210  D7FC               	bra	u2877
  3810   010212  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3811   010214  D7FA               	bra	u2877
  3812   010216  D000               	nop2	
  3813   010218  EFA5  F080         	goto	l4529
  3814   01021C                     l4585:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;colour_identify.c: 190:             reverseFullSpeed(mL,mR);
  3818   01021C  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3819   010220  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3820   010224  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3821   010228  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3822   01022C  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3823   010230                     
  3824                           ;colour_identify.c: 191:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3825   010230  0E19               	movlw	25
  3826   010232  0100               	movlb	0	; () banked
  3827   010234  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3828   010236  0E5A               	movlw	90
  3829   010238  6F8E               	movwf	??_motor_response& (0+255),b
  3830   01023A  0EB1               	movlw	177
  3831   01023C                     u2887:
  3832   01023C  2EE8               	decfsz	wreg,f,c
  3833   01023E  D7FE               	bra	u2887
  3834   010240  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3835   010242  D7FC               	bra	u2887
  3836   010244  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3837   010246  D7FA               	bra	u2887
  3838   010248  D000               	nop2	
  3839   01024A                     
  3840                           ;colour_identify.c: 192:             turnLeft45(mL,mR);
  3841   01024A  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3842   01024E  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3843   010252  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3844   010256  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3845   01025A  ECFC  F091         	call	_turnLeft45	;wreg free
  3846   01025E  EFE9  F080         	goto	l4559
  3847   010262                     l4601:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;colour_identify.c: 201:             reverseFullSpeed(mL,mR);
  3851   010262  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3852   010266  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3853   01026A  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3854   01026E  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3855   010272  ECA0  F092         	call	_reverseFullSpeed	;wreg free
  3856   010276                     
  3857                           ;colour_identify.c: 202:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3858   010276  0E19               	movlw	25
  3859   010278  0100               	movlb	0	; () banked
  3860   01027A  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3861   01027C  0E5A               	movlw	90
  3862   01027E  6F8E               	movwf	??_motor_response& (0+255),b
  3863   010280  0EB1               	movlw	177
  3864   010282                     u2897:
  3865   010282  2EE8               	decfsz	wreg,f,c
  3866   010284  D7FE               	bra	u2897
  3867   010286  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3868   010288  D7FC               	bra	u2897
  3869   01028A  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3870   01028C  D7FA               	bra	u2897
  3871   01028E  D000               	nop2	
  3872   010290                     
  3873                           ;colour_identify.c: 203:             stop(mL,mR);
  3874   010290  C084  F017         	movff	motor_response@mL,stop@mL
  3875   010294  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3876   010298  C086  F019         	movff	motor_response@mR,stop@mR
  3877   01029C  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3878   0102A0  EC13  F094         	call	_stop	;wreg free
  3879   0102A4                     
  3880                           ;colour_identify.c: 204:             turnLeft45(mL,mR);
  3881   0102A4  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3882   0102A8  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3883   0102AC  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3884   0102B0  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3885   0102B4  ECFC  F091         	call	_turnLeft45	;wreg free
  3886   0102B8                     
  3887                           ;colour_identify.c: 205:             stop(mL,mR);
  3888   0102B8  C084  F017         	movff	motor_response@mL,stop@mL
  3889   0102BC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3890   0102C0  C086  F019         	movff	motor_response@mR,stop@mR
  3891   0102C4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3892   0102C8  EC13  F094         	call	_stop	;wreg free
  3893   0102CC                     
  3894                           ;colour_identify.c: 206:             turnLeft45(mL,mR);
  3895   0102CC  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3896   0102D0  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3897   0102D4  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3898   0102D8  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3899   0102DC  ECFC  F091         	call	_turnLeft45	;wreg free
  3900   0102E0                     
  3901                           ;colour_identify.c: 207:             stop(mL,mR);
  3902   0102E0  C084  F017         	movff	motor_response@mL,stop@mL
  3903   0102E4  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3904   0102E8  C086  F019         	movff	motor_response@mR,stop@mR
  3905   0102EC  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3906   0102F0  EC13  F094         	call	_stop	;wreg free
  3907                           
  3908                           ;colour_identify.c: 208:             _delay((unsigned long)((100)*(64000000/4000.0)));
  3909   0102F4  0E09               	movlw	9
  3910   0102F6  0100               	movlb	0	; () banked
  3911   0102F8  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3912   0102FA  0E1E               	movlw	30
  3913   0102FC  6F8E               	movwf	??_motor_response& (0+255),b
  3914   0102FE  0EE4               	movlw	228
  3915   010300                     u2907:
  3916   010300  2EE8               	decfsz	wreg,f,c
  3917   010302  D7FE               	bra	u2907
  3918   010304  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3919   010306  D7FC               	bra	u2907
  3920   010308  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3921   01030A  D7FA               	bra	u2907
  3922   01030C  F000               	nop	
  3923   01030E                     
  3924                           ;colour_identify.c: 209:             turnLeft45(mL,mR);
  3925   01030E  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3926   010312  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3927   010316  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3928   01031A  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3929   01031E  ECFC  F091         	call	_turnLeft45	;wreg free
  3930   010322                     
  3931                           ;colour_identify.c: 210:             stop(mL,mR);
  3932   010322  C084  F017         	movff	motor_response@mL,stop@mL
  3933   010326  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3934   01032A  C086  F019         	movff	motor_response@mR,stop@mR
  3935   01032E  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3936   010332  EC13  F094         	call	_stop	;wreg free
  3937   010336                     
  3938                           ;colour_identify.c: 211:             turnLeft45(mL,mR);
  3939   010336  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3940   01033A  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3941   01033E  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3942   010342  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3943   010346  ECFC  F091         	call	_turnLeft45	;wreg free
  3944   01034A                     
  3945                           ;colour_identify.c: 212:             stop(mL,mR);
  3946   01034A  C084  F017         	movff	motor_response@mL,stop@mL
  3947   01034E  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3948   010352  C086  F019         	movff	motor_response@mR,stop@mR
  3949   010356  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3950   01035A  EC13  F094         	call	_stop	;wreg free
  3951   01035E                     
  3952                           ;colour_identify.c: 213:             for(int k = 0; k<= 5; k++){
  3953   01035E  0E00               	movlw	0
  3954   010360  0100               	movlb	0	; () banked
  3955   010362  6F99               	movwf	(motor_response@k+1)& (0+255),b
  3956   010364  0E00               	movlw	0
  3957   010366  6F98               	movwf	motor_response@k& (0+255),b
  3958   010368                     l4629:
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;colour_identify.c: 214:                 sprintf(buf, "Timercount %d, time %d  \n", k, R
      +                          eturnHomeTimes[k]);
  3962   010368  C081  F066         	movff	motor_response@buf,sprintf@s
  3963   01036C  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3964   010370  0E82               	movlw	low STR_6
  3965   010372  6F68               	movwf	sprintf@fmt& (0+255),b
  3966   010374  0EFF               	movlw	high STR_6
  3967   010376  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3968   010378  C098  F06A         	movff	motor_response@k,?_sprintf+4
  3969   01037C  C099  F06B         	movff	motor_response@k+1,?_sprintf+5
  3970   010380  90D8               	bcf	status,0,c
  3971   010382  3598               	rlcf	motor_response@k& (0+255),w,b
  3972   010384  6ED9               	movwf	fsr2l,c
  3973   010386  3599               	rlcf	(motor_response@k+1)& (0+255),w,b
  3974   010388  6EDA               	movwf	fsr2h,c
  3975   01038A  5188               	movf	motor_response@ReturnHomeTimes& (0+255),w,b
  3976   01038C  26D9               	addwf	fsr2l,f,c
  3977   01038E  5189               	movf	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  3978   010390  22DA               	addwfc	fsr2h,f,c
  3979   010392  CFDE F06C          	movff	postinc2,?_sprintf+6
  3980   010396  CFDD F06D          	movff	postdec2,?_sprintf+7
  3981   01039A  EC6B  F094         	call	_sprintf	;wreg free
  3982   01039E                     
  3983                           ;colour_identify.c: 215:                 sendStringSerial4(buf);
  3984   01039E  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  3985   0103A2  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  3986   0103A6  ECD5  F095         	call	_sendStringSerial4	;wreg free
  3987   0103AA                     
  3988                           ;colour_identify.c: 216:                 sprintf(buf, "Cardcount %d, card %d  \n", k, Re
      +                          turnHomeCards[k]);
  3989   0103AA  C081  F066         	movff	motor_response@buf,sprintf@s
  3990   0103AE  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3991   0103B2  0E9C               	movlw	low STR_7
  3992   0103B4  0100               	movlb	0	; () banked
  3993   0103B6  6F68               	movwf	sprintf@fmt& (0+255),b
  3994   0103B8  0EFF               	movlw	high STR_7
  3995   0103BA  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3996   0103BC  C098  F06A         	movff	motor_response@k,?_sprintf+4
  3997   0103C0  C099  F06B         	movff	motor_response@k+1,?_sprintf+5
  3998   0103C4  5198               	movf	motor_response@k& (0+255),w,b
  3999   0103C6  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4000   0103C8  6ED9               	movwf	fsr2l,c
  4001   0103CA  5199               	movf	(motor_response@k+1)& (0+255),w,b
  4002   0103CC  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4003   0103CE  6EDA               	movwf	fsr2h,c
  4004   0103D0  50DF               	movf	indf2,w,c
  4005   0103D2  6F8E               	movwf	??_motor_response& (0+255),b
  4006   0103D4  518E               	movf	??_motor_response& (0+255),w,b
  4007   0103D6  6F6C               	movwf	(?_sprintf+6)& (0+255),b
  4008   0103D8  6B6D               	clrf	(?_sprintf+7)& (0+255),b
  4009   0103DA  EC6B  F094         	call	_sprintf	;wreg free
  4010                           
  4011                           ;colour_identify.c: 217:                 sendStringSerial4(buf);
  4012   0103DE  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4013   0103E2  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4014   0103E6  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4015   0103EA                     
  4016                           ;colour_identify.c: 219:             }
  4017   0103EA  0100               	movlb	0	; () banked
  4018   0103EC  4B98               	infsnz	motor_response@k& (0+255),f,b
  4019   0103EE  2B99               	incf	(motor_response@k+1)& (0+255),f,b
  4020   0103F0                     
  4021                           ; BSR set to: 0
  4022   0103F0  BF99               	btfsc	(motor_response@k+1)& (0+255),7,b
  4023   0103F2  EF04  F082         	goto	u2481
  4024   0103F6  5199               	movf	(motor_response@k+1)& (0+255),w,b
  4025   0103F8  E109               	bnz	u2480
  4026   0103FA  0E06               	movlw	6
  4027   0103FC  5D98               	subwf	motor_response@k& (0+255),w,b
  4028   0103FE  A0D8               	btfss	status,0,c
  4029   010400  EF04  F082         	goto	u2481
  4030   010404  EF06  F082         	goto	u2480
  4031   010408                     u2481:
  4032   010408  EFB4  F081         	goto	l4629
  4033   01040C                     u2480:
  4034   01040C                     
  4035                           ; BSR set to: 0
  4036                           ;colour_identify.c: 220:             for(int i = 28; i >= 0; i--){
  4037   01040C  0E00               	movlw	0
  4038   01040E  6F9B               	movwf	(motor_response@i+1)& (0+255),b
  4039   010410  0E1C               	movlw	28
  4040   010412  6F9A               	movwf	motor_response@i& (0+255),b
  4041   010414                     l4641:
  4042                           
  4043                           ; BSR set to: 0
  4044   010414  BF9B               	btfsc	(motor_response@i+1)& (0+255),7,b
  4045   010416  EF11  F082         	goto	u2490
  4046   01041A  EF0F  F082         	goto	u2491
  4047   01041E                     u2491:
  4048   01041E  EF13  F082         	goto	l4645
  4049   010422                     u2490:
  4050   010422  EFD4  F082         	goto	l4673
  4051   010426                     l4645:
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;colour_identify.c: 221:                 if (ReturnHomeTimes[i+1] != 0){
  4055   010426  C09A  F08E         	movff	motor_response@i,??_motor_response
  4056   01042A  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4057   01042E  90D8               	bcf	status,0,c
  4058   010430  378E               	rlcf	??_motor_response& (0+255),f,b
  4059   010432  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4060   010434  518E               	movf	??_motor_response& (0+255),w,b
  4061   010436  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4062   010438  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4063   01043A  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4064   01043C  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4065   01043E  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4066   010440  0E02               	movlw	2
  4067   010442  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4068   010444  6ED9               	movwf	fsr2l,c
  4069   010446  0E00               	movlw	0
  4070   010448  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4071   01044A  6EDA               	movwf	fsr2h,c
  4072   01044C  50DE               	movf	postinc2,w,c
  4073   01044E  10DE               	iorwf	postinc2,w,c
  4074   010450  B4D8               	btfsc	status,2,c
  4075   010452  EF2D  F082         	goto	u2501
  4076   010456  EF2F  F082         	goto	u2500
  4077   01045A                     u2501:
  4078   01045A  EFCE  F082         	goto	l4669
  4079   01045E                     u2500:
  4080   01045E                     
  4081                           ; BSR set to: 0
  4082                           ;colour_identify.c: 222:                     fullSpeedAhead(mL,mR);
  4083   01045E  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4084   010462  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4085   010466  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4086   01046A  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4087   01046E  EC53  F092         	call	_fullSpeedAhead	;wreg free
  4088   010472                     
  4089                           ;colour_identify.c: 223:                     sprintf(buf, "Time gonna move for %d \n", R
      +                          eturnHomeTimes[i+1]);
  4090   010472  C081  F066         	movff	motor_response@buf,sprintf@s
  4091   010476  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4092   01047A  0EB5               	movlw	low STR_8
  4093   01047C  0100               	movlb	0	; () banked
  4094   01047E  6F68               	movwf	sprintf@fmt& (0+255),b
  4095   010480  0EFF               	movlw	high STR_8
  4096   010482  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4097   010484  C09A  F08E         	movff	motor_response@i,??_motor_response
  4098   010488  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4099   01048C  90D8               	bcf	status,0,c
  4100   01048E  378E               	rlcf	??_motor_response& (0+255),f,b
  4101   010490  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4102   010492  518E               	movf	??_motor_response& (0+255),w,b
  4103   010494  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4104   010496  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4105   010498  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4106   01049A  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4107   01049C  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4108   01049E  0E02               	movlw	2
  4109   0104A0  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4110   0104A2  6ED9               	movwf	fsr2l,c
  4111   0104A4  0E00               	movlw	0
  4112   0104A6  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4113   0104A8  6EDA               	movwf	fsr2h,c
  4114   0104AA  CFDE F06A          	movff	postinc2,?_sprintf+4
  4115   0104AE  CFDD F06B          	movff	postdec2,?_sprintf+5
  4116   0104B2  EC6B  F094         	call	_sprintf	;wreg free
  4117   0104B6                     
  4118                           ;colour_identify.c: 224:                     sendStringSerial4(buf);
  4119   0104B6  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4120   0104BA  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4121   0104BE  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4122   0104C2                     
  4123                           ;colour_identify.c: 225:                     for (int j=0; j<= ReturnHomeTimes[i+1]; j++
      +                          ){
  4124   0104C2  0E00               	movlw	0
  4125   0104C4  0100               	movlb	0	; () banked
  4126   0104C6  6F95               	movwf	(motor_response@j+1)& (0+255),b
  4127   0104C8  0E00               	movlw	0
  4128   0104CA  6F94               	movwf	motor_response@j& (0+255),b
  4129   0104CC  EF78  F082         	goto	l4659
  4130   0104D0                     l4655:
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;colour_identify.c: 226:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  4134   0104D0  0E09               	movlw	9
  4135   0104D2  0100               	movlb	0	; () banked
  4136   0104D4  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4137   0104D6  0E1E               	movlw	30
  4138   0104D8  6F8E               	movwf	??_motor_response& (0+255),b
  4139   0104DA  0EE4               	movlw	228
  4140   0104DC                     u2917:
  4141   0104DC  2EE8               	decfsz	wreg,f,c
  4142   0104DE  D7FE               	bra	u2917
  4143   0104E0  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4144   0104E2  D7FC               	bra	u2917
  4145   0104E4  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4146   0104E6  D7FA               	bra	u2917
  4147   0104E8  F000               	nop	
  4148   0104EA                     
  4149                           ;colour_identify.c: 227:                     }
  4150   0104EA  0100               	movlb	0	; () banked
  4151   0104EC  4B94               	infsnz	motor_response@j& (0+255),f,b
  4152   0104EE  2B95               	incf	(motor_response@j+1)& (0+255),f,b
  4153   0104F0                     l4659:
  4154                           
  4155                           ; BSR set to: 0
  4156   0104F0  C09A  F08E         	movff	motor_response@i,??_motor_response
  4157   0104F4  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4158   0104F8  90D8               	bcf	status,0,c
  4159   0104FA  378E               	rlcf	??_motor_response& (0+255),f,b
  4160   0104FC  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4161   0104FE  518E               	movf	??_motor_response& (0+255),w,b
  4162   010500  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4163   010502  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4164   010504  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4165   010506  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4166   010508  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4167   01050A  0E02               	movlw	2
  4168   01050C  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4169   01050E  6ED9               	movwf	fsr2l,c
  4170   010510  0E00               	movlw	0
  4171   010512  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4172   010514  6EDA               	movwf	fsr2h,c
  4173   010516  5194               	movf	motor_response@j& (0+255),w,b
  4174   010518  5CDE               	subwf	postinc2,w,c
  4175   01051A  5195               	movf	(motor_response@j+1)& (0+255),w,b
  4176   01051C  58DE               	subwfb	postinc2,w,c
  4177   01051E  B0D8               	btfsc	status,0,c
  4178   010520  EF94  F082         	goto	u2511
  4179   010524  EF96  F082         	goto	u2510
  4180   010528                     u2511:
  4181   010528  EF68  F082         	goto	l4655
  4182   01052C                     u2510:
  4183   01052C                     
  4184                           ; BSR set to: 0
  4185                           ;colour_identify.c: 228:                     stop(mL,mR);
  4186   01052C  C084  F017         	movff	motor_response@mL,stop@mL
  4187   010530  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4188   010534  C086  F019         	movff	motor_response@mR,stop@mR
  4189   010538  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4190   01053C  EC13  F094         	call	_stop	;wreg free
  4191   010540                     
  4192                           ;colour_identify.c: 229:                     sprintf(buf, "Card gonna respond to %d \n",
      +                           ReturnHomeCards[i]);
  4193   010540  C081  F066         	movff	motor_response@buf,sprintf@s
  4194   010544  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4195   010548  0E67               	movlw	low STR_9
  4196   01054A  0100               	movlb	0	; () banked
  4197   01054C  6F68               	movwf	sprintf@fmt& (0+255),b
  4198   01054E  0EFF               	movlw	high STR_9
  4199   010550  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4200   010552  519A               	movf	motor_response@i& (0+255),w,b
  4201   010554  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4202   010556  6ED9               	movwf	fsr2l,c
  4203   010558  519B               	movf	(motor_response@i+1)& (0+255),w,b
  4204   01055A  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4205   01055C  6EDA               	movwf	fsr2h,c
  4206   01055E  50DF               	movf	indf2,w,c
  4207   010560  6F8E               	movwf	??_motor_response& (0+255),b
  4208   010562  518E               	movf	??_motor_response& (0+255),w,b
  4209   010564  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  4210   010566  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  4211   010568  EC6B  F094         	call	_sprintf	;wreg free
  4212   01056C                     
  4213                           ;colour_identify.c: 230:                     sendStringSerial4(buf);
  4214   01056C  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4215   010570  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4216   010574  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4217   010578                     
  4218                           ;colour_identify.c: 231:                     home_response(ReturnHomeCards[i], mL, mR);
  4219   010578  C084  F01F         	movff	motor_response@mL,home_response@mL
  4220   01057C  C085  F020         	movff	motor_response@mL+1,home_response@mL+1
  4221   010580  C086  F021         	movff	motor_response@mR,home_response@mR
  4222   010584  C087  F022         	movff	motor_response@mR+1,home_response@mR+1
  4223   010588  0100               	movlb	0	; () banked
  4224   01058A  519A               	movf	motor_response@i& (0+255),w,b
  4225   01058C  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4226   01058E  6ED9               	movwf	fsr2l,c
  4227   010590  519B               	movf	(motor_response@i+1)& (0+255),w,b
  4228   010592  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4229   010594  6EDA               	movwf	fsr2h,c
  4230   010596  50DF               	movf	indf2,w,c
  4231   010598  EC5B  F086         	call	_home_response
  4232   01059C                     l4669:
  4233                           
  4234                           ;colour_identify.c: 233:             }
  4235   01059C  0100               	movlb	0	; () banked
  4236   01059E  079A               	decf	motor_response@i& (0+255),f,b
  4237   0105A0  A0D8               	btfss	status,0,c
  4238   0105A2  079B               	decf	(motor_response@i+1)& (0+255),f,b
  4239   0105A4  EF0A  F082         	goto	l4641
  4240   0105A8                     l4673:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;colour_identify.c: 234:             sprintf(buf, "Time gonna move for %d \n", ReturnHom
      +                          eTimes[0]);
  4244   0105A8  C081  F066         	movff	motor_response@buf,sprintf@s
  4245   0105AC  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4246   0105B0  0EB5               	movlw	low STR_8
  4247   0105B2  6F68               	movwf	sprintf@fmt& (0+255),b
  4248   0105B4  0EFF               	movlw	high STR_8
  4249   0105B6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4250   0105B8  C088  FFD9         	movff	motor_response@ReturnHomeTimes,fsr2l
  4251   0105BC  C089  FFDA         	movff	motor_response@ReturnHomeTimes+1,fsr2h
  4252   0105C0  CFDE F06A          	movff	postinc2,?_sprintf+4
  4253   0105C4  CFDD F06B          	movff	postdec2,?_sprintf+5
  4254   0105C8  EC6B  F094         	call	_sprintf	;wreg free
  4255   0105CC                     
  4256                           ;colour_identify.c: 235:             sendStringSerial4(buf);
  4257   0105CC  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4258   0105D0  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4259   0105D4  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4260   0105D8                     
  4261                           ;colour_identify.c: 236:             fullSpeedAhead(mL,mR);
  4262   0105D8  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4263   0105DC  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4264   0105E0  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4265   0105E4  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4266   0105E8  EC53  F092         	call	_fullSpeedAhead	;wreg free
  4267   0105EC                     
  4268                           ;colour_identify.c: 237:             for (int j=0; j<= ReturnHomeTimes[0]; j++){
  4269   0105EC  0E00               	movlw	0
  4270   0105EE  0100               	movlb	0	; () banked
  4271   0105F0  6F97               	movwf	(motor_response@j_1718+1)& (0+255),b
  4272   0105F2  0E00               	movlw	0
  4273   0105F4  6F96               	movwf	motor_response@j_1718& (0+255),b
  4274   0105F6  EF0D  F083         	goto	l4685
  4275   0105FA                     l4681:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;colour_identify.c: 238:                 _delay((unsigned long)((100)*(64000000/4000.0))
      +                          );}
  4279   0105FA  0E09               	movlw	9
  4280   0105FC  0100               	movlb	0	; () banked
  4281   0105FE  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4282   010600  0E1E               	movlw	30
  4283   010602  6F8E               	movwf	??_motor_response& (0+255),b
  4284   010604  0EE4               	movlw	228
  4285   010606                     u2927:
  4286   010606  2EE8               	decfsz	wreg,f,c
  4287   010608  D7FE               	bra	u2927
  4288   01060A  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4289   01060C  D7FC               	bra	u2927
  4290   01060E  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4291   010610  D7FA               	bra	u2927
  4292   010612  F000               	nop	
  4293   010614  0100               	movlb	0	; () banked
  4294   010616  4B96               	infsnz	motor_response@j_1718& (0+255),f,b
  4295   010618  2B97               	incf	(motor_response@j_1718+1)& (0+255),f,b
  4296   01061A                     l4685:
  4297                           
  4298                           ; BSR set to: 0
  4299   01061A  C088  FFD9         	movff	motor_response@ReturnHomeTimes,fsr2l
  4300   01061E  C089  FFDA         	movff	motor_response@ReturnHomeTimes+1,fsr2h
  4301   010622  5196               	movf	motor_response@j_1718& (0+255),w,b
  4302   010624  5CDE               	subwf	postinc2,w,c
  4303   010626  5197               	movf	(motor_response@j_1718+1)& (0+255),w,b
  4304   010628  58DE               	subwfb	postinc2,w,c
  4305   01062A  B0D8               	btfsc	status,0,c
  4306   01062C  EF1A  F083         	goto	u2521
  4307   010630  EF1C  F083         	goto	u2520
  4308   010634                     u2521:
  4309   010634  EFFD  F082         	goto	l4681
  4310   010638                     u2520:
  4311   010638                     
  4312                           ; BSR set to: 0
  4313                           ;colour_identify.c: 239:             stop(mL,mR);
  4314   010638  C084  F017         	movff	motor_response@mL,stop@mL
  4315   01063C  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4316   010640  C086  F019         	movff	motor_response@mR,stop@mR
  4317   010644  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4318   010648  EC13  F094         	call	_stop	;wreg free
  4319   01064C                     
  4320                           ;colour_identify.c: 240:             *stop_all = 1;
  4321   01064C  C08C  FFD9         	movff	motor_response@stop_all,fsr2l
  4322   010650  C08D  FFDA         	movff	motor_response@stop_all+1,fsr2h
  4323   010654  0E01               	movlw	1
  4324   010656  6EDE               	movwf	postinc2,c
  4325   010658  0E00               	movlw	0
  4326   01065A  6EDD               	movwf	postdec2,c
  4327                           
  4328                           ;colour_identify.c: 241:             break;
  4329   01065C  EF82  F083         	goto	l391
  4330   010660                     l389:
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;colour_identify.c: 244:             LATHbits.LATH3=1;
  4334   010660  8680               	bsf	128,3,c	;volatile
  4335   010662                     
  4336                           ; BSR set to: 0
  4337                           ;colour_identify.c: 245:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4338   010662  0E11               	movlw	17
  4339   010664  0100               	movlb	0	; () banked
  4340   010666  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4341   010668  0E3C               	movlw	60
  4342   01066A  6F8E               	movwf	??_motor_response& (0+255),b
  4343   01066C  0ECB               	movlw	203
  4344   01066E                     u2937:
  4345   01066E  2EE8               	decfsz	wreg,f,c
  4346   010670  D7FE               	bra	u2937
  4347   010672  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4348   010674  D7FC               	bra	u2937
  4349   010676  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4350   010678  D7FA               	bra	u2937
  4351   01067A                     
  4352                           ;colour_identify.c: 246:             LATHbits.LATH3=0;
  4353   01067A  9680               	bcf	128,3,c	;volatile
  4354                           
  4355                           ;colour_identify.c: 247:             break;
  4356   01067C  EF82  F083         	goto	l391
  4357   010680                     l390:
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;colour_identify.c: 249:             LATHbits.LATH1 = 1;
  4361   010680  8280               	bsf	128,1,c	;volatile
  4362   010682                     
  4363                           ; BSR set to: 0
  4364                           ;colour_identify.c: 250:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4365   010682  0E29               	movlw	41
  4366   010684  0100               	movlb	0	; () banked
  4367   010686  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4368   010688  0E96               	movlw	150
  4369   01068A  6F8E               	movwf	??_motor_response& (0+255),b
  4370   01068C  0E7F               	movlw	127
  4371   01068E                     u2947:
  4372   01068E  2EE8               	decfsz	wreg,f,c
  4373   010690  D7FE               	bra	u2947
  4374   010692  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4375   010694  D7FC               	bra	u2947
  4376   010696  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4377   010698  D7FA               	bra	u2947
  4378   01069A                     
  4379                           ;colour_identify.c: 251:             LATHbits.LATH1 = 0;
  4380   01069A  9280               	bcf	128,1,c	;volatile
  4381                           
  4382                           ;colour_identify.c: 252:             break;
  4383   01069C  EF82  F083         	goto	l391
  4384   0106A0                     l4701:
  4385   0106A0  0100               	movlb	0	; () banked
  4386   0106A2  5183               	movf	motor_response@card& (0+255),w,b
  4387   0106A4  6F8E               	movwf	??_motor_response& (0+255),b
  4388   0106A6  6B8F               	clrf	(??_motor_response+1)& (0+255),b
  4389                           
  4390                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4391                           ; Switch size 1, requested type "simple"
  4392                           ; Number of cases is 1, Range of values is 0 to 0
  4393                           ; switch strategies available:
  4394                           ; Name         Instructions Cycles
  4395                           ; simple_byte            4     3 (average)
  4396                           ;	Chosen strategy is simple_byte
  4397   0106A8  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4398   0106AA  0A00               	xorlw	0	; case 0
  4399   0106AC  B4D8               	btfsc	status,2,c
  4400   0106AE  EF5B  F083         	goto	l5065
  4401   0106B2  EF40  F083         	goto	l390
  4402   0106B6                     l5065:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ; Switch size 1, requested type "simple"
  4406                           ; Number of cases is 9, Range of values is 0 to 8
  4407                           ; switch strategies available:
  4408                           ; Name         Instructions Cycles
  4409                           ; simple_byte           28    15 (average)
  4410                           ;	Chosen strategy is simple_byte
  4411   0106B6  518E               	movf	??_motor_response& (0+255),w,b
  4412   0106B8  0A00               	xorlw	0	; case 0
  4413   0106BA  B4D8               	btfsc	status,2,c
  4414   0106BC  EF02  F080         	goto	l4497
  4415   0106C0  0A01               	xorlw	1	; case 1
  4416   0106C2  B4D8               	btfsc	status,2,c
  4417   0106C4  EF43  F080         	goto	l4509
  4418   0106C8  0A03               	xorlw	3	; case 2
  4419   0106CA  B4D8               	btfsc	status,2,c
  4420   0106CC  EF7A  F080         	goto	l4521
  4421   0106D0  0A01               	xorlw	1	; case 3
  4422   0106D2  B4D8               	btfsc	status,2,c
  4423   0106D4  EFBB  F080         	goto	l4541
  4424   0106D8  0A07               	xorlw	7	; case 4
  4425   0106DA  B4D8               	btfsc	status,2,c
  4426   0106DC  EFD3  F080         	goto	l4555
  4427   0106E0  0A01               	xorlw	1	; case 5
  4428   0106E2  B4D8               	btfsc	status,2,c
  4429   0106E4  EFF5  F080         	goto	l4569
  4430   0106E8  0A03               	xorlw	3	; case 6
  4431   0106EA  B4D8               	btfsc	status,2,c
  4432   0106EC  EF0E  F081         	goto	l4585
  4433   0106F0  0A01               	xorlw	1	; case 7
  4434   0106F2  B4D8               	btfsc	status,2,c
  4435   0106F4  EF31  F081         	goto	l4601
  4436   0106F8  0A0F               	xorlw	15	; case 8
  4437   0106FA  B4D8               	btfsc	status,2,c
  4438   0106FC  EF30  F083         	goto	l389
  4439   010700  EF40  F083         	goto	l390
  4440   010704                     l391:
  4441   010704  0012               	return		;funcret
  4442   010706                     __end_of_motor_response:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function _sprintf *****************
  4446 ;; Defined at:
  4447 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  s               2    6[BANK0 ] PTR unsigned char 
  4450 ;;		 -> main@buf(150), 
  4451 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  4452 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4453 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4454 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  f              11   22[BANK0 ] struct _IO_FILE
  4457 ;;  ap              2   20[BANK0 ] PTR void [1]
  4458 ;;		 -> ?_sprintf(2), 
  4459 ;;  ret             2    0        int 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  2    6[BANK0 ] int 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4469 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4472 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4473 ;;Total ram usage:       27 bytes
  4474 ;; Hardware stack levels used: 1
  4475 ;; Hardware stack levels required when called: 8
  4476 ;; This function calls:
  4477 ;;		_vfprintf
  4478 ;; This function is called by:
  4479 ;;		_main
  4480 ;;		_clear_read_calibration
  4481 ;;		_motor_response
  4482 ;;		_card_response
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text10
  4487   0128D6                     __ptext10:
  4488                           	callstack 0
  4489   0128D6                     _sprintf:
  4490                           	callstack 22
  4491   0128D6  0E6A               	movlw	low (?_sprintf+4)
  4492   0128D8  0100               	movlb	0	; () banked
  4493   0128DA  6F74               	movwf	sprintf@ap& (0+255),b
  4494   0128DC  0E00               	movlw	high (?_sprintf+4)
  4495   0128DE  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4496   0128E0  C066  F076         	movff	sprintf@s,sprintf@f
  4497   0128E4  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  4498   0128E8                     
  4499                           ; BSR set to: 0
  4500   0128E8  0E00               	movlw	0
  4501   0128EA  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  4502   0128EC  0E00               	movlw	0
  4503   0128EE  6F79               	movwf	(sprintf@f+3)& (0+255),b
  4504   0128F0                     
  4505                           ; BSR set to: 0
  4506   0128F0  0E00               	movlw	0
  4507   0128F2  6F80               	movwf	(sprintf@f+10)& (0+255),b
  4508   0128F4  0E00               	movlw	0
  4509   0128F6  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  4510   0128F8                     
  4511                           ; BSR set to: 0
  4512   0128F8  0E76               	movlw	low sprintf@f
  4513   0128FA  6F60               	movwf	vfprintf@fp& (0+255),b
  4514   0128FC  0E00               	movlw	high sprintf@f
  4515   0128FE  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  4516   012900  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  4517   012904  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4518   012908  0E74               	movlw	low sprintf@ap
  4519   01290A  6F64               	movwf	vfprintf@ap& (0+255),b
  4520   01290C  0E00               	movlw	high sprintf@ap
  4521   01290E  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  4522   012910  EC41  F094         	call	_vfprintf	;wreg free
  4523   012914  0100               	movlb	0	; () banked
  4524   012916  5179               	movf	(sprintf@f+3)& (0+255),w,b
  4525   012918  2566               	addwf	sprintf@s& (0+255),w,b
  4526   01291A  6ED9               	movwf	fsr2l,c
  4527   01291C  517A               	movf	(sprintf@f+4)& (0+255),w,b
  4528   01291E  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  4529   012920  6EDA               	movwf	fsr2h,c
  4530   012922  0E00               	movlw	0
  4531   012924  6EDF               	movwf	indf2,c
  4532   012926                     
  4533                           ; BSR set to: 0
  4534   012926  0012               	return		;funcret
  4535   012928                     __end_of_sprintf:
  4536                           	callstack 0
  4537                           
  4538 ;; *************** function _vfprintf *****************
  4539 ;; Defined at:
  4540 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4543 ;;		 -> sprintf@f(11), 
  4544 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4545 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4546 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4547 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4548 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4549 ;;		 -> sprintf@ap(2), 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  4552 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4553 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4554 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  2    0[BANK0 ] int 
  4557 ;; Registers used:
  4558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4564 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4567 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4568 ;;Total ram usage:        8 bytes
  4569 ;; Hardware stack levels used: 1
  4570 ;; Hardware stack levels required when called: 7
  4571 ;; This function calls:
  4572 ;;		_vfpfcnvrt
  4573 ;; This function is called by:
  4574 ;;		_sprintf
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text11
  4579   012882                     __ptext11:
  4580                           	callstack 0
  4581   012882                     _vfprintf:
  4582                           	callstack 22
  4583   012882                     
  4584                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4585   012882  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  4586   012886  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4587                           
  4588                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4589   01288A  EF55  F094         	goto	l4215
  4590   01288E                     l4213:
  4591                           
  4592                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4593   01288E  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  4594   012892  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4595   012896  0E54               	movlw	low vfprintf@cfmt
  4596   012898  6E44               	movwf	vfpfcnvrt@fmt^0,c
  4597   01289A  0E00               	movlw	high vfprintf@cfmt
  4598   01289C  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4599   01289E  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  4600   0128A2  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4601   0128A6  EC7E  F08F         	call	_vfpfcnvrt	;wreg free
  4602   0128AA                     l4215:
  4603                           
  4604                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4605   0128AA  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  4606   0128AE  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4607   0128B2                     	if	0	;tblptru may be non-zero
  4608   0128B2                     	endif
  4609   0128B2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4610   0128B2  0E00               	movlw	low (__mediumconst shr (0+16))
  4611   0128B4  6EF8               	movwf	tblptru,c
  4612   0128B6                     	endif
  4613   0128B6  0008               	tblrd		*
  4614   0128B8  50F5               	movf	tablat,w,c
  4615   0128BA  0900               	iorlw	0
  4616   0128BC  A4D8               	btfss	status,2,c
  4617   0128BE  EF63  F094         	goto	u2351
  4618   0128C2  EF65  F094         	goto	u2350
  4619   0128C6                     u2351:
  4620   0128C6  EF47  F094         	goto	l4213
  4621   0128CA                     u2350:
  4622   0128CA                     
  4623                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4624   0128CA  0E00               	movlw	0
  4625   0128CC  0100               	movlb	0	; () banked
  4626   0128CE  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  4627   0128D0  0E00               	movlw	0
  4628   0128D2  6F60               	movwf	?_vfprintf& (0+255),b
  4629   0128D4                     
  4630                           ; BSR set to: 0
  4631   0128D4  0012               	return		;funcret
  4632   0128D6                     __end_of_vfprintf:
  4633                           	callstack 0
  4634                           
  4635 ;; *************** function _vfpfcnvrt *****************
  4636 ;; Defined at:
  4637 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  4640 ;;		 -> sprintf@f(11), 
  4641 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  4642 ;;		 -> vfprintf@cfmt(2), 
  4643 ;;  ap              2   69[COMRAM] PTR PTR void 
  4644 ;;		 -> sprintf@ap(2), 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  convarg         8   73[COMRAM] struct .
  4647 ;;  cp              2   81[COMRAM] PTR unsigned char 
  4648 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4649 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4650 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4651 ;;  i               2    0        int 
  4652 ;;  done            2    0        int 
  4653 ;;  c               1    0        unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4663 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4664 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4665 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4666 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4667 ;;Total ram usage:       18 bytes
  4668 ;; Hardware stack levels used: 1
  4669 ;; Hardware stack levels required when called: 6
  4670 ;; This function calls:
  4671 ;;		_dtoa
  4672 ;;		_fputc
  4673 ;; This function is called by:
  4674 ;;		_vfprintf
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text12
  4679   011EFC                     __ptext12:
  4680                           	callstack 0
  4681   011EFC                     _vfpfcnvrt:
  4682                           	callstack 22
  4683   011EFC                     
  4684                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4685   011EFC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4686   011F00  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4687   011F04  CFDE FFF6          	movff	postinc2,tblptrl
  4688   011F08  CFDD FFF7          	movff	postdec2,tblptrh
  4689   011F0C                     	if	0	;tblptru may be non-zero
  4690   011F0C                     	endif
  4691   011F0C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4692   011F0C  0E00               	movlw	low (__mediumconst shr (0+16))
  4693   011F0E  6EF8               	movwf	tblptru,c
  4694   011F10                     	endif
  4695   011F10  0008               	tblrd		*
  4696   011F12  50F5               	movf	tablat,w,c
  4697   011F14  0A25               	xorlw	37
  4698   011F16  A4D8               	btfss	status,2,c
  4699   011F18  EF90  F08F         	goto	u2251
  4700   011F1C  EF92  F08F         	goto	u2250
  4701   011F20                     u2251:
  4702   011F20  EF16  F090         	goto	l4093
  4703   011F24                     u2250:
  4704   011F24                     
  4705                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4706   011F24  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4707   011F28  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4708   011F2C  2ADE               	incf	postinc2,f,c
  4709   011F2E  0E00               	movlw	0
  4710   011F30  22DD               	addwfc	postdec2,f,c
  4711   011F32                     
  4712                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4713   011F32  0E00               	movlw	0
  4714   011F34  0100               	movlb	0	; () banked
  4715   011F36  6FD4               	movwf	(_width+1)& (0+255),b
  4716   011F38  0E00               	movlw	0
  4717   011F3A  6FD3               	movwf	_width& (0+255),b
  4718   011F3C  C0D3  F0DD         	movff	_width,_flags
  4719   011F40                     
  4720                           ; BSR set to: 0
  4721                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4722   011F40  69D5               	setf	_prec& (0+255),b
  4723   011F42  69D6               	setf	(_prec+1)& (0+255),b
  4724   011F44                     
  4725                           ; BSR set to: 0
  4726                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4727   011F44  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4728   011F48  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4729   011F4C  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  4730   011F50  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  4731   011F54                     
  4732                           ; BSR set to: 0
  4733                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4734   011F54  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4735   011F58  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4736   011F5C                     	if	0	;tblptru may be non-zero
  4737   011F5C                     	endif
  4738   011F5C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4739   011F5C  0E00               	movlw	low (__mediumconst shr (0+16))
  4740   011F5E  6EF8               	movwf	tblptru,c
  4741   011F60                     	endif
  4742   011F60  0008               	tblrd		*
  4743   011F62  50F5               	movf	tablat,w,c
  4744   011F64  0A64               	xorlw	100
  4745   011F66  B4D8               	btfsc	status,2,c
  4746   011F68  EFB8  F08F         	goto	u2261
  4747   011F6C  EFBA  F08F         	goto	u2260
  4748   011F70                     u2261:
  4749   011F70  EFCA  F08F         	goto	l4083
  4750   011F74                     u2260:
  4751   011F74                     
  4752                           ; BSR set to: 0
  4753   011F74  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4754   011F78  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4755   011F7C                     	if	0	;tblptru may be non-zero
  4756   011F7C                     	endif
  4757   011F7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4758   011F7C  0E00               	movlw	low (__mediumconst shr (0+16))
  4759   011F7E  6EF8               	movwf	tblptru,c
  4760   011F80                     	endif
  4761   011F80  0008               	tblrd		*
  4762   011F82  50F5               	movf	tablat,w,c
  4763   011F84  0A69               	xorlw	105
  4764   011F86  A4D8               	btfss	status,2,c
  4765   011F88  EFC8  F08F         	goto	u2271
  4766   011F8C  EFCA  F08F         	goto	u2270
  4767   011F90                     u2271:
  4768   011F90  EF0D  F090         	goto	l4089
  4769   011F94                     u2270:
  4770   011F94                     l4083:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4774   011F94  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4775   011F98  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4776   011F9C  CFDF F048          	movff	indf2,??_vfpfcnvrt
  4777   011FA0  0E02               	movlw	2
  4778   011FA2  26DE               	addwf	postinc2,f,c
  4779   011FA4  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  4780   011FA8  0E00               	movlw	0
  4781   011FAA  22DD               	addwfc	postdec2,f,c
  4782   011FAC  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4783   011FB0  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4784   011FB4  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  4785   011FB8  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  4786   011FBC  0E00               	movlw	0
  4787   011FBE  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4788   011FC0  0EFF               	movlw	-1
  4789   011FC2  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  4790   011FC4  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  4791   011FC6  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  4792   011FC8  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  4793   011FCA  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  4794   011FCC  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  4795                           
  4796                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4797   011FCE  0E01               	movlw	1
  4798   011FD0  2452               	addwf	vfpfcnvrt@cp^0,w,c
  4799   011FD2  6E48               	movwf	??_vfpfcnvrt^0,c
  4800   011FD4  0E00               	movlw	0
  4801   011FD6  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4802   011FD8  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  4803   011FDA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4804   011FDE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4805   011FE2  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  4806   011FE6  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4807   011FEA                     
  4808                           ; BSR set to: 0
  4809                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4810   011FEA  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  4811   011FEE  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4812   011FF2  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  4813   011FF6  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4814   011FFA  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4815   011FFE  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4816   012002  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4817   012006  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4818   01200A  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4819   01200E  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4820   012012  EC1E  F08A         	call	_dtoa	;wreg free
  4821   012016  EF2C  F090         	goto	l1270
  4822   01201A                     l4089:
  4823                           
  4824                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4825   01201A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4826   01201E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4827   012022  2ADE               	incf	postinc2,f,c
  4828   012024  0E00               	movlw	0
  4829   012026  22DD               	addwfc	postdec2,f,c
  4830   012028  EF2C  F090         	goto	l1270
  4831   01202C                     l4093:
  4832                           
  4833                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4834   01202C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4835   012030  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4836   012034  CFDE FFF6          	movff	postinc2,tblptrl
  4837   012038  CFDD FFF7          	movff	postdec2,tblptrh
  4838   01203C                     	if	0	;tblptru may be non-zero
  4839   01203C                     	endif
  4840   01203C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4841   01203C  0E00               	movlw	low (__mediumconst shr (0+16))
  4842   01203E  6EF8               	movwf	tblptru,c
  4843   012040                     	endif
  4844   012040  0008               	tblrd		*
  4845   012042  50F5               	movf	tablat,w,c
  4846   012044  6E04               	movwf	fputc@c^0,c
  4847   012046  6A05               	clrf	(fputc@c+1)^0,c
  4848   012048  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  4849   01204C  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4850   012050  EC40  F091         	call	_fputc	;wreg free
  4851   012054  EF0D  F090         	goto	l4089
  4852   012058                     l1270:
  4853   012058  0012               	return		;funcret
  4854   01205A                     __end_of_vfpfcnvrt:
  4855                           	callstack 0
  4856                           
  4857 ;; *************** function _dtoa *****************
  4858 ;; Defined at:
  4859 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  4862 ;;		 -> sprintf@f(11), 
  4863 ;;  d               8   32[COMRAM] long long 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  n               8   54[COMRAM] long long 
  4866 ;;  i               2   63[COMRAM] int 
  4867 ;;  w               2   52[COMRAM] int 
  4868 ;;  p               2   50[COMRAM] int 
  4869 ;;  s               1   62[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4879 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4880 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4881 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4882 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4883 ;;Total ram usage:       35 bytes
  4884 ;; Hardware stack levels used: 1
  4885 ;; Hardware stack levels required when called: 5
  4886 ;; This function calls:
  4887 ;;		___aodiv
  4888 ;;		___aomod
  4889 ;;		_abs
  4890 ;;		_pad
  4891 ;; This function is called by:
  4892 ;;		_vfpfcnvrt
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text13
  4897   01143C                     __ptext13:
  4898                           	callstack 0
  4899   01143C                     _dtoa:
  4900                           	callstack 22
  4901   01143C                     
  4902                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4903   01143C  C021  F037         	movff	dtoa@d,dtoa@n
  4904   011440  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  4905   011444  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  4906   011448  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  4907   01144C  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  4908   011450  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  4909   011454  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  4910   011458  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  4911   01145C                     
  4912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4913   01145C  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  4914   01145E  EF33  F08A         	goto	u2111
  4915   011462  EF36  F08A         	goto	u2110
  4916   011466                     u2111:
  4917   011466  0E01               	movlw	1
  4918   011468  EF37  F08A         	goto	u2120
  4919   01146C                     u2110:
  4920   01146C  0E00               	movlw	0
  4921   01146E                     u2120:
  4922   01146E  6E3F               	movwf	dtoa@s^0,c
  4923   011470                     
  4924                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4925   011470  503F               	movf	dtoa@s^0,w,c
  4926   011472  B4D8               	btfsc	status,2,c
  4927   011474  EF3E  F08A         	goto	u2131
  4928   011478  EF40  F08A         	goto	u2130
  4929   01147C                     u2131:
  4930   01147C  EF50  F08A         	goto	l4005
  4931   011480                     u2130:
  4932   011480                     
  4933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4934   011480  1E3E               	comf	(dtoa@n+7)^0,f,c
  4935   011482  1E3D               	comf	(dtoa@n+6)^0,f,c
  4936   011484  1E3C               	comf	(dtoa@n+5)^0,f,c
  4937   011486  1E3B               	comf	(dtoa@n+4)^0,f,c
  4938   011488  1E3A               	comf	(dtoa@n+3)^0,f,c
  4939   01148A  1E39               	comf	(dtoa@n+2)^0,f,c
  4940   01148C  1E38               	comf	(dtoa@n+1)^0,f,c
  4941   01148E  6C37               	negf	dtoa@n^0,c
  4942   011490  0E00               	movlw	0
  4943   011492  2238               	addwfc	(dtoa@n+1)^0,f,c
  4944   011494  2239               	addwfc	(dtoa@n+2)^0,f,c
  4945   011496  223A               	addwfc	(dtoa@n+3)^0,f,c
  4946   011498  223B               	addwfc	(dtoa@n+4)^0,f,c
  4947   01149A  223C               	addwfc	(dtoa@n+5)^0,f,c
  4948   01149C  223D               	addwfc	(dtoa@n+6)^0,f,c
  4949   01149E  223E               	addwfc	(dtoa@n+7)^0,f,c
  4950   0114A0                     l4005:
  4951                           
  4952                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4953   0114A0  0100               	movlb	0	; () banked
  4954   0114A2  BFD6               	btfsc	(_prec+1)& (0+255),7,b
  4955   0114A4  EF5E  F08A         	goto	u2140
  4956   0114A8  51D6               	movf	(_prec+1)& (0+255),w,b
  4957   0114AA  E106               	bnz	u2141
  4958   0114AC  05D5               	decf	_prec& (0+255),w,b
  4959   0114AE  B0D8               	btfsc	status,0,c
  4960   0114B0  EF5C  F08A         	goto	u2141
  4961   0114B4  EF5E  F08A         	goto	u2140
  4962   0114B8                     u2141:
  4963   0114B8  EF64  F08A         	goto	l1249
  4964   0114BC                     u2140:
  4965   0114BC                     
  4966                           ; BSR set to: 0
  4967   0114BC  0E00               	movlw	0
  4968   0114BE  6E34               	movwf	(dtoa@p+1)^0,c
  4969   0114C0  0E01               	movlw	1
  4970   0114C2  6E33               	movwf	dtoa@p^0,c
  4971   0114C4  EF68  F08A         	goto	l1251
  4972   0114C8                     l1249:
  4973                           
  4974                           ; BSR set to: 0
  4975   0114C8  C0D5  F033         	movff	_prec,dtoa@p
  4976   0114CC  C0D6  F034         	movff	_prec+1,dtoa@p+1
  4977   0114D0                     l1251:
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4981   0114D0  C0D3  F035         	movff	_width,dtoa@w
  4982   0114D4  C0D4  F036         	movff	_width+1,dtoa@w+1
  4983   0114D8                     
  4984                           ; BSR set to: 0
  4985                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4986   0114D8  503F               	movf	dtoa@s^0,w,c
  4987   0114DA  B4D8               	btfsc	status,2,c
  4988   0114DC  EF72  F08A         	goto	u2151
  4989   0114E0  EF74  F08A         	goto	u2150
  4990   0114E4                     u2151:
  4991   0114E4  EF8B  F08A         	goto	l1252
  4992   0114E8                     u2150:
  4993   0114E8                     
  4994                           ; BSR set to: 0
  4995                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4996   0114E8  0635               	decf	dtoa@w^0,f,c
  4997   0114EA  A0D8               	btfss	status,0,c
  4998   0114EC  0636               	decf	(dtoa@w+1)^0,f,c
  4999   0114EE                     
  5000                           ; BSR set to: 0
  5001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  5002   0114EE  503F               	movf	dtoa@s^0,w,c
  5003   0114F0  A4D8               	btfss	status,2,c
  5004   0114F2  EF7D  F08A         	goto	u2161
  5005   0114F6  EF7F  F08A         	goto	u2160
  5006   0114FA                     u2161:
  5007   0114FA  EF85  F08A         	goto	l4017
  5008   0114FE                     u2160:
  5009   0114FE                     
  5010                           ; BSR set to: 0
  5011   0114FE  0E00               	movlw	0
  5012   011500  6E32               	movwf	(_dtoa$2598+1)^0,c
  5013   011502  0E2B               	movlw	43
  5014   011504  6E31               	movwf	_dtoa$2598^0,c
  5015   011506  EF89  F08A         	goto	l4019
  5016   01150A                     l4017:
  5017                           
  5018                           ; BSR set to: 0
  5019   01150A  0E00               	movlw	0
  5020   01150C  6E32               	movwf	(_dtoa$2598+1)^0,c
  5021   01150E  0E2D               	movlw	45
  5022   011510  6E31               	movwf	_dtoa$2598^0,c
  5023   011512                     l4019:
  5024                           
  5025                           ; BSR set to: 0
  5026   011512  C031  F03F         	movff	_dtoa$2598,dtoa@s
  5027   011516                     l1252:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  5031   011516  0E00               	movlw	0
  5032   011518  6E41               	movwf	(dtoa@i+1)^0,c
  5033   01151A  0E1F               	movlw	31
  5034   01151C  6E40               	movwf	dtoa@i^0,c
  5035   01151E                     
  5036                           ; BSR set to: 0
  5037                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  5038   01151E  0E00               	movlw	0
  5039   011520  6FFE               	movwf	(_dbuf+31)& (0+255),b
  5040                           
  5041                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5042   011522  EF0F  F08B         	goto	l4033
  5043   011526                     l4023:
  5044                           
  5045                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  5046   011526  0640               	decf	dtoa@i^0,f,c
  5047   011528  A0D8               	btfss	status,0,c
  5048   01152A  0641               	decf	(dtoa@i+1)^0,f,c
  5049   01152C                     
  5050                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  5051   01152C  0EDF               	movlw	low _dbuf
  5052   01152E  2440               	addwf	dtoa@i^0,w,c
  5053   011530  6ED9               	movwf	fsr2l,c
  5054   011532  0E00               	movlw	high _dbuf
  5055   011534  2041               	addwfc	(dtoa@i+1)^0,w,c
  5056   011536  6EDA               	movwf	fsr2h,c
  5057   011538  C037  F004         	movff	dtoa@n,___aomod@dividend
  5058   01153C  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  5059   011540  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  5060   011544  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  5061   011548  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  5062   01154C  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  5063   011550  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  5064   011554  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  5065   011558  0E0A               	movlw	10
  5066   01155A  6E0C               	movwf	___aomod@divisor^0,c
  5067   01155C  0E00               	movlw	0
  5068   01155E  6E0D               	movwf	(___aomod@divisor+1)^0,c
  5069   011560  0E00               	movlw	0
  5070   011562  6E0E               	movwf	(___aomod@divisor+2)^0,c
  5071   011564  0E00               	movlw	0
  5072   011566  6E0F               	movwf	(___aomod@divisor+3)^0,c
  5073   011568  0E00               	movlw	0
  5074   01156A  6E10               	movwf	(___aomod@divisor+4)^0,c
  5075   01156C  0E00               	movlw	0
  5076   01156E  6E11               	movwf	(___aomod@divisor+5)^0,c
  5077   011570  0E00               	movlw	0
  5078   011572  6E12               	movwf	(___aomod@divisor+6)^0,c
  5079   011574  0E00               	movlw	0
  5080   011576  6E13               	movwf	(___aomod@divisor+7)^0,c
  5081   011578  ECCC  F08E         	call	___aomod	;wreg free
  5082   01157C  C004  F029         	movff	?___aomod,??_dtoa
  5083   011580  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  5084   011584  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  5085   011588  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  5086   01158C  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  5087   011590  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  5088   011594  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  5089   011598  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  5090   01159C  C029  F016         	movff	??_dtoa,abs@a
  5091   0115A0  C02A  F017         	movff	??_dtoa+1,abs@a+1
  5092   0115A4  EC9B  F095         	call	_abs	;wreg free
  5093   0115A8  5016               	movf	?_abs^0,w,c
  5094   0115AA  0F30               	addlw	48
  5095   0115AC  6EDF               	movwf	indf2,c
  5096   0115AE                     
  5097                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  5098   0115AE  0633               	decf	dtoa@p^0,f,c
  5099   0115B0  A0D8               	btfss	status,0,c
  5100   0115B2  0634               	decf	(dtoa@p+1)^0,f,c
  5101   0115B4                     
  5102                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  5103   0115B4  0635               	decf	dtoa@w^0,f,c
  5104   0115B6  A0D8               	btfss	status,0,c
  5105   0115B8  0636               	decf	(dtoa@w+1)^0,f,c
  5106   0115BA                     
  5107                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  5108   0115BA  C037  F004         	movff	dtoa@n,___aodiv@dividend
  5109   0115BE  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  5110   0115C2  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  5111   0115C6  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  5112   0115CA  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  5113   0115CE  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  5114   0115D2  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  5115   0115D6  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  5116   0115DA  0E0A               	movlw	10
  5117   0115DC  6E0C               	movwf	___aodiv@divisor^0,c
  5118   0115DE  0E00               	movlw	0
  5119   0115E0  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  5120   0115E2  0E00               	movlw	0
  5121   0115E4  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  5122   0115E6  0E00               	movlw	0
  5123   0115E8  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  5124   0115EA  0E00               	movlw	0
  5125   0115EC  6E10               	movwf	(___aodiv@divisor+4)^0,c
  5126   0115EE  0E00               	movlw	0
  5127   0115F0  6E11               	movwf	(___aodiv@divisor+5)^0,c
  5128   0115F2  0E00               	movlw	0
  5129   0115F4  6E12               	movwf	(___aodiv@divisor+6)^0,c
  5130   0115F6  0E00               	movlw	0
  5131   0115F8  6E13               	movwf	(___aodiv@divisor+7)^0,c
  5132   0115FA  EC99  F08C         	call	___aodiv	;wreg free
  5133   0115FE  C004  F037         	movff	?___aodiv,dtoa@n
  5134   011602  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  5135   011606  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  5136   01160A  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  5137   01160E  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  5138   011612  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  5139   011616  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  5140   01161A  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  5141   01161E                     l4033:
  5142                           
  5143                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5144   01161E  BE41               	btfsc	(dtoa@i+1)^0,7,c
  5145   011620  EF1A  F08B         	goto	u2171
  5146   011624  5041               	movf	(dtoa@i+1)^0,w,c
  5147   011626  E108               	bnz	u2170
  5148   011628  0440               	decf	dtoa@i^0,w,c
  5149   01162A  A0D8               	btfss	status,0,c
  5150   01162C  EF1A  F08B         	goto	u2171
  5151   011630  EF1C  F08B         	goto	u2170
  5152   011634                     u2171:
  5153   011634  EF38  F08B         	goto	l4039
  5154   011638                     u2170:
  5155   011638  5037               	movf	dtoa@n^0,w,c
  5156   01163A  1038               	iorwf	(dtoa@n+1)^0,w,c
  5157   01163C  1039               	iorwf	(dtoa@n+2)^0,w,c
  5158   01163E  103A               	iorwf	(dtoa@n+3)^0,w,c
  5159   011640  103B               	iorwf	(dtoa@n+4)^0,w,c
  5160   011642  103C               	iorwf	(dtoa@n+5)^0,w,c
  5161   011644  103D               	iorwf	(dtoa@n+6)^0,w,c
  5162   011646  103E               	iorwf	(dtoa@n+7)^0,w,c
  5163   011648  A4D8               	btfss	status,2,c
  5164   01164A  EF29  F08B         	goto	u2181
  5165   01164E  EF2B  F08B         	goto	u2180
  5166   011652                     u2181:
  5167   011652  EF93  F08A         	goto	l4023
  5168   011656                     u2180:
  5169   011656  BE34               	btfsc	(dtoa@p+1)^0,7,c
  5170   011658  EF38  F08B         	goto	u2190
  5171   01165C  5034               	movf	(dtoa@p+1)^0,w,c
  5172   01165E  E106               	bnz	u2191
  5173   011660  0433               	decf	dtoa@p^0,w,c
  5174   011662  B0D8               	btfsc	status,0,c
  5175   011664  EF36  F08B         	goto	u2191
  5176   011668  EF38  F08B         	goto	u2190
  5177   01166C                     u2191:
  5178   01166C  EF93  F08A         	goto	l4023
  5179   011670                     u2190:
  5180   011670                     l4039:
  5181                           
  5182                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  5183   011670  503F               	movf	dtoa@s^0,w,c
  5184   011672  B4D8               	btfsc	status,2,c
  5185   011674  EF3E  F08B         	goto	u2201
  5186   011678  EF40  F08B         	goto	u2200
  5187   01167C                     u2201:
  5188   01167C  EF4B  F08B         	goto	l4045
  5189   011680                     u2200:
  5190   011680                     
  5191                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  5192   011680  0640               	decf	dtoa@i^0,f,c
  5193   011682  A0D8               	btfss	status,0,c
  5194   011684  0641               	decf	(dtoa@i+1)^0,f,c
  5195   011686                     
  5196                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  5197   011686  0EDF               	movlw	low _dbuf
  5198   011688  2440               	addwf	dtoa@i^0,w,c
  5199   01168A  6ED9               	movwf	fsr2l,c
  5200   01168C  0E00               	movlw	high _dbuf
  5201   01168E  2041               	addwfc	(dtoa@i+1)^0,w,c
  5202   011690  6EDA               	movwf	fsr2h,c
  5203   011692  C03F  FFDF         	movff	dtoa@s,indf2
  5204   011696                     l4045:
  5205                           
  5206                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  5207   011696  C01F  F014         	movff	dtoa@fp,pad@fp
  5208   01169A  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  5209   01169E  0EDF               	movlw	low _dbuf
  5210   0116A0  2440               	addwf	dtoa@i^0,w,c
  5211   0116A2  6E16               	movwf	pad@buf^0,c
  5212   0116A4  0E00               	movlw	high _dbuf
  5213   0116A6  2041               	addwfc	(dtoa@i+1)^0,w,c
  5214   0116A8  6E17               	movwf	(pad@buf+1)^0,c
  5215   0116AA  C035  F018         	movff	dtoa@w,pad@p
  5216   0116AE  C036  F019         	movff	dtoa@w+1,pad@p+1
  5217   0116B2  EC6A  F093         	call	_pad	;wreg free
  5218   0116B6  0012               	return		;funcret
  5219   0116B8                     __end_of_dtoa:
  5220                           	callstack 0
  5221                           
  5222 ;; *************** function _pad *****************
  5223 ;; Defined at:
  5224 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  5227 ;;		 -> sprintf@f(11), 
  5228 ;;  buf             2   21[COMRAM] PTR unsigned char 
  5229 ;;		 -> dbuf(32), 
  5230 ;;  p               2   23[COMRAM] int 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  w               2   28[COMRAM] int 
  5233 ;;  i               2   26[COMRAM] int 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5243 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5244 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5246 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5247 ;;Total ram usage:       11 bytes
  5248 ;; Hardware stack levels used: 1
  5249 ;; Hardware stack levels required when called: 4
  5250 ;; This function calls:
  5251 ;;		_fputc
  5252 ;;		_fputs
  5253 ;; This function is called by:
  5254 ;;		_dtoa
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text14
  5259   0126D4                     __ptext14:
  5260                           	callstack 0
  5261   0126D4                     _pad:
  5262                           	callstack 22
  5263   0126D4                     
  5264                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  5265   0126D4  BE19               	btfsc	(pad@p+1)^0,7,c
  5266   0126D6  EF6F  F093         	goto	u2061
  5267   0126DA  EF71  F093         	goto	u2060
  5268   0126DE                     u2061:
  5269   0126DE  EF77  F093         	goto	l3959
  5270   0126E2                     u2060:
  5271   0126E2  C018  F01D         	movff	pad@p,pad@w
  5272   0126E6  C019  F01E         	movff	pad@p+1,pad@w+1
  5273   0126EA  EF7B  F093         	goto	l1240
  5274   0126EE                     l3959:
  5275   0126EE  0E00               	movlw	0
  5276   0126F0  6E1E               	movwf	(pad@w+1)^0,c
  5277   0126F2  0E00               	movlw	0
  5278   0126F4  6E1D               	movwf	pad@w^0,c
  5279   0126F6                     l1240:
  5280                           
  5281                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  5282   0126F6  0E00               	movlw	0
  5283   0126F8  6E1C               	movwf	(pad@i+1)^0,c
  5284   0126FA  0E00               	movlw	0
  5285   0126FC  6E1B               	movwf	pad@i^0,c
  5286                           
  5287                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5288   0126FE  EF8D  F093         	goto	l3965
  5289   012702                     l3961:
  5290                           
  5291                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  5292   012702  0E00               	movlw	0
  5293   012704  6E05               	movwf	(fputc@c+1)^0,c
  5294   012706  0E20               	movlw	32
  5295   012708  6E04               	movwf	fputc@c^0,c
  5296   01270A  C014  F006         	movff	pad@fp,fputc@fp
  5297   01270E  C015  F007         	movff	pad@fp+1,fputc@fp+1
  5298   012712  EC40  F091         	call	_fputc	;wreg free
  5299   012716                     
  5300                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  5301   012716  4A1B               	infsnz	pad@i^0,f,c
  5302   012718  2A1C               	incf	(pad@i+1)^0,f,c
  5303   01271A                     l3965:
  5304                           
  5305                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5306   01271A  501D               	movf	pad@w^0,w,c
  5307   01271C  5C1B               	subwf	pad@i^0,w,c
  5308   01271E  501C               	movf	(pad@i+1)^0,w,c
  5309   012720  0A80               	xorlw	128
  5310   012722  6E1A               	movwf	??_pad^0,c
  5311   012724  501E               	movf	(pad@w+1)^0,w,c
  5312   012726  0A80               	xorlw	128
  5313   012728  581A               	subwfb	??_pad^0,w,c
  5314   01272A  A0D8               	btfss	status,0,c
  5315   01272C  EF9A  F093         	goto	u2071
  5316   012730  EF9C  F093         	goto	u2070
  5317   012734                     u2071:
  5318   012734  EF81  F093         	goto	l3961
  5319   012738                     u2070:
  5320   012738                     
  5321                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  5322   012738  C016  F00D         	movff	pad@buf,fputs@s
  5323   01273C  C017  F00E         	movff	pad@buf+1,fputs@s+1
  5324   012740  C014  F00F         	movff	pad@fp,fputs@fp
  5325   012744  C015  F010         	movff	pad@fp+1,fputs@fp+1
  5326   012748  EC58  F095         	call	_fputs	;wreg free
  5327   01274C  0012               	return		;funcret
  5328   01274E                     __end_of_pad:
  5329                           	callstack 0
  5330                           
  5331 ;; *************** function _fputs *****************
  5332 ;; Defined at:
  5333 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  s               2   12[COMRAM] PTR const unsigned char 
  5336 ;;		 -> dbuf(32), 
  5337 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  5338 ;;		 -> sprintf@f(11), 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  i               2   17[COMRAM] int 
  5341 ;;  c               1   16[COMRAM] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  2   12[COMRAM] int 
  5344 ;; Registers used:
  5345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5352 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5354 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5355 ;;Total ram usage:        7 bytes
  5356 ;; Hardware stack levels used: 1
  5357 ;; Hardware stack levels required when called: 3
  5358 ;; This function calls:
  5359 ;;		_fputc
  5360 ;; This function is called by:
  5361 ;;		_pad
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text15
  5366   012AB0                     __ptext15:
  5367                           	callstack 0
  5368   012AB0                     _fputs:
  5369                           	callstack 22
  5370   012AB0  0E00               	movlw	0
  5371   012AB2  6E13               	movwf	(fputs@i+1)^0,c
  5372   012AB4  0E00               	movlw	0
  5373   012AB6  6E12               	movwf	fputs@i^0,c
  5374   012AB8  EF69  F095         	goto	l3869
  5375   012ABC                     l3865:
  5376   012ABC  C011  F004         	movff	fputs@c,fputc@c
  5377   012AC0  6A05               	clrf	(fputc@c+1)^0,c
  5378   012AC2  C00F  F006         	movff	fputs@fp,fputc@fp
  5379   012AC6  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  5380   012ACA  EC40  F091         	call	_fputc	;wreg free
  5381   012ACE  4A12               	infsnz	fputs@i^0,f,c
  5382   012AD0  2A13               	incf	(fputs@i+1)^0,f,c
  5383   012AD2                     l3869:
  5384   012AD2  5012               	movf	fputs@i^0,w,c
  5385   012AD4  240D               	addwf	fputs@s^0,w,c
  5386   012AD6  6ED9               	movwf	fsr2l,c
  5387   012AD8  5013               	movf	(fputs@i+1)^0,w,c
  5388   012ADA  200E               	addwfc	(fputs@s+1)^0,w,c
  5389   012ADC  6EDA               	movwf	fsr2h,c
  5390   012ADE  50DF               	movf	indf2,w,c
  5391   012AE0  6E11               	movwf	fputs@c^0,c
  5392   012AE2  5011               	movf	fputs@c^0,w,c
  5393   012AE4  A4D8               	btfss	status,2,c
  5394   012AE6  EF77  F095         	goto	u1911
  5395   012AEA  EF79  F095         	goto	u1910
  5396   012AEE                     u1911:
  5397   012AEE  EF5E  F095         	goto	l3865
  5398   012AF2                     u1910:
  5399   012AF2  0012               	return		;funcret
  5400   012AF4                     __end_of_fputs:
  5401                           	callstack 0
  5402                           
  5403 ;; *************** function _fputc *****************
  5404 ;; Defined at:
  5405 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  c               2    3[COMRAM] int 
  5408 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  5409 ;;		 -> sprintf@f(11), 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  2    3[COMRAM] int 
  5414 ;; Registers used:
  5415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5423 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5424 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5425 ;;Total ram usage:        9 bytes
  5426 ;; Hardware stack levels used: 1
  5427 ;; Hardware stack levels required when called: 2
  5428 ;; This function calls:
  5429 ;;		_putch
  5430 ;; This function is called by:
  5431 ;;		_pad
  5432 ;;		_vfpfcnvrt
  5433 ;;		_fputs
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text16
  5438   012280                     __ptext16:
  5439                           	callstack 0
  5440   012280                     _fputc:
  5441                           	callstack 25
  5442   012280  5006               	movf	fputc@fp^0,w,c
  5443   012282  1007               	iorwf	(fputc@fp+1)^0,w,c
  5444   012284  B4D8               	btfsc	status,2,c
  5445   012286  EF47  F091         	goto	u1871
  5446   01228A  EF49  F091         	goto	u1870
  5447   01228E                     u1871:
  5448   01228E  EF52  F091         	goto	l3853
  5449   012292                     u1870:
  5450   012292  5006               	movf	fputc@fp^0,w,c
  5451   012294  1007               	iorwf	(fputc@fp+1)^0,w,c
  5452   012296  A4D8               	btfss	status,2,c
  5453   012298  EF50  F091         	goto	u1881
  5454   01229C  EF52  F091         	goto	u1880
  5455   0122A0                     u1881:
  5456   0122A0  EF57  F091         	goto	l3855
  5457   0122A4                     u1880:
  5458   0122A4                     l3853:
  5459   0122A4  5004               	movf	fputc@c^0,w,c
  5460   0122A6  ECA3  F096         	call	_putch
  5461   0122AA  EFA4  F091         	goto	l1288
  5462   0122AE                     l3855:
  5463   0122AE  EE20 F009          	lfsr	2,9
  5464   0122B2  5006               	movf	fputc@fp^0,w,c
  5465   0122B4  26D9               	addwf	fsr2l,f,c
  5466   0122B6  5007               	movf	(fputc@fp+1)^0,w,c
  5467   0122B8  22DA               	addwfc	fsr2h,f,c
  5468   0122BA  50DE               	movf	postinc2,w,c
  5469   0122BC  10DE               	iorwf	postinc2,w,c
  5470   0122BE  B4D8               	btfsc	status,2,c
  5471   0122C0  EF64  F091         	goto	u1891
  5472   0122C4  EF66  F091         	goto	u1890
  5473   0122C8                     u1891:
  5474   0122C8  EF81  F091         	goto	l3859
  5475   0122CC                     u1890:
  5476   0122CC  EE20 F009          	lfsr	2,9
  5477   0122D0  5006               	movf	fputc@fp^0,w,c
  5478   0122D2  26D9               	addwf	fsr2l,f,c
  5479   0122D4  5007               	movf	(fputc@fp+1)^0,w,c
  5480   0122D6  22DA               	addwfc	fsr2h,f,c
  5481   0122D8  EE10 F003          	lfsr	1,3
  5482   0122DC  5006               	movf	fputc@fp^0,w,c
  5483   0122DE  26E1               	addwf	fsr1l,f,c
  5484   0122E0  5007               	movf	(fputc@fp+1)^0,w,c
  5485   0122E2  22E2               	addwfc	fsr1h,f,c
  5486   0122E4  50DE               	movf	postinc2,w,c
  5487   0122E6  5CE6               	subwf	postinc1,w,c
  5488   0122E8  50E6               	movf	postinc1,w,c
  5489   0122EA  0A80               	xorlw	128
  5490   0122EC  6E0C               	movwf	(??_fputc+4)^0,c
  5491   0122EE  50DE               	movf	postinc2,w,c
  5492   0122F0  0A80               	xorlw	128
  5493   0122F2  580C               	subwfb	(??_fputc+4)^0,w,c
  5494   0122F4  B0D8               	btfsc	status,0,c
  5495   0122F6  EF7F  F091         	goto	u1901
  5496   0122FA  EF81  F091         	goto	u1900
  5497   0122FE                     u1901:
  5498   0122FE  EFA4  F091         	goto	l1288
  5499   012302                     u1900:
  5500   012302                     l3859:
  5501   012302  EE20 F003          	lfsr	2,3
  5502   012306  5006               	movf	fputc@fp^0,w,c
  5503   012308  26D9               	addwf	fsr2l,f,c
  5504   01230A  5007               	movf	(fputc@fp+1)^0,w,c
  5505   01230C  22DA               	addwfc	fsr2h,f,c
  5506   01230E  CFDE F008          	movff	postinc2,??_fputc
  5507   012312  CFDD F009          	movff	postdec2,??_fputc+1
  5508   012316  C006  FFD9         	movff	fputc@fp,fsr2l
  5509   01231A  C007  FFDA         	movff	fputc@fp+1,fsr2h
  5510   01231E  CFDE F00A          	movff	postinc2,??_fputc+2
  5511   012322  CFDD F00B          	movff	postdec2,??_fputc+3
  5512   012326  5008               	movf	??_fputc^0,w,c
  5513   012328  240A               	addwf	(??_fputc+2)^0,w,c
  5514   01232A  6ED9               	movwf	fsr2l,c
  5515   01232C  5009               	movf	(??_fputc+1)^0,w,c
  5516   01232E  200B               	addwfc	(??_fputc+3)^0,w,c
  5517   012330  6EDA               	movwf	fsr2h,c
  5518   012332  C004  FFDF         	movff	fputc@c,indf2
  5519   012336  EE20 F003          	lfsr	2,3
  5520   01233A  5006               	movf	fputc@fp^0,w,c
  5521   01233C  26D9               	addwf	fsr2l,f,c
  5522   01233E  5007               	movf	(fputc@fp+1)^0,w,c
  5523   012340  22DA               	addwfc	fsr2h,f,c
  5524   012342  2ADE               	incf	postinc2,f,c
  5525   012344  0E00               	movlw	0
  5526   012346  22DD               	addwfc	postdec2,f,c
  5527   012348                     l1288:
  5528   012348  0012               	return		;funcret
  5529   01234A                     __end_of_fputc:
  5530                           	callstack 0
  5531                           
  5532 ;; *************** function _putch *****************
  5533 ;; Defined at:
  5534 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  c               1    wreg     unsigned char 
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  c               1    0[COMRAM] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5552 ;;Total ram usage:        0 bytes
  5553 ;; Hardware stack levels used: 1
  5554 ;; Hardware stack levels required when called: 1
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_fputc
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text17
  5563   012D46                     __ptext17:
  5564                           	callstack 0
  5565   012D46                     _putch:
  5566                           	callstack 25
  5567   012D46  0012               	return		;funcret
  5568   012D48                     __end_of_putch:
  5569                           	callstack 0
  5570                           
  5571 ;; *************** function _abs *****************
  5572 ;; Defined at:
  5573 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  a               2   21[COMRAM] int 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  2   21[COMRAM] int 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5587 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5590 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5591 ;;Total ram usage:        4 bytes
  5592 ;; Hardware stack levels used: 1
  5593 ;; Hardware stack levels required when called: 1
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_normalise_readings
  5598 ;;		_dtoa
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text18
  5603   012B36                     __ptext18:
  5604                           	callstack 0
  5605   012B36                     _abs:
  5606                           	callstack 25
  5607   012B36  BE17               	btfsc	(abs@a+1)^0,7,c
  5608   012B38  EFA8  F095         	goto	u1920
  5609   012B3C  5017               	movf	(abs@a+1)^0,w,c
  5610   012B3E  E106               	bnz	u1921
  5611   012B40  0416               	decf	abs@a^0,w,c
  5612   012B42  B0D8               	btfsc	status,0,c
  5613   012B44  EFA6  F095         	goto	u1921
  5614   012B48  EFA8  F095         	goto	u1920
  5615   012B4C                     u1921:
  5616   012B4C  EFB6  F095         	goto	l1208
  5617   012B50                     u1920:
  5618   012B50  C016  F018         	movff	abs@a,??_abs
  5619   012B54  C017  F019         	movff	abs@a+1,??_abs+1
  5620   012B58  1E18               	comf	??_abs^0,f,c
  5621   012B5A  1E19               	comf	(??_abs+1)^0,f,c
  5622   012B5C  4A18               	infsnz	??_abs^0,f,c
  5623   012B5E  2A19               	incf	(??_abs+1)^0,f,c
  5624   012B60  C018  F016         	movff	??_abs,?_abs
  5625   012B64  C019  F017         	movff	??_abs+1,?_abs+1
  5626   012B68  EFBA  F095         	goto	l1211
  5627   012B6C                     l1208:
  5628   012B6C  C016  F016         	movff	abs@a,?_abs
  5629   012B70  C017  F017         	movff	abs@a+1,?_abs+1
  5630   012B74                     l1211:
  5631   012B74  0012               	return		;funcret
  5632   012B76                     __end_of_abs:
  5633                           	callstack 0
  5634                           
  5635 ;; *************** function ___aomod *****************
  5636 ;; Defined at:
  5637 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;  dividend        8    3[COMRAM] long long 
  5640 ;;  divisor         8   11[COMRAM] long long 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;  sign            1   20[COMRAM] unsigned char 
  5643 ;;  counter         1   19[COMRAM] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  8    3[COMRAM] long long 
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5653 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5656 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5657 ;;Total ram usage:       18 bytes
  5658 ;; Hardware stack levels used: 1
  5659 ;; Hardware stack levels required when called: 1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_dtoa
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text19
  5668   011D98                     __ptext19:
  5669                           	callstack 0
  5670   011D98                     ___aomod:
  5671                           	callstack 25
  5672   011D98  0E00               	movlw	0
  5673   011D9A  6E15               	movwf	___aomod@sign^0,c
  5674   011D9C  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  5675   011D9E  EFD5  F08E         	goto	u2000
  5676   011DA2  EFD3  F08E         	goto	u2001
  5677   011DA6                     u2001:
  5678   011DA6  EFE7  F08E         	goto	l3927
  5679   011DAA                     u2000:
  5680   011DAA  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5681   011DAC  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5682   011DAE  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5683   011DB0  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5684   011DB2  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5685   011DB4  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5686   011DB6  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5687   011DB8  6C04               	negf	___aomod@dividend^0,c
  5688   011DBA  0E00               	movlw	0
  5689   011DBC  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5690   011DBE  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5691   011DC0  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5692   011DC2  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5693   011DC4  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5694   011DC6  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5695   011DC8  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5696   011DCA  0E01               	movlw	1
  5697   011DCC  6E15               	movwf	___aomod@sign^0,c
  5698   011DCE                     l3927:
  5699   011DCE  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  5700   011DD0  EFEE  F08E         	goto	u2010
  5701   011DD4  EFEC  F08E         	goto	u2011
  5702   011DD8                     u2011:
  5703   011DD8  EFFE  F08E         	goto	l3931
  5704   011DDC                     u2010:
  5705   011DDC  1E13               	comf	(___aomod@divisor+7)^0,f,c
  5706   011DDE  1E12               	comf	(___aomod@divisor+6)^0,f,c
  5707   011DE0  1E11               	comf	(___aomod@divisor+5)^0,f,c
  5708   011DE2  1E10               	comf	(___aomod@divisor+4)^0,f,c
  5709   011DE4  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  5710   011DE6  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  5711   011DE8  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  5712   011DEA  6C0C               	negf	___aomod@divisor^0,c
  5713   011DEC  0E00               	movlw	0
  5714   011DEE  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  5715   011DF0  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  5716   011DF2  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  5717   011DF4  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  5718   011DF6  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  5719   011DF8  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  5720   011DFA  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  5721   011DFC                     l3931:
  5722   011DFC  500C               	movf	___aomod@divisor^0,w,c
  5723   011DFE  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  5724   011E00  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  5725   011E02  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  5726   011E04  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  5727   011E06  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  5728   011E08  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  5729   011E0A  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  5730   011E0C  B4D8               	btfsc	status,2,c
  5731   011E0E  EF0B  F08F         	goto	u2021
  5732   011E12  EF0D  F08F         	goto	u2020
  5733   011E16                     u2021:
  5734   011E16  EF55  F08F         	goto	l3947
  5735   011E1A                     u2020:
  5736   011E1A  0E01               	movlw	1
  5737   011E1C  6E14               	movwf	___aomod@counter^0,c
  5738   011E1E  EF1B  F08F         	goto	l3937
  5739   011E22                     l3935:
  5740   011E22  90D8               	bcf	status,0,c
  5741   011E24  360C               	rlcf	___aomod@divisor^0,f,c
  5742   011E26  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  5743   011E28  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  5744   011E2A  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  5745   011E2C  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  5746   011E2E  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  5747   011E30  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  5748   011E32  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  5749   011E34  2A14               	incf	___aomod@counter^0,f,c
  5750   011E36                     l3937:
  5751   011E36  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  5752   011E38  EF20  F08F         	goto	u2031
  5753   011E3C  EF22  F08F         	goto	u2030
  5754   011E40                     u2031:
  5755   011E40  EF11  F08F         	goto	l3935
  5756   011E44                     u2030:
  5757   011E44                     l3939:
  5758   011E44  500C               	movf	___aomod@divisor^0,w,c
  5759   011E46  5C04               	subwf	___aomod@dividend^0,w,c
  5760   011E48  500D               	movf	(___aomod@divisor+1)^0,w,c
  5761   011E4A  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  5762   011E4C  500E               	movf	(___aomod@divisor+2)^0,w,c
  5763   011E4E  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  5764   011E50  500F               	movf	(___aomod@divisor+3)^0,w,c
  5765   011E52  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  5766   011E54  5010               	movf	(___aomod@divisor+4)^0,w,c
  5767   011E56  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  5768   011E58  5011               	movf	(___aomod@divisor+5)^0,w,c
  5769   011E5A  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  5770   011E5C  5012               	movf	(___aomod@divisor+6)^0,w,c
  5771   011E5E  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  5772   011E60  5013               	movf	(___aomod@divisor+7)^0,w,c
  5773   011E62  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  5774   011E64  A0D8               	btfss	status,0,c
  5775   011E66  EF37  F08F         	goto	u2041
  5776   011E6A  EF39  F08F         	goto	u2040
  5777   011E6E                     u2041:
  5778   011E6E  EF49  F08F         	goto	l3943
  5779   011E72                     u2040:
  5780   011E72  500C               	movf	___aomod@divisor^0,w,c
  5781   011E74  5E04               	subwf	___aomod@dividend^0,f,c
  5782   011E76  500D               	movf	(___aomod@divisor+1)^0,w,c
  5783   011E78  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  5784   011E7A  500E               	movf	(___aomod@divisor+2)^0,w,c
  5785   011E7C  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  5786   011E7E  500F               	movf	(___aomod@divisor+3)^0,w,c
  5787   011E80  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  5788   011E82  5010               	movf	(___aomod@divisor+4)^0,w,c
  5789   011E84  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  5790   011E86  5011               	movf	(___aomod@divisor+5)^0,w,c
  5791   011E88  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  5792   011E8A  5012               	movf	(___aomod@divisor+6)^0,w,c
  5793   011E8C  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  5794   011E8E  5013               	movf	(___aomod@divisor+7)^0,w,c
  5795   011E90  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  5796   011E92                     l3943:
  5797   011E92  90D8               	bcf	status,0,c
  5798   011E94  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  5799   011E96  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  5800   011E98  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  5801   011E9A  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  5802   011E9C  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  5803   011E9E  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  5804   011EA0  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  5805   011EA2  320C               	rrcf	___aomod@divisor^0,f,c
  5806   011EA4  2E14               	decfsz	___aomod@counter^0,f,c
  5807   011EA6  EF22  F08F         	goto	l3939
  5808   011EAA                     l3947:
  5809   011EAA  5015               	movf	___aomod@sign^0,w,c
  5810   011EAC  B4D8               	btfsc	status,2,c
  5811   011EAE  EF5B  F08F         	goto	u2051
  5812   011EB2  EF5D  F08F         	goto	u2050
  5813   011EB6                     u2051:
  5814   011EB6  EF6D  F08F         	goto	l3951
  5815   011EBA                     u2050:
  5816   011EBA  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5817   011EBC  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5818   011EBE  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5819   011EC0  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5820   011EC2  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5821   011EC4  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5822   011EC6  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5823   011EC8  6C04               	negf	___aomod@dividend^0,c
  5824   011ECA  0E00               	movlw	0
  5825   011ECC  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5826   011ECE  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5827   011ED0  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5828   011ED2  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5829   011ED4  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5830   011ED6  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5831   011ED8  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5832   011EDA                     l3951:
  5833   011EDA  C004  F004         	movff	___aomod@dividend,?___aomod
  5834   011EDE  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  5835   011EE2  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  5836   011EE6  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  5837   011EEA  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  5838   011EEE  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  5839   011EF2  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  5840   011EF6  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  5841   011EFA  0012               	return		;funcret
  5842   011EFC                     __end_of___aomod:
  5843                           	callstack 0
  5844                           
  5845 ;; *************** function ___aodiv *****************
  5846 ;; Defined at:
  5847 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  dividend        8    3[COMRAM] long long 
  5850 ;;  divisor         8   11[COMRAM] long long 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  quotient        8   21[COMRAM] long long 
  5853 ;;  sign            1   20[COMRAM] unsigned char 
  5854 ;;  counter         1   19[COMRAM] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  8    3[COMRAM] long long 
  5857 ;; Registers used:
  5858 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5864 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;Total ram usage:       26 bytes
  5869 ;; Hardware stack levels used: 1
  5870 ;; Hardware stack levels required when called: 1
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_dtoa
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text20
  5879   011932                     __ptext20:
  5880                           	callstack 0
  5881   011932                     ___aodiv:
  5882                           	callstack 25
  5883   011932  0E00               	movlw	0
  5884   011934  6E15               	movwf	___aodiv@sign^0,c
  5885   011936  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  5886   011938  EFA2  F08C         	goto	u1930
  5887   01193C  EFA0  F08C         	goto	u1931
  5888   011940                     u1931:
  5889   011940  EFB4  F08C         	goto	l3883
  5890   011944                     u1930:
  5891   011944  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  5892   011946  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  5893   011948  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  5894   01194A  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  5895   01194C  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  5896   01194E  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  5897   011950  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  5898   011952  6C0C               	negf	___aodiv@divisor^0,c
  5899   011954  0E00               	movlw	0
  5900   011956  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  5901   011958  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  5902   01195A  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  5903   01195C  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  5904   01195E  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  5905   011960  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  5906   011962  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  5907   011964  0E01               	movlw	1
  5908   011966  6E15               	movwf	___aodiv@sign^0,c
  5909   011968                     l3883:
  5910   011968  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  5911   01196A  EFBB  F08C         	goto	u1940
  5912   01196E  EFB9  F08C         	goto	u1941
  5913   011972                     u1941:
  5914   011972  EFCD  F08C         	goto	l3889
  5915   011976                     u1940:
  5916   011976  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  5917   011978  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  5918   01197A  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  5919   01197C  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  5920   01197E  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  5921   011980  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  5922   011982  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  5923   011984  6C04               	negf	___aodiv@dividend^0,c
  5924   011986  0E00               	movlw	0
  5925   011988  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  5926   01198A  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  5927   01198C  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  5928   01198E  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  5929   011990  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  5930   011992  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  5931   011994  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  5932   011996  0E01               	movlw	1
  5933   011998  1A15               	xorwf	___aodiv@sign^0,f,c
  5934   01199A                     l3889:
  5935   01199A  EE20  F016         	lfsr	2,___aodiv@quotient
  5936   01199E  0E07               	movlw	7
  5937   0119A0                     u1951:
  5938   0119A0  6ADE               	clrf	postinc2,c
  5939   0119A2  06E8               	decf	wreg,f,c
  5940   0119A4  E2FD               	bc	u1951
  5941   0119A6  500C               	movf	___aodiv@divisor^0,w,c
  5942   0119A8  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  5943   0119AA  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  5944   0119AC  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  5945   0119AE  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  5946   0119B0  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  5947   0119B2  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  5948   0119B4  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  5949   0119B6  B4D8               	btfsc	status,2,c
  5950   0119B8  EFE0  F08C         	goto	u1961
  5951   0119BC  EFE2  F08C         	goto	u1960
  5952   0119C0                     u1961:
  5953   0119C0  EF34  F08D         	goto	l3911
  5954   0119C4                     u1960:
  5955   0119C4  0E01               	movlw	1
  5956   0119C6  6E14               	movwf	___aodiv@counter^0,c
  5957   0119C8  EFF0  F08C         	goto	l3897
  5958   0119CC                     l3895:
  5959   0119CC  90D8               	bcf	status,0,c
  5960   0119CE  360C               	rlcf	___aodiv@divisor^0,f,c
  5961   0119D0  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  5962   0119D2  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  5963   0119D4  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  5964   0119D6  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  5965   0119D8  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  5966   0119DA  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  5967   0119DC  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  5968   0119DE  2A14               	incf	___aodiv@counter^0,f,c
  5969   0119E0                     l3897:
  5970   0119E0  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  5971   0119E2  EFF5  F08C         	goto	u1971
  5972   0119E6  EFF7  F08C         	goto	u1970
  5973   0119EA                     u1971:
  5974   0119EA  EFE6  F08C         	goto	l3895
  5975   0119EE                     u1970:
  5976   0119EE                     l3899:
  5977   0119EE  90D8               	bcf	status,0,c
  5978   0119F0  3616               	rlcf	___aodiv@quotient^0,f,c
  5979   0119F2  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  5980   0119F4  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  5981   0119F6  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  5982   0119F8  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  5983   0119FA  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  5984   0119FC  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  5985   0119FE  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  5986   011A00  500C               	movf	___aodiv@divisor^0,w,c
  5987   011A02  5C04               	subwf	___aodiv@dividend^0,w,c
  5988   011A04  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5989   011A06  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  5990   011A08  500E               	movf	(___aodiv@divisor+2)^0,w,c
  5991   011A0A  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  5992   011A0C  500F               	movf	(___aodiv@divisor+3)^0,w,c
  5993   011A0E  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  5994   011A10  5010               	movf	(___aodiv@divisor+4)^0,w,c
  5995   011A12  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  5996   011A14  5011               	movf	(___aodiv@divisor+5)^0,w,c
  5997   011A16  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  5998   011A18  5012               	movf	(___aodiv@divisor+6)^0,w,c
  5999   011A1A  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  6000   011A1C  5013               	movf	(___aodiv@divisor+7)^0,w,c
  6001   011A1E  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  6002   011A20  A0D8               	btfss	status,0,c
  6003   011A22  EF15  F08D         	goto	u1981
  6004   011A26  EF17  F08D         	goto	u1980
  6005   011A2A                     u1981:
  6006   011A2A  EF28  F08D         	goto	l3907
  6007   011A2E                     u1980:
  6008   011A2E  500C               	movf	___aodiv@divisor^0,w,c
  6009   011A30  5E04               	subwf	___aodiv@dividend^0,f,c
  6010   011A32  500D               	movf	(___aodiv@divisor+1)^0,w,c
  6011   011A34  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  6012   011A36  500E               	movf	(___aodiv@divisor+2)^0,w,c
  6013   011A38  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  6014   011A3A  500F               	movf	(___aodiv@divisor+3)^0,w,c
  6015   011A3C  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  6016   011A3E  5010               	movf	(___aodiv@divisor+4)^0,w,c
  6017   011A40  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  6018   011A42  5011               	movf	(___aodiv@divisor+5)^0,w,c
  6019   011A44  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  6020   011A46  5012               	movf	(___aodiv@divisor+6)^0,w,c
  6021   011A48  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  6022   011A4A  5013               	movf	(___aodiv@divisor+7)^0,w,c
  6023   011A4C  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  6024   011A4E  8016               	bsf	___aodiv@quotient^0,0,c
  6025   011A50                     l3907:
  6026   011A50  90D8               	bcf	status,0,c
  6027   011A52  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  6028   011A54  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  6029   011A56  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  6030   011A58  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  6031   011A5A  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  6032   011A5C  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  6033   011A5E  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  6034   011A60  320C               	rrcf	___aodiv@divisor^0,f,c
  6035   011A62  2E14               	decfsz	___aodiv@counter^0,f,c
  6036   011A64  EFF7  F08C         	goto	l3899
  6037   011A68                     l3911:
  6038   011A68  5015               	movf	___aodiv@sign^0,w,c
  6039   011A6A  B4D8               	btfsc	status,2,c
  6040   011A6C  EF3A  F08D         	goto	u1991
  6041   011A70  EF3C  F08D         	goto	u1990
  6042   011A74                     u1991:
  6043   011A74  EF4C  F08D         	goto	l3915
  6044   011A78                     u1990:
  6045   011A78  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  6046   011A7A  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  6047   011A7C  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  6048   011A7E  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  6049   011A80  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  6050   011A82  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  6051   011A84  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  6052   011A86  6C16               	negf	___aodiv@quotient^0,c
  6053   011A88  0E00               	movlw	0
  6054   011A8A  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  6055   011A8C  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  6056   011A8E  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  6057   011A90  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  6058   011A92  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  6059   011A94  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  6060   011A96  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  6061   011A98                     l3915:
  6062   011A98  C016  F004         	movff	___aodiv@quotient,?___aodiv
  6063   011A9C  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  6064   011AA0  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  6065   011AA4  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  6066   011AA8  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  6067   011AAC  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  6068   011AB0  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  6069   011AB4  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  6070   011AB8  0012               	return		;funcret
  6071   011ABA                     __end_of___aodiv:
  6072                           	callstack 0
  6073                           
  6074 ;; *************** function _sendStringSerial4 *****************
  6075 ;; Defined at:
  6076 ;;		line 39 in file "serial.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  string          2    4[COMRAM] PTR unsigned char 
  6079 ;;		 -> main@buf(150), 
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6095 ;;Total ram usage:        2 bytes
  6096 ;; Hardware stack levels used: 1
  6097 ;; Hardware stack levels required when called: 2
  6098 ;; This function calls:
  6099 ;;		_sendCharSerial4
  6100 ;; This function is called by:
  6101 ;;		_main
  6102 ;;		_clear_read_calibration
  6103 ;;		_motor_response
  6104 ;;		_card_response
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text21
  6109   012BAA                     __ptext21:
  6110                           	callstack 0
  6111   012BAA                     _sendStringSerial4:
  6112                           	callstack 28
  6113   012BAA                     
  6114                           ;serial.c: 40:  while(*string != 0) {
  6115   012BAA  EFE0  F095         	goto	l4283
  6116   012BAE                     l4279:
  6117                           
  6118                           ;serial.c: 41:         sendCharSerial4(*string++);
  6119   012BAE  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  6120   012BB2  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6121   012BB6  50DF               	movf	indf2,w,c
  6122   012BB8  EC82  F096         	call	_sendCharSerial4
  6123   012BBC  4A05               	infsnz	sendStringSerial4@string^0,f,c
  6124   012BBE  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  6125   012BC0                     l4283:
  6126                           
  6127                           ;serial.c: 40:  while(*string != 0) {
  6128   012BC0  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  6129   012BC4  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6130   012BC8  50DF               	movf	indf2,w,c
  6131   012BCA  A4D8               	btfss	status,2,c
  6132   012BCC  EFEA  F095         	goto	u2371
  6133   012BD0  EFEC  F095         	goto	u2370
  6134   012BD4                     u2371:
  6135   012BD4  EFD7  F095         	goto	l4279
  6136   012BD8                     u2370:
  6137   012BD8  0012               	return		;funcret
  6138   012BDA                     __end_of_sendStringSerial4:
  6139                           	callstack 0
  6140                           
  6141 ;; *************** function _sendCharSerial4 *****************
  6142 ;; Defined at:
  6143 ;;		line 32 in file "serial.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  charToSend      1    wreg     unsigned char 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  charToSend      1    3[COMRAM] unsigned char 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		wreg
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6161 ;;Total ram usage:        1 bytes
  6162 ;; Hardware stack levels used: 1
  6163 ;; Hardware stack levels required when called: 1
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		_sendStringSerial4
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text22
  6172   012D04                     __ptext22:
  6173                           	callstack 0
  6174   012D04                     _sendCharSerial4:
  6175                           	callstack 28
  6176                           
  6177                           ;incstack = 0
  6178                           ;sendCharSerial4@charToSend stored from wreg
  6179   012D04  6E04               	movwf	sendCharSerial4@charToSend^0,c
  6180   012D06                     l489:
  6181   012D06  010E               	movlb	14	; () banked
  6182   012D08  A537               	btfss	55,2,b	;volatile
  6183   012D0A  EF89  F096         	goto	u2341
  6184   012D0E  EF8B  F096         	goto	u2340
  6185   012D12                     u2341:
  6186   012D12  EF83  F096         	goto	l489
  6187   012D16                     u2340:
  6188   012D16                     
  6189                           ; BSR set to: 14
  6190                           ;serial.c: 34:     TX4REG = charToSend;
  6191   012D16  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  6192   012D1A                     
  6193                           ; BSR set to: 14
  6194   012D1A  0012               	return		;funcret
  6195   012D1C                     __end_of_sendCharSerial4:
  6196                           	callstack 0
  6197                           
  6198 ;; *************** function _reverseFullSpeed *****************
  6199 ;; Defined at:
  6200 ;;		line 148 in file "dc_motor.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6203 ;;		 -> main@motorL(9), 
  6204 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6205 ;;		 -> main@motorR(9), 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;  i               2   27[COMRAM] int 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      void 
  6210 ;; Registers used:
  6211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6218 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6220 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;Total ram usage:        7 bytes
  6222 ;; Hardware stack levels used: 1
  6223 ;; Hardware stack levels required when called: 3
  6224 ;; This function calls:
  6225 ;;		_setMotorPWM
  6226 ;; This function is called by:
  6227 ;;		_main
  6228 ;;		_motor_response
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text23
  6233   012540                     __ptext23:
  6234                           	callstack 0
  6235   012540                     _reverseFullSpeed:
  6236                           	callstack 27
  6237   012540                     
  6238                           ;dc_motor.c: 148: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 149: {;d
      +                          c_motor.c: 150:     mL->direction=0;
  6239   012540  EE20 F001          	lfsr	2,1
  6240   012544  5017               	movf	reverseFullSpeed@mL^0,w,c
  6241   012546  26D9               	addwf	fsr2l,f,c
  6242   012548  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  6243   01254A  22DA               	addwfc	fsr2h,f,c
  6244   01254C  0E00               	movlw	0
  6245   01254E  6EDF               	movwf	indf2,c
  6246                           
  6247                           ;dc_motor.c: 151:     mR->direction=0;
  6248   012550  EE20 F001          	lfsr	2,1
  6249   012554  5019               	movf	reverseFullSpeed@mR^0,w,c
  6250   012556  26D9               	addwf	fsr2l,f,c
  6251   012558  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  6252   01255A  22DA               	addwfc	fsr2h,f,c
  6253   01255C  0E00               	movlw	0
  6254   01255E  6EDF               	movwf	indf2,c
  6255   012560                     
  6256                           ;dc_motor.c: 152:     for(int i=0;i<40;i+=10){
  6257   012560  0E00               	movlw	0
  6258   012562  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  6259   012564  0E00               	movlw	0
  6260   012566  6E1C               	movwf	reverseFullSpeed@i^0,c
  6261   012568                     l4253:
  6262                           
  6263                           ;dc_motor.c: 153:         mL->power=i;
  6264   012568  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  6265   01256C  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  6266   012570  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6267                           
  6268                           ;dc_motor.c: 154:         mR->power=i;
  6269   012574  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  6270   012578  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  6271   01257C  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6272   012580                     
  6273                           ;dc_motor.c: 155:         setMotorPWM(mL);
  6274   012580  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  6275   012584  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  6276   012588  EC16  F08E         	call	_setMotorPWM	;wreg free
  6277   01258C                     
  6278                           ;dc_motor.c: 156:         setMotorPWM(mR);
  6279   01258C  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  6280   012590  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  6281   012594  EC16  F08E         	call	_setMotorPWM	;wreg free
  6282   012598                     
  6283                           ;dc_motor.c: 157:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6284   012598  0ED0               	movlw	208
  6285   01259A  6E1B               	movwf	??_reverseFullSpeed^0,c
  6286   01259C  0ECA               	movlw	202
  6287   01259E                     u2957:
  6288   01259E  2EE8               	decfsz	wreg,f,c
  6289   0125A0  D7FE               	bra	u2957
  6290   0125A2  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  6291   0125A4  D7FC               	bra	u2957
  6292   0125A6                     
  6293                           ;dc_motor.c: 158:     }
  6294   0125A6  0E0A               	movlw	10
  6295   0125A8  261C               	addwf	reverseFullSpeed@i^0,f,c
  6296   0125AA  0E00               	movlw	0
  6297   0125AC  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  6298   0125AE  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  6299   0125B0  EFE3  F092         	goto	u2361
  6300   0125B4  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  6301   0125B6  E109               	bnz	u2360
  6302   0125B8  0E28               	movlw	40
  6303   0125BA  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  6304   0125BC  A0D8               	btfss	status,0,c
  6305   0125BE  EFE3  F092         	goto	u2361
  6306   0125C2  EFE5  F092         	goto	u2360
  6307   0125C6                     u2361:
  6308   0125C6  EFB4  F092         	goto	l4253
  6309   0125CA                     u2360:
  6310   0125CA  0012               	return		;funcret
  6311   0125CC                     __end_of_reverseFullSpeed:
  6312                           	callstack 0
  6313                           
  6314 ;; *************** function _home_response *****************
  6315 ;; Defined at:
  6316 ;;		line 257 in file "colour_identify.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  card            1    wreg     enum E14551
  6319 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  6320 ;;		 -> main@motorL(9), 
  6321 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  6322 ;;		 -> main@motorR(9), 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  card            1   37[COMRAM] enum E14551
  6325 ;;  i               1   36[COMRAM] enum E14551
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      void 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;Total ram usage:        8 bytes
  6340 ;; Hardware stack levels used: 1
  6341 ;; Hardware stack levels required when called: 4
  6342 ;; This function calls:
  6343 ;;		_fullSpeedAhead
  6344 ;;		_stop
  6345 ;;		_turnLeft45
  6346 ;;		_turnRight45
  6347 ;; This function is called by:
  6348 ;;		_motor_response
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text24
  6353   010CB6                     __ptext24:
  6354                           	callstack 0
  6355   010CB6                     _home_response:
  6356                           	callstack 24
  6357                           
  6358                           ;incstack = 0
  6359                           ;home_response@card stored from wreg
  6360   010CB6  6E26               	movwf	home_response@card^0,c
  6361   010CB8                     
  6362                           ;colour_identify.c: 258:     for(colour i = RED; i<= card; i++){
  6363   010CB8  0E00               	movlw	0
  6364   010CBA  6E25               	movwf	home_response@i^0,c
  6365   010CBC                     l394:
  6366                           
  6367                           ;colour_identify.c: 259:         LATDbits.LATD7 = 1;
  6368   010CBC  8E7C               	bsf	124,7,c	;volatile
  6369   010CBE                     
  6370                           ;colour_identify.c: 260:         _delay((unsigned long)((100)*(64000000/4000.0)));
  6371   010CBE  0E09               	movlw	9
  6372   010CC0  6E24               	movwf	(??_home_response+1)^0,c
  6373   010CC2  0E1E               	movlw	30
  6374   010CC4  6E23               	movwf	??_home_response^0,c
  6375   010CC6  0EE4               	movlw	228
  6376   010CC8                     u2967:
  6377   010CC8  2EE8               	decfsz	wreg,f,c
  6378   010CCA  D7FE               	bra	u2967
  6379   010CCC  2E23               	decfsz	??_home_response^0,f,c
  6380   010CCE  D7FC               	bra	u2967
  6381   010CD0  2E24               	decfsz	(??_home_response+1)^0,f,c
  6382   010CD2  D7FA               	bra	u2967
  6383   010CD4  D000               	nop2	
  6384   010CD6                     
  6385                           ;colour_identify.c: 261:         LATDbits.LATD7 = 0;
  6386   010CD6  9E7C               	bcf	124,7,c	;volatile
  6387                           
  6388                           ;colour_identify.c: 262:         _delay((unsigned long)((100)*(64000000/4000.0)));
  6389   010CD8  0E09               	movlw	9
  6390   010CDA  6E24               	movwf	(??_home_response+1)^0,c
  6391   010CDC  0E1E               	movlw	30
  6392   010CDE  6E23               	movwf	??_home_response^0,c
  6393   010CE0  0EE4               	movlw	228
  6394   010CE2                     u2977:
  6395   010CE2  2EE8               	decfsz	wreg,f,c
  6396   010CE4  D7FE               	bra	u2977
  6397   010CE6  2E23               	decfsz	??_home_response^0,f,c
  6398   010CE8  D7FC               	bra	u2977
  6399   010CEA  2E24               	decfsz	(??_home_response+1)^0,f,c
  6400   010CEC  D7FA               	bra	u2977
  6401   010CEE  D000               	nop2	
  6402   010CF0                     
  6403                           ;colour_identify.c: 263:     }
  6404   010CF0  2A25               	incf	home_response@i^0,f,c
  6405   010CF2  5025               	movf	home_response@i^0,w,c
  6406   010CF4  5C26               	subwf	home_response@card^0,w,c
  6407   010CF6  B0D8               	btfsc	status,0,c
  6408   010CF8  EF80  F086         	goto	u2381
  6409   010CFC  EF82  F086         	goto	u2380
  6410   010D00                     u2381:
  6411   010D00  EF5E  F086         	goto	l394
  6412   010D04                     u2380:
  6413   010D04  EF7E  F088         	goto	l4351
  6414   010D08                     l4297:
  6415                           
  6416                           ;colour_identify.c: 266:             turnLeft45(mL,mR);
  6417   010D08  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6418   010D0C  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6419   010D10  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6420   010D14  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6421   010D18  ECFC  F091         	call	_turnLeft45	;wreg free
  6422                           
  6423                           ;colour_identify.c: 267:             stop(mL,mR);
  6424   010D1C  C01F  F017         	movff	home_response@mL,stop@mL
  6425   010D20  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6426   010D24  C021  F019         	movff	home_response@mR,stop@mR
  6427   010D28  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6428   010D2C  EC13  F094         	call	_stop	;wreg free
  6429                           
  6430                           ;colour_identify.c: 268:             turnLeft45(mL,mR);
  6431   010D30  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6432   010D34  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6433   010D38  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6434   010D3C  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6435   010D40  ECFC  F091         	call	_turnLeft45	;wreg free
  6436                           
  6437                           ;colour_identify.c: 269:             stop(mL,mR);
  6438   010D44  C01F  F017         	movff	home_response@mL,stop@mL
  6439   010D48  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6440   010D4C  C021  F019         	movff	home_response@mR,stop@mR
  6441   010D50  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6442   010D54  EC13  F094         	call	_stop	;wreg free
  6443                           
  6444                           ;colour_identify.c: 270:             break;
  6445   010D58  EFAB  F088         	goto	l407
  6446   010D5C                     l4299:
  6447                           
  6448                           ;colour_identify.c: 272:             turnRight45(mL,mR);
  6449   010D5C  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6450   010D60  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6451   010D64  C021  F019         	movff	home_response@mR,turnRight45@mR
  6452   010D68  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6453   010D6C  ECA5  F091         	call	_turnRight45	;wreg free
  6454                           
  6455                           ;colour_identify.c: 273:             stop(mL,mR);
  6456   010D70  C01F  F017         	movff	home_response@mL,stop@mL
  6457   010D74  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6458   010D78  C021  F019         	movff	home_response@mR,stop@mR
  6459   010D7C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6460   010D80  EC13  F094         	call	_stop	;wreg free
  6461                           
  6462                           ;colour_identify.c: 274:             turnRight45(mL,mR);
  6463   010D84  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6464   010D88  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6465   010D8C  C021  F019         	movff	home_response@mR,turnRight45@mR
  6466   010D90  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6467   010D94  ECA5  F091         	call	_turnRight45	;wreg free
  6468                           
  6469                           ;colour_identify.c: 275:             stop(mL,mR);
  6470   010D98  C01F  F017         	movff	home_response@mL,stop@mL
  6471   010D9C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6472   010DA0  C021  F019         	movff	home_response@mR,stop@mR
  6473   010DA4  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6474   010DA8  EC13  F094         	call	_stop	;wreg free
  6475                           
  6476                           ;colour_identify.c: 276:             break;
  6477   010DAC  EFAB  F088         	goto	l407
  6478   010DB0                     l4301:
  6479                           
  6480                           ;colour_identify.c: 278:             turnRight45(mL,mR);
  6481   010DB0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6482   010DB4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6483   010DB8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6484   010DBC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6485   010DC0  ECA5  F091         	call	_turnRight45	;wreg free
  6486                           
  6487                           ;colour_identify.c: 279:             stop(mL,mR);
  6488   010DC4  C01F  F017         	movff	home_response@mL,stop@mL
  6489   010DC8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6490   010DCC  C021  F019         	movff	home_response@mR,stop@mR
  6491   010DD0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6492   010DD4  EC13  F094         	call	_stop	;wreg free
  6493                           
  6494                           ;colour_identify.c: 280:             turnRight45(mL,mR);
  6495   010DD8  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6496   010DDC  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6497   010DE0  C021  F019         	movff	home_response@mR,turnRight45@mR
  6498   010DE4  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6499   010DE8  ECA5  F091         	call	_turnRight45	;wreg free
  6500                           
  6501                           ;colour_identify.c: 281:             stop(mL,mR);
  6502   010DEC  C01F  F017         	movff	home_response@mL,stop@mL
  6503   010DF0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6504   010DF4  C021  F019         	movff	home_response@mR,stop@mR
  6505   010DF8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6506   010DFC  EC13  F094         	call	_stop	;wreg free
  6507                           
  6508                           ;colour_identify.c: 282:             turnRight45(mL,mR);
  6509   010E00  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6510   010E04  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6511   010E08  C021  F019         	movff	home_response@mR,turnRight45@mR
  6512   010E0C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6513   010E10  ECA5  F091         	call	_turnRight45	;wreg free
  6514                           
  6515                           ;colour_identify.c: 283:             stop(mL,mR);
  6516   010E14  C01F  F017         	movff	home_response@mL,stop@mL
  6517   010E18  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6518   010E1C  C021  F019         	movff	home_response@mR,stop@mR
  6519   010E20  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6520   010E24  EC13  F094         	call	_stop	;wreg free
  6521                           
  6522                           ;colour_identify.c: 284:             turnRight45(mL,mR);
  6523   010E28  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6524   010E2C  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6525   010E30  C021  F019         	movff	home_response@mR,turnRight45@mR
  6526   010E34  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6527   010E38  ECA5  F091         	call	_turnRight45	;wreg free
  6528                           
  6529                           ;colour_identify.c: 285:             stop(mL,mR);
  6530   010E3C  C01F  F017         	movff	home_response@mL,stop@mL
  6531   010E40  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6532   010E44  C021  F019         	movff	home_response@mR,stop@mR
  6533   010E48  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6534   010E4C  EC13  F094         	call	_stop	;wreg free
  6535                           
  6536                           ;colour_identify.c: 286:             break;
  6537   010E50  EFAB  F088         	goto	l407
  6538   010E54                     l4303:
  6539                           
  6540                           ;colour_identify.c: 288:             stop(mL,mR);
  6541   010E54  C01F  F017         	movff	home_response@mL,stop@mL
  6542   010E58  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6543   010E5C  C021  F019         	movff	home_response@mR,stop@mR
  6544   010E60  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6545   010E64  EC13  F094         	call	_stop	;wreg free
  6546                           
  6547                           ;colour_identify.c: 289:             turnRight45(mL,mR);
  6548   010E68  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6549   010E6C  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6550   010E70  C021  F019         	movff	home_response@mR,turnRight45@mR
  6551   010E74  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6552   010E78  ECA5  F091         	call	_turnRight45	;wreg free
  6553                           
  6554                           ;colour_identify.c: 290:             stop(mL,mR);
  6555   010E7C  C01F  F017         	movff	home_response@mL,stop@mL
  6556   010E80  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6557   010E84  C021  F019         	movff	home_response@mR,stop@mR
  6558   010E88  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6559   010E8C  EC13  F094         	call	_stop	;wreg free
  6560                           
  6561                           ;colour_identify.c: 291:             turnRight45(mL,mR);
  6562   010E90  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6563   010E94  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6564   010E98  C021  F019         	movff	home_response@mR,turnRight45@mR
  6565   010E9C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6566   010EA0  ECA5  F091         	call	_turnRight45	;wreg free
  6567                           
  6568                           ;colour_identify.c: 292:             stop(mL,mR);
  6569   010EA4  C01F  F017         	movff	home_response@mL,stop@mL
  6570   010EA8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6571   010EAC  C021  F019         	movff	home_response@mR,stop@mR
  6572   010EB0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6573   010EB4  EC13  F094         	call	_stop	;wreg free
  6574                           
  6575                           ;colour_identify.c: 293:             fullSpeedAhead(mL,mR);
  6576   010EB8  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6577   010EBC  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6578   010EC0  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6579   010EC4  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6580   010EC8  EC53  F092         	call	_fullSpeedAhead	;wreg free
  6581   010ECC                     l4305:
  6582                           
  6583                           ;colour_identify.c: 294:             _delay((unsigned long)((1700)*(64000000/4000.0)));
  6584   010ECC  0E8A               	movlw	138
  6585   010ECE  6E24               	movwf	(??_home_response+1)^0,c
  6586   010ED0  0EFD               	movlw	253
  6587   010ED2  6E23               	movwf	??_home_response^0,c
  6588   010ED4  0E4F               	movlw	79
  6589   010ED6                     u2987:
  6590   010ED6  2EE8               	decfsz	wreg,f,c
  6591   010ED8  D7FE               	bra	u2987
  6592   010EDA  2E23               	decfsz	??_home_response^0,f,c
  6593   010EDC  D7FC               	bra	u2987
  6594   010EDE  2E24               	decfsz	(??_home_response+1)^0,f,c
  6595   010EE0  D7FA               	bra	u2987
  6596   010EE2  F000               	nop	
  6597   010EE4                     
  6598                           ;colour_identify.c: 295:             turnRight45(mL,mR);
  6599   010EE4  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6600   010EE8  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6601   010EEC  C021  F019         	movff	home_response@mR,turnRight45@mR
  6602   010EF0  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6603   010EF4  ECA5  F091         	call	_turnRight45	;wreg free
  6604   010EF8                     
  6605                           ;colour_identify.c: 296:             stop(mL,mR);
  6606   010EF8  C01F  F017         	movff	home_response@mL,stop@mL
  6607   010EFC  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6608   010F00  C021  F019         	movff	home_response@mR,stop@mR
  6609   010F04  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6610   010F08  EC13  F094         	call	_stop	;wreg free
  6611   010F0C                     
  6612                           ;colour_identify.c: 297:             turnRight45(mL,mR);
  6613   010F0C  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6614   010F10  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6615   010F14  C021  F019         	movff	home_response@mR,turnRight45@mR
  6616   010F18  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6617   010F1C  ECA5  F091         	call	_turnRight45	;wreg free
  6618   010F20                     
  6619                           ;colour_identify.c: 298:             stop(mL,mR);
  6620   010F20  C01F  F017         	movff	home_response@mL,stop@mL
  6621   010F24  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6622   010F28  C021  F019         	movff	home_response@mR,stop@mR
  6623   010F2C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6624   010F30  EC13  F094         	call	_stop	;wreg free
  6625   010F34                     
  6626                           ;colour_identify.c: 299:             turnRight45(mL,mR);
  6627   010F34  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6628   010F38  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6629   010F3C  C021  F019         	movff	home_response@mR,turnRight45@mR
  6630   010F40  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6631   010F44  ECA5  F091         	call	_turnRight45	;wreg free
  6632   010F48                     
  6633                           ;colour_identify.c: 300:             stop(mL,mR);
  6634   010F48  C01F  F017         	movff	home_response@mL,stop@mL
  6635   010F4C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6636   010F50  C021  F019         	movff	home_response@mR,stop@mR
  6637   010F54  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6638   010F58  EC13  F094         	call	_stop	;wreg free
  6639   010F5C                     
  6640                           ;colour_identify.c: 301:             turnRight45(mL,mR);
  6641   010F5C  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6642   010F60  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6643   010F64  C021  F019         	movff	home_response@mR,turnRight45@mR
  6644   010F68  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6645   010F6C  ECA5  F091         	call	_turnRight45	;wreg free
  6646   010F70                     l4321:
  6647                           
  6648                           ;colour_identify.c: 302:             stop(mL,mR);
  6649   010F70  C01F  F017         	movff	home_response@mL,stop@mL
  6650   010F74  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6651   010F78  C021  F019         	movff	home_response@mR,stop@mR
  6652   010F7C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6653   010F80  EC13  F094         	call	_stop	;wreg free
  6654                           
  6655                           ;colour_identify.c: 303:             break;
  6656   010F84  EFAB  F088         	goto	l407
  6657   010F88                     l4323:
  6658                           
  6659                           ;colour_identify.c: 305:             stop(mL,mR);
  6660   010F88  C01F  F017         	movff	home_response@mL,stop@mL
  6661   010F8C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6662   010F90  C021  F019         	movff	home_response@mR,stop@mR
  6663   010F94  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6664   010F98  EC13  F094         	call	_stop	;wreg free
  6665                           
  6666                           ;colour_identify.c: 306:             turnLeft45(mL,mR);
  6667   010F9C  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6668   010FA0  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6669   010FA4  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6670   010FA8  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6671   010FAC  ECFC  F091         	call	_turnLeft45	;wreg free
  6672                           
  6673                           ;colour_identify.c: 307:             stop(mL,mR);
  6674   010FB0  C01F  F017         	movff	home_response@mL,stop@mL
  6675   010FB4  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6676   010FB8  C021  F019         	movff	home_response@mR,stop@mR
  6677   010FBC  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6678   010FC0  EC13  F094         	call	_stop	;wreg free
  6679                           
  6680                           ;colour_identify.c: 308:             turnLeft45(mL,mR);
  6681   010FC4  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6682   010FC8  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6683   010FCC  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6684   010FD0  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6685   010FD4  ECFC  F091         	call	_turnLeft45	;wreg free
  6686                           
  6687                           ;colour_identify.c: 309:             stop(mL,mR);
  6688   010FD8  C01F  F017         	movff	home_response@mL,stop@mL
  6689   010FDC  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6690   010FE0  C021  F019         	movff	home_response@mR,stop@mR
  6691   010FE4  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6692   010FE8  EC13  F094         	call	_stop	;wreg free
  6693                           
  6694                           ;colour_identify.c: 310:             fullSpeedAhead(mL,mR);
  6695   010FEC  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6696   010FF0  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6697   010FF4  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6698   010FF8  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6699   010FFC  EC53  F092         	call	_fullSpeedAhead	;wreg free
  6700   011000  EF66  F087         	goto	l4305
  6701   011004                     l4343:
  6702                           
  6703                           ;colour_identify.c: 322:             turnLeft45(mL,mR);
  6704   011004  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6705   011008  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6706   01100C  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6707   011010  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6708   011014  ECFC  F091         	call	_turnLeft45	;wreg free
  6709                           
  6710                           ;colour_identify.c: 323:             stop(mL,mR);
  6711   011018  C01F  F017         	movff	home_response@mL,stop@mL
  6712   01101C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6713   011020  C021  F019         	movff	home_response@mR,stop@mR
  6714   011024  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6715   011028  EC13  F094         	call	_stop	;wreg free
  6716                           
  6717                           ;colour_identify.c: 324:             turnLeft45(mL,mR);
  6718   01102C  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6719   011030  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6720   011034  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6721   011038  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6722   01103C  ECFC  F091         	call	_turnLeft45	;wreg free
  6723                           
  6724                           ;colour_identify.c: 325:             stop(mL,mR);
  6725   011040  C01F  F017         	movff	home_response@mL,stop@mL
  6726   011044  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6727   011048  C021  F019         	movff	home_response@mR,stop@mR
  6728   01104C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6729   011050  EC13  F094         	call	_stop	;wreg free
  6730                           
  6731                           ;colour_identify.c: 326:             turnLeft45(mL,mR);
  6732   011054  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6733   011058  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6734   01105C  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6735   011060  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6736   011064  ECFC  F091         	call	_turnLeft45	;wreg free
  6737                           
  6738                           ;colour_identify.c: 327:             stop(mL,mR);
  6739   011068  C01F  F017         	movff	home_response@mL,stop@mL
  6740   01106C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6741   011070  C021  F019         	movff	home_response@mR,stop@mR
  6742   011074  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6743   011078  EC13  F094         	call	_stop	;wreg free
  6744                           
  6745                           ;colour_identify.c: 328:             break;
  6746   01107C  EFAB  F088         	goto	l407
  6747   011080                     l4345:
  6748                           
  6749                           ;colour_identify.c: 330:             turnRight45(mL,mR);
  6750   011080  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6751   011084  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6752   011088  C021  F019         	movff	home_response@mR,turnRight45@mR
  6753   01108C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6754   011090  ECA5  F091         	call	_turnRight45	;wreg free
  6755                           
  6756                           ;colour_identify.c: 331:             stop(mL,mR);
  6757   011094  C01F  F017         	movff	home_response@mL,stop@mL
  6758   011098  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6759   01109C  C021  F019         	movff	home_response@mR,stop@mR
  6760   0110A0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6761   0110A4  EC13  F094         	call	_stop	;wreg free
  6762                           
  6763                           ;colour_identify.c: 332:             turnRight45(mL,mR);
  6764   0110A8  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6765   0110AC  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6766   0110B0  C021  F019         	movff	home_response@mR,turnRight45@mR
  6767   0110B4  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6768   0110B8  ECA5  F091         	call	_turnRight45	;wreg free
  6769                           
  6770                           ;colour_identify.c: 333:             stop(mL,mR);
  6771   0110BC  C01F  F017         	movff	home_response@mL,stop@mL
  6772   0110C0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6773   0110C4  C021  F019         	movff	home_response@mR,stop@mR
  6774   0110C8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6775   0110CC  EC13  F094         	call	_stop	;wreg free
  6776                           
  6777                           ;colour_identify.c: 334:             turnRight45(mL,mR);
  6778   0110D0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6779   0110D4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6780   0110D8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6781   0110DC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6782   0110E0  ECA5  F091         	call	_turnRight45	;wreg free
  6783                           
  6784                           ;colour_identify.c: 335:             stop(mL,mR);
  6785   0110E4  C01F  F017         	movff	home_response@mL,stop@mL
  6786   0110E8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6787   0110EC  C021  F019         	movff	home_response@mR,stop@mR
  6788   0110F0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6789   0110F4  EC13  F094         	call	_stop	;wreg free
  6790                           
  6791                           ;colour_identify.c: 336:             break;
  6792   0110F8  EFAB  F088         	goto	l407
  6793   0110FC                     l4351:
  6794   0110FC  5026               	movf	home_response@card^0,w,c
  6795   0110FE  6E23               	movwf	??_home_response^0,c
  6796   011100  6A24               	clrf	(??_home_response+1)^0,c
  6797                           
  6798                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6799                           ; Switch size 1, requested type "simple"
  6800                           ; Number of cases is 1, Range of values is 0 to 0
  6801                           ; switch strategies available:
  6802                           ; Name         Instructions Cycles
  6803                           ; simple_byte            4     3 (average)
  6804                           ;	Chosen strategy is simple_byte
  6805   011102  5024               	movf	(??_home_response+1)^0,w,c
  6806   011104  0A00               	xorlw	0	; case 0
  6807   011106  B4D8               	btfsc	status,2,c
  6808   011108  EF88  F088         	goto	l5067
  6809   01110C  EFAB  F088         	goto	l407
  6810   011110                     l5067:
  6811                           
  6812                           ; Switch size 1, requested type "simple"
  6813                           ; Number of cases is 8, Range of values is 0 to 7
  6814                           ; switch strategies available:
  6815                           ; Name         Instructions Cycles
  6816                           ; simple_byte           25    13 (average)
  6817                           ;	Chosen strategy is simple_byte
  6818   011110  5023               	movf	??_home_response^0,w,c
  6819   011112  0A00               	xorlw	0	; case 0
  6820   011114  B4D8               	btfsc	status,2,c
  6821   011116  EF84  F086         	goto	l4297
  6822   01111A  0A01               	xorlw	1	; case 1
  6823   01111C  B4D8               	btfsc	status,2,c
  6824   01111E  EFAE  F086         	goto	l4299
  6825   011122  0A03               	xorlw	3	; case 2
  6826   011124  B4D8               	btfsc	status,2,c
  6827   011126  EFD8  F086         	goto	l4301
  6828   01112A  0A01               	xorlw	1	; case 3
  6829   01112C  B4D8               	btfsc	status,2,c
  6830   01112E  EF2A  F087         	goto	l4303
  6831   011132  0A07               	xorlw	7	; case 4
  6832   011134  B4D8               	btfsc	status,2,c
  6833   011136  EFC4  F087         	goto	l4323
  6834   01113A  0A01               	xorlw	1	; case 5
  6835   01113C  B4D8               	btfsc	status,2,c
  6836   01113E  EF02  F088         	goto	l4343
  6837   011142  0A03               	xorlw	3	; case 6
  6838   011144  B4D8               	btfsc	status,2,c
  6839   011146  EF40  F088         	goto	l4345
  6840   01114A  0A01               	xorlw	1	; case 7
  6841   01114C  B4D8               	btfsc	status,2,c
  6842   01114E  EFB8  F087         	goto	l4321
  6843   011152  EFAB  F088         	goto	l407
  6844   011156                     l407:
  6845   011156  0012               	return		;funcret
  6846   011158                     __end_of_home_response:
  6847                           	callstack 0
  6848                           
  6849 ;; *************** function _turnRight45 *****************
  6850 ;; Defined at:
  6851 ;;		line 118 in file "dc_motor.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6854 ;;		 -> main@motorL(9), 
  6855 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6856 ;;		 -> main@motorR(9), 
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  i               2   28[COMRAM] int 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  1    wreg      void 
  6861 ;; Registers used:
  6862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6870 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6871 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6872 ;;Total ram usage:        8 bytes
  6873 ;; Hardware stack levels used: 1
  6874 ;; Hardware stack levels required when called: 3
  6875 ;; This function calls:
  6876 ;;		_setMotorPWM
  6877 ;; This function is called by:
  6878 ;;		_motor_response
  6879 ;;		_home_response
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text25
  6884   01234A                     __ptext25:
  6885                           	callstack 0
  6886   01234A                     _turnRight45:
  6887                           	callstack 25
  6888   01234A                     
  6889                           ;dc_motor.c: 118: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 119: {;dc_mot
      +                          or.c: 120:     mL->direction=1;
  6890   01234A  EE20 F001          	lfsr	2,1
  6891   01234E  5017               	movf	turnRight45@mL^0,w,c
  6892   012350  26D9               	addwf	fsr2l,f,c
  6893   012352  5018               	movf	(turnRight45@mL+1)^0,w,c
  6894   012354  22DA               	addwfc	fsr2h,f,c
  6895   012356  0E01               	movlw	1
  6896   012358  6EDF               	movwf	indf2,c
  6897                           
  6898                           ;dc_motor.c: 121:     mR->direction=0;
  6899   01235A  EE20 F001          	lfsr	2,1
  6900   01235E  5019               	movf	turnRight45@mR^0,w,c
  6901   012360  26D9               	addwf	fsr2l,f,c
  6902   012362  501A               	movf	(turnRight45@mR+1)^0,w,c
  6903   012364  22DA               	addwfc	fsr2h,f,c
  6904   012366  0E00               	movlw	0
  6905   012368  6EDF               	movwf	indf2,c
  6906   01236A                     
  6907                           ;dc_motor.c: 122:     for(int i=0;i<80;i+=10){
  6908   01236A  0E00               	movlw	0
  6909   01236C  6E1E               	movwf	(turnRight45@i+1)^0,c
  6910   01236E  0E00               	movlw	0
  6911   012370  6E1D               	movwf	turnRight45@i^0,c
  6912   012372                     l4171:
  6913                           
  6914                           ;dc_motor.c: 124:         mR->power=i;
  6915   012372  C019  FFD9         	movff	turnRight45@mR,fsr2l
  6916   012376  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  6917   01237A  C01D  FFDF         	movff	turnRight45@i,indf2
  6918                           
  6919                           ;dc_motor.c: 125:         mL->power=i;
  6920   01237E  C017  FFD9         	movff	turnRight45@mL,fsr2l
  6921   012382  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  6922   012386  C01D  FFDF         	movff	turnRight45@i,indf2
  6923   01238A                     
  6924                           ;dc_motor.c: 126:         _delay((unsigned long)((15)*(64000000/4000.0)));
  6925   01238A  0E02               	movlw	2
  6926   01238C  6E1C               	movwf	(??_turnRight45+1)^0,c
  6927   01238E  0E38               	movlw	56
  6928   012390  6E1B               	movwf	??_turnRight45^0,c
  6929   012392  0EAD               	movlw	173
  6930   012394                     u2997:
  6931   012394  2EE8               	decfsz	wreg,f,c
  6932   012396  D7FE               	bra	u2997
  6933   012398  2E1B               	decfsz	??_turnRight45^0,f,c
  6934   01239A  D7FC               	bra	u2997
  6935   01239C  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6936   01239E  D7FA               	bra	u2997
  6937   0123A0  F000               	nop	
  6938   0123A2                     
  6939                           ;dc_motor.c: 127:         setMotorPWM(mL);
  6940   0123A2  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  6941   0123A6  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  6942   0123AA  EC16  F08E         	call	_setMotorPWM	;wreg free
  6943   0123AE                     
  6944                           ;dc_motor.c: 128:         setMotorPWM(mR);}
  6945   0123AE  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  6946   0123B2  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  6947   0123B6  EC16  F08E         	call	_setMotorPWM	;wreg free
  6948   0123BA  0E0A               	movlw	10
  6949   0123BC  261D               	addwf	turnRight45@i^0,f,c
  6950   0123BE  0E00               	movlw	0
  6951   0123C0  221E               	addwfc	(turnRight45@i+1)^0,f,c
  6952   0123C2  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  6953   0123C4  EFED  F091         	goto	u2321
  6954   0123C8  501E               	movf	(turnRight45@i+1)^0,w,c
  6955   0123CA  E109               	bnz	u2320
  6956   0123CC  0E50               	movlw	80
  6957   0123CE  5C1D               	subwf	turnRight45@i^0,w,c
  6958   0123D0  A0D8               	btfss	status,0,c
  6959   0123D2  EFED  F091         	goto	u2321
  6960   0123D6  EFEF  F091         	goto	u2320
  6961   0123DA                     u2321:
  6962   0123DA  EFB9  F091         	goto	l4171
  6963   0123DE                     u2320:
  6964   0123DE                     
  6965                           ;dc_motor.c: 129:     _delay((unsigned long)((75)*(64000000/4000.0)));
  6966   0123DE  0E07               	movlw	7
  6967   0123E0  6E1C               	movwf	(??_turnRight45+1)^0,c
  6968   0123E2  0E17               	movlw	23
  6969   0123E4  6E1B               	movwf	??_turnRight45^0,c
  6970   0123E6  0E6A               	movlw	106
  6971   0123E8                     u3007:
  6972   0123E8  2EE8               	decfsz	wreg,f,c
  6973   0123EA  D7FE               	bra	u3007
  6974   0123EC  2E1B               	decfsz	??_turnRight45^0,f,c
  6975   0123EE  D7FC               	bra	u3007
  6976   0123F0  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6977   0123F2  D7FA               	bra	u3007
  6978   0123F4  D000               	nop2	
  6979   0123F6  0012               	return		;funcret
  6980   0123F8                     __end_of_turnRight45:
  6981                           	callstack 0
  6982                           
  6983 ;; *************** function _turnLeft45 *****************
  6984 ;; Defined at:
  6985 ;;		line 103 in file "dc_motor.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6988 ;;		 -> main@motorL(9), 
  6989 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6990 ;;		 -> main@motorR(9), 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  i               2   28[COMRAM] int 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      void 
  6995 ;; Registers used:
  6996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7005 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7006 ;;Total ram usage:        8 bytes
  7007 ;; Hardware stack levels used: 1
  7008 ;; Hardware stack levels required when called: 3
  7009 ;; This function calls:
  7010 ;;		_setMotorPWM
  7011 ;; This function is called by:
  7012 ;;		_motor_response
  7013 ;;		_home_response
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text26
  7018   0123F8                     __ptext26:
  7019                           	callstack 0
  7020   0123F8                     _turnLeft45:
  7021                           	callstack 25
  7022   0123F8                     
  7023                           ;dc_motor.c: 103: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 104: {;dc_moto
      +                          r.c: 105:     mL->direction=0;
  7024   0123F8  EE20 F001          	lfsr	2,1
  7025   0123FC  5017               	movf	turnLeft45@mL^0,w,c
  7026   0123FE  26D9               	addwf	fsr2l,f,c
  7027   012400  5018               	movf	(turnLeft45@mL+1)^0,w,c
  7028   012402  22DA               	addwfc	fsr2h,f,c
  7029   012404  0E00               	movlw	0
  7030   012406  6EDF               	movwf	indf2,c
  7031                           
  7032                           ;dc_motor.c: 106:     mR->direction=1;
  7033   012408  EE20 F001          	lfsr	2,1
  7034   01240C  5019               	movf	turnLeft45@mR^0,w,c
  7035   01240E  26D9               	addwf	fsr2l,f,c
  7036   012410  501A               	movf	(turnLeft45@mR+1)^0,w,c
  7037   012412  22DA               	addwfc	fsr2h,f,c
  7038   012414  0E01               	movlw	1
  7039   012416  6EDF               	movwf	indf2,c
  7040   012418                     
  7041                           ;dc_motor.c: 107:     for(int i=0;i<80;i+=10){
  7042   012418  0E00               	movlw	0
  7043   01241A  6E1E               	movwf	(turnLeft45@i+1)^0,c
  7044   01241C  0E00               	movlw	0
  7045   01241E  6E1D               	movwf	turnLeft45@i^0,c
  7046   012420                     l4149:
  7047                           
  7048                           ;dc_motor.c: 109:         mR->power=i;
  7049   012420  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  7050   012424  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  7051   012428  C01D  FFDF         	movff	turnLeft45@i,indf2
  7052                           
  7053                           ;dc_motor.c: 110:         mL->power=i;
  7054   01242C  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  7055   012430  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  7056   012434  C01D  FFDF         	movff	turnLeft45@i,indf2
  7057   012438                     
  7058                           ;dc_motor.c: 111:         _delay((unsigned long)((15)*(64000000/4000.0)));
  7059   012438  0E02               	movlw	2
  7060   01243A  6E1C               	movwf	(??_turnLeft45+1)^0,c
  7061   01243C  0E38               	movlw	56
  7062   01243E  6E1B               	movwf	??_turnLeft45^0,c
  7063   012440  0EAD               	movlw	173
  7064   012442                     u3017:
  7065   012442  2EE8               	decfsz	wreg,f,c
  7066   012444  D7FE               	bra	u3017
  7067   012446  2E1B               	decfsz	??_turnLeft45^0,f,c
  7068   012448  D7FC               	bra	u3017
  7069   01244A  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  7070   01244C  D7FA               	bra	u3017
  7071   01244E  F000               	nop	
  7072   012450                     
  7073                           ;dc_motor.c: 112:         setMotorPWM(mL);
  7074   012450  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  7075   012454  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  7076   012458  EC16  F08E         	call	_setMotorPWM	;wreg free
  7077   01245C                     
  7078                           ;dc_motor.c: 113:         setMotorPWM(mR);}
  7079   01245C  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  7080   012460  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  7081   012464  EC16  F08E         	call	_setMotorPWM	;wreg free
  7082   012468  0E0A               	movlw	10
  7083   01246A  261D               	addwf	turnLeft45@i^0,f,c
  7084   01246C  0E00               	movlw	0
  7085   01246E  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  7086   012470  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  7087   012472  EF44  F092         	goto	u2311
  7088   012476  501E               	movf	(turnLeft45@i+1)^0,w,c
  7089   012478  E109               	bnz	u2310
  7090   01247A  0E50               	movlw	80
  7091   01247C  5C1D               	subwf	turnLeft45@i^0,w,c
  7092   01247E  A0D8               	btfss	status,0,c
  7093   012480  EF44  F092         	goto	u2311
  7094   012484  EF46  F092         	goto	u2310
  7095   012488                     u2311:
  7096   012488  EF10  F092         	goto	l4149
  7097   01248C                     u2310:
  7098   01248C                     
  7099                           ;dc_motor.c: 114:     _delay((unsigned long)((75)*(64000000/4000.0)));
  7100   01248C  0E07               	movlw	7
  7101   01248E  6E1C               	movwf	(??_turnLeft45+1)^0,c
  7102   012490  0E17               	movlw	23
  7103   012492  6E1B               	movwf	??_turnLeft45^0,c
  7104   012494  0E6A               	movlw	106
  7105   012496                     u3027:
  7106   012496  2EE8               	decfsz	wreg,f,c
  7107   012498  D7FE               	bra	u3027
  7108   01249A  2E1B               	decfsz	??_turnLeft45^0,f,c
  7109   01249C  D7FC               	bra	u3027
  7110   01249E  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  7111   0124A0  D7FA               	bra	u3027
  7112   0124A2  D000               	nop2	
  7113   0124A4  0012               	return		;funcret
  7114   0124A6                     __end_of_turnLeft45:
  7115                           	callstack 0
  7116                           
  7117 ;; *************** function _stop *****************
  7118 ;; Defined at:
  7119 ;;		line 84 in file "dc_motor.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  7122 ;;		 -> main@motorL(9), 
  7123 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  7124 ;;		 -> main@motorR(9), 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7140 ;;Total ram usage:        5 bytes
  7141 ;; Hardware stack levels used: 1
  7142 ;; Hardware stack levels required when called: 3
  7143 ;; This function calls:
  7144 ;;		_setMotorPWM
  7145 ;; This function is called by:
  7146 ;;		_main
  7147 ;;		_motor_response
  7148 ;;		_home_response
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text27
  7153   012826                     __ptext27:
  7154                           	callstack 0
  7155   012826                     _stop:
  7156                           	callstack 27
  7157   012826                     
  7158                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  7159   012826  EF34  F094         	goto	l4139
  7160   01282A                     l4131:
  7161                           
  7162                           ;dc_motor.c: 87:         mL->power -=10;
  7163   01282A  C017  FFD9         	movff	stop@mL,fsr2l
  7164   01282E  C018  FFDA         	movff	stop@mL+1,fsr2h
  7165   012832  0E0A               	movlw	10
  7166   012834  5EDF               	subwf	indf2,f,c
  7167                           
  7168                           ;dc_motor.c: 88:         mR->power -=10;
  7169   012836  C019  FFD9         	movff	stop@mR,fsr2l
  7170   01283A  C01A  FFDA         	movff	stop@mR+1,fsr2h
  7171   01283E  0E0A               	movlw	10
  7172   012840  5EDF               	subwf	indf2,f,c
  7173   012842                     
  7174                           ;dc_motor.c: 89:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7175   012842  0E2A               	movlw	42
  7176   012844  6E1B               	movwf	??_stop^0,c
  7177   012846  0E8E               	movlw	142
  7178   012848                     u3037:
  7179   012848  2EE8               	decfsz	wreg,f,c
  7180   01284A  D7FE               	bra	u3037
  7181   01284C  2E1B               	decfsz	??_stop^0,f,c
  7182   01284E  D7FC               	bra	u3037
  7183   012850                     
  7184                           ;dc_motor.c: 90:         setMotorPWM(mL);
  7185   012850  C017  F011         	movff	stop@mL,setMotorPWM@m
  7186   012854  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  7187   012858  EC16  F08E         	call	_setMotorPWM	;wreg free
  7188   01285C                     
  7189                           ;dc_motor.c: 91:         setMotorPWM(mR);
  7190   01285C  C019  F011         	movff	stop@mR,setMotorPWM@m
  7191   012860  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  7192   012864  EC16  F08E         	call	_setMotorPWM	;wreg free
  7193   012868                     l4139:
  7194                           
  7195                           ;dc_motor.c: 86:     while(mL->power !=0){
  7196   012868  C017  FFD9         	movff	stop@mL,fsr2l
  7197   01286C  C018  FFDA         	movff	stop@mL+1,fsr2h
  7198   012870  50DF               	movf	indf2,w,c
  7199   012872  A4D8               	btfss	status,2,c
  7200   012874  EF3E  F094         	goto	u2301
  7201   012878  EF40  F094         	goto	u2300
  7202   01287C                     u2301:
  7203   01287C  EF15  F094         	goto	l4131
  7204   012880                     u2300:
  7205   012880  0012               	return		;funcret
  7206   012882                     __end_of_stop:
  7207                           	callstack 0
  7208                           
  7209 ;; *************** function _fullSpeedAhead *****************
  7210 ;; Defined at:
  7211 ;;		line 133 in file "dc_motor.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  7214 ;;		 -> main@motorL(9), 
  7215 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  7216 ;;		 -> main@motorR(9), 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  i               2   27[COMRAM] int 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      void 
  7221 ;; Registers used:
  7222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;Total ram usage:        7 bytes
  7233 ;; Hardware stack levels used: 1
  7234 ;; Hardware stack levels required when called: 3
  7235 ;; This function calls:
  7236 ;;		_setMotorPWM
  7237 ;; This function is called by:
  7238 ;;		_main
  7239 ;;		_motor_response
  7240 ;;		_home_response
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           	psect	text28
  7245   0124A6                     __ptext28:
  7246                           	callstack 0
  7247   0124A6                     _fullSpeedAhead:
  7248                           	callstack 27
  7249   0124A6                     
  7250                           ;dc_motor.c: 133: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 134: {;dc_
      +                          motor.c: 135:     mL->direction=1;
  7251   0124A6  EE20 F001          	lfsr	2,1
  7252   0124AA  5017               	movf	fullSpeedAhead@mL^0,w,c
  7253   0124AC  26D9               	addwf	fsr2l,f,c
  7254   0124AE  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7255   0124B0  22DA               	addwfc	fsr2h,f,c
  7256   0124B2  0E01               	movlw	1
  7257   0124B4  6EDF               	movwf	indf2,c
  7258                           
  7259                           ;dc_motor.c: 136:     mR->direction=1;
  7260   0124B6  EE20 F001          	lfsr	2,1
  7261   0124BA  5019               	movf	fullSpeedAhead@mR^0,w,c
  7262   0124BC  26D9               	addwf	fsr2l,f,c
  7263   0124BE  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7264   0124C0  22DA               	addwfc	fsr2h,f,c
  7265   0124C2  0E01               	movlw	1
  7266   0124C4  6EDF               	movwf	indf2,c
  7267   0124C6                     
  7268                           ;dc_motor.c: 137:     for(int i=0;i<40;i+=10){
  7269   0124C6  0E00               	movlw	0
  7270   0124C8  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  7271   0124CA  0E00               	movlw	0
  7272   0124CC  6E1C               	movwf	fullSpeedAhead@i^0,c
  7273   0124CE                     l4193:
  7274                           
  7275                           ;dc_motor.c: 138:         mL->power=i;
  7276   0124CE  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7277   0124D2  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7278   0124D6  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7279                           
  7280                           ;dc_motor.c: 139:         mR->power=i;
  7281   0124DA  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  7282   0124DE  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  7283   0124E2  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7284   0124E6                     
  7285                           ;dc_motor.c: 140:         setMotorPWM(mL);
  7286   0124E6  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7287   0124EA  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  7288   0124EE  EC16  F08E         	call	_setMotorPWM	;wreg free
  7289   0124F2                     
  7290                           ;dc_motor.c: 141:         setMotorPWM(mR);
  7291   0124F2  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7292   0124F6  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  7293   0124FA  EC16  F08E         	call	_setMotorPWM	;wreg free
  7294   0124FE                     
  7295                           ;dc_motor.c: 142:         _delay((unsigned long)((10)*(64000000/4000.0)));
  7296   0124FE  0ED0               	movlw	208
  7297   012500  6E1B               	movwf	??_fullSpeedAhead^0,c
  7298   012502  0ECA               	movlw	202
  7299   012504                     u3047:
  7300   012504  2EE8               	decfsz	wreg,f,c
  7301   012506  D7FE               	bra	u3047
  7302   012508  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7303   01250A  D7FC               	bra	u3047
  7304   01250C                     
  7305                           ;dc_motor.c: 143:     }
  7306   01250C  0E0A               	movlw	10
  7307   01250E  261C               	addwf	fullSpeedAhead@i^0,f,c
  7308   012510  0E00               	movlw	0
  7309   012512  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  7310   012514  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  7311   012516  EF96  F092         	goto	u2331
  7312   01251A  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  7313   01251C  E109               	bnz	u2330
  7314   01251E  0E28               	movlw	40
  7315   012520  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  7316   012522  A0D8               	btfss	status,0,c
  7317   012524  EF96  F092         	goto	u2331
  7318   012528  EF98  F092         	goto	u2330
  7319   01252C                     u2331:
  7320   01252C  EF67  F092         	goto	l4193
  7321   012530                     u2330:
  7322   012530                     
  7323                           ;dc_motor.c: 144:     _delay((unsigned long)((10)*(64000000/4000.0)));
  7324   012530  0ED0               	movlw	208
  7325   012532  6E1B               	movwf	??_fullSpeedAhead^0,c
  7326   012534  0ECA               	movlw	202
  7327   012536                     u3057:
  7328   012536  2EE8               	decfsz	wreg,f,c
  7329   012538  D7FE               	bra	u3057
  7330   01253A  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7331   01253C  D7FC               	bra	u3057
  7332   01253E  0012               	return		;funcret
  7333   012540                     __end_of_fullSpeedAhead:
  7334                           	callstack 0
  7335                           
  7336 ;; *************** function _setMotorPWM *****************
  7337 ;; Defined at:
  7338 ;;		line 61 in file "dc_motor.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  m               2   16[COMRAM] PTR struct DC_motor
  7341 ;;		 -> main@motorR(9), main@motorL(9), 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  negDuty         1   21[COMRAM] unsigned char 
  7344 ;;  posDuty         1   20[COMRAM] unsigned char 
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7358 ;;Total ram usage:        6 bytes
  7359 ;; Hardware stack levels used: 1
  7360 ;; Hardware stack levels required when called: 2
  7361 ;; This function calls:
  7362 ;;		___lwdiv
  7363 ;;		___wmul
  7364 ;; This function is called by:
  7365 ;;		_stop
  7366 ;;		_turnLeft45
  7367 ;;		_turnRight45
  7368 ;;		_fullSpeedAhead
  7369 ;;		_reverseFullSpeed
  7370 ;;		_main
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text29
  7375   011C2C                     __ptext29:
  7376                           	callstack 0
  7377   011C2C                     _setMotorPWM:
  7378                           	callstack 27
  7379   011C2C                     
  7380                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  7381   011C2C  EE20 F002          	lfsr	2,2
  7382   011C30  5011               	movf	setMotorPWM@m^0,w,c
  7383   011C32  26D9               	addwf	fsr2l,f,c
  7384   011C34  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7385   011C36  22DA               	addwfc	fsr2h,f,c
  7386   011C38  50DF               	movf	indf2,w,c
  7387   011C3A  B4D8               	btfsc	status,2,c
  7388   011C3C  EF22  F08E         	goto	u2211
  7389   011C40  EF24  F08E         	goto	u2210
  7390   011C44                     u2211:
  7391   011C44  EF58  F08E         	goto	l4055
  7392   011C48                     u2210:
  7393   011C48                     
  7394                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  7395   011C48  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7396   011C4C  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7397   011C50  50DF               	movf	indf2,w,c
  7398   011C52  6E13               	movwf	??_setMotorPWM^0,c
  7399   011C54  5013               	movf	??_setMotorPWM^0,w,c
  7400   011C56  6E04               	movwf	___wmul@multiplier^0,c
  7401   011C58  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7402   011C5A  EE20 F003          	lfsr	2,3
  7403   011C5E  5011               	movf	setMotorPWM@m^0,w,c
  7404   011C60  26D9               	addwf	fsr2l,f,c
  7405   011C62  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7406   011C64  22DA               	addwfc	fsr2h,f,c
  7407   011C66  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7408   011C6A  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7409   011C6E  EC40  F096         	call	___wmul	;wreg free
  7410   011C72  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7411   011C76  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7412   011C7A  0E00               	movlw	0
  7413   011C7C  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7414   011C7E  0E64               	movlw	100
  7415   011C80  6E0C               	movwf	___lwdiv@divisor^0,c
  7416   011C82  ECA7  F093         	call	___lwdiv	;wreg free
  7417   011C86  EE20 F003          	lfsr	2,3
  7418   011C8A  5011               	movf	setMotorPWM@m^0,w,c
  7419   011C8C  26D9               	addwf	fsr2l,f,c
  7420   011C8E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7421   011C90  22DA               	addwfc	fsr2h,f,c
  7422   011C92  50DF               	movf	indf2,w,c
  7423   011C94  6E14               	movwf	(??_setMotorPWM+1)^0,c
  7424   011C96  500A               	movf	?___lwdiv^0,w,c
  7425   011C98  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  7426   011C9A  6E15               	movwf	setMotorPWM@posDuty^0,c
  7427   011C9C                     
  7428                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  7429   011C9C  EE20 F003          	lfsr	2,3
  7430   011CA0  5011               	movf	setMotorPWM@m^0,w,c
  7431   011CA2  26D9               	addwf	fsr2l,f,c
  7432   011CA4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7433   011CA6  22DA               	addwfc	fsr2h,f,c
  7434   011CA8  50DF               	movf	indf2,w,c
  7435   011CAA  6E16               	movwf	setMotorPWM@negDuty^0,c
  7436                           
  7437                           ;dc_motor.c: 68:     }
  7438   011CAC  EF7B  F08E         	goto	l4059
  7439   011CB0                     l4055:
  7440                           
  7441                           ;dc_motor.c: 70:         posDuty=0;
  7442   011CB0  0E00               	movlw	0
  7443   011CB2  6E15               	movwf	setMotorPWM@posDuty^0,c
  7444   011CB4                     
  7445                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7446   011CB4  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7447   011CB8  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7448   011CBC  50DF               	movf	indf2,w,c
  7449   011CBE  6E13               	movwf	??_setMotorPWM^0,c
  7450   011CC0  5013               	movf	??_setMotorPWM^0,w,c
  7451   011CC2  6E04               	movwf	___wmul@multiplier^0,c
  7452   011CC4  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7453   011CC6  EE20 F003          	lfsr	2,3
  7454   011CCA  5011               	movf	setMotorPWM@m^0,w,c
  7455   011CCC  26D9               	addwf	fsr2l,f,c
  7456   011CCE  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7457   011CD0  22DA               	addwfc	fsr2h,f,c
  7458   011CD2  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7459   011CD6  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7460   011CDA  EC40  F096         	call	___wmul	;wreg free
  7461   011CDE  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7462   011CE2  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7463   011CE6  0E00               	movlw	0
  7464   011CE8  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7465   011CEA  0E64               	movlw	100
  7466   011CEC  6E0C               	movwf	___lwdiv@divisor^0,c
  7467   011CEE  ECA7  F093         	call	___lwdiv	;wreg free
  7468   011CF2  500A               	movf	?___lwdiv^0,w,c
  7469   011CF4  6E16               	movwf	setMotorPWM@negDuty^0,c
  7470   011CF6                     l4059:
  7471                           
  7472                           ;dc_motor.c: 74:     if (m->direction) {
  7473   011CF6  EE20 F001          	lfsr	2,1
  7474   011CFA  5011               	movf	setMotorPWM@m^0,w,c
  7475   011CFC  26D9               	addwf	fsr2l,f,c
  7476   011CFE  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7477   011D00  22DA               	addwfc	fsr2h,f,c
  7478   011D02  50DF               	movf	indf2,w,c
  7479   011D04  B4D8               	btfsc	status,2,c
  7480   011D06  EF87  F08E         	goto	u2221
  7481   011D0A  EF89  F08E         	goto	u2220
  7482   011D0E                     u2221:
  7483   011D0E  EFAB  F08E         	goto	l4063
  7484   011D12                     u2220:
  7485   011D12                     
  7486                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  7487   011D12  EE20 F005          	lfsr	2,5
  7488   011D16  5011               	movf	setMotorPWM@m^0,w,c
  7489   011D18  26D9               	addwf	fsr2l,f,c
  7490   011D1A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7491   011D1C  22DA               	addwfc	fsr2h,f,c
  7492   011D1E  CFDE F013          	movff	postinc2,??_setMotorPWM
  7493   011D22  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7494   011D26  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7495   011D2A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7496   011D2E  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7497                           
  7498                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  7499   011D32  EE20 F007          	lfsr	2,7
  7500   011D36  5011               	movf	setMotorPWM@m^0,w,c
  7501   011D38  26D9               	addwf	fsr2l,f,c
  7502   011D3A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7503   011D3C  22DA               	addwfc	fsr2h,f,c
  7504   011D3E  CFDE F013          	movff	postinc2,??_setMotorPWM
  7505   011D42  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7506   011D46  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7507   011D4A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7508   011D4E  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7509                           
  7510                           ;dc_motor.c: 77:     } else {
  7511   011D52  EFCB  F08E         	goto	l86
  7512   011D56                     l4063:
  7513                           
  7514                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  7515   011D56  EE20 F005          	lfsr	2,5
  7516   011D5A  5011               	movf	setMotorPWM@m^0,w,c
  7517   011D5C  26D9               	addwf	fsr2l,f,c
  7518   011D5E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7519   011D60  22DA               	addwfc	fsr2h,f,c
  7520   011D62  CFDE F013          	movff	postinc2,??_setMotorPWM
  7521   011D66  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7522   011D6A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7523   011D6E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7524   011D72  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7525                           
  7526                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  7527   011D76  EE20 F007          	lfsr	2,7
  7528   011D7A  5011               	movf	setMotorPWM@m^0,w,c
  7529   011D7C  26D9               	addwf	fsr2l,f,c
  7530   011D7E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7531   011D80  22DA               	addwfc	fsr2h,f,c
  7532   011D82  CFDE F013          	movff	postinc2,??_setMotorPWM
  7533   011D86  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7534   011D8A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7535   011D8E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7536   011D92  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7537   011D96                     l86:
  7538   011D96  0012               	return		;funcret
  7539   011D98                     __end_of_setMotorPWM:
  7540                           	callstack 0
  7541                           
  7542 ;; *************** function ___wmul *****************
  7543 ;; Defined at:
  7544 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  multiplier      2    3[COMRAM] unsigned int 
  7547 ;;  multiplicand    2    5[COMRAM] unsigned int 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  product         2    7[COMRAM] unsigned int 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  2    3[COMRAM] unsigned int 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0, prodl, prodh
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7562 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7563 ;;Total ram usage:        6 bytes
  7564 ;; Hardware stack levels used: 1
  7565 ;; Hardware stack levels required when called: 1
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_setMotorPWM
  7570 ;;		_normalise_readings
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text30
  7575   012C80                     __ptext30:
  7576                           	callstack 0
  7577   012C80                     ___wmul:
  7578                           	callstack 27
  7579   012C80  5004               	movf	___wmul@multiplier^0,w,c
  7580   012C82  0206               	mulwf	___wmul@multiplicand^0,c
  7581   012C84  CFF3 F008          	movff	prodl,___wmul@product
  7582   012C88  CFF4 F009          	movff	prodh,___wmul@product+1
  7583   012C8C  5004               	movf	___wmul@multiplier^0,w,c
  7584   012C8E  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  7585   012C90  50F3               	movf	243,w,c
  7586   012C92  2609               	addwf	(___wmul@product+1)^0,f,c
  7587   012C94  5005               	movf	(___wmul@multiplier+1)^0,w,c
  7588   012C96  0206               	mulwf	___wmul@multiplicand^0,c
  7589   012C98  50F3               	movf	243,w,c
  7590   012C9A  2609               	addwf	(___wmul@product+1)^0,f,c
  7591   012C9C  C008  F004         	movff	___wmul@product,?___wmul
  7592   012CA0  C009  F005         	movff	___wmul@product+1,?___wmul+1
  7593   012CA4  0012               	return		;funcret
  7594   012CA6                     __end_of___wmul:
  7595                           	callstack 0
  7596                           
  7597 ;; *************** function ___lwdiv *****************
  7598 ;; Defined at:
  7599 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  dividend        2    9[COMRAM] unsigned int 
  7602 ;;  divisor         2   11[COMRAM] unsigned int 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  quotient        2   14[COMRAM] unsigned int 
  7605 ;;  counter         1   13[COMRAM] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  2    9[COMRAM] unsigned int 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7615 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7616 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7618 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7619 ;;Total ram usage:        7 bytes
  7620 ;; Hardware stack levels used: 1
  7621 ;; Hardware stack levels required when called: 1
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_setMotorPWM
  7626 ;;		_normalise_readings
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text31
  7631   01274E                     __ptext31:
  7632                           	callstack 0
  7633   01274E                     ___lwdiv:
  7634                           	callstack 27
  7635   01274E  0E00               	movlw	0
  7636   012750  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  7637   012752  0E00               	movlw	0
  7638   012754  6E0F               	movwf	___lwdiv@quotient^0,c
  7639   012756  500C               	movf	___lwdiv@divisor^0,w,c
  7640   012758  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7641   01275A  B4D8               	btfsc	status,2,c
  7642   01275C  EFB2  F093         	goto	u2081
  7643   012760  EFB4  F093         	goto	u2080
  7644   012764                     u2081:
  7645   012764  EFDC  F093         	goto	l1024
  7646   012768                     u2080:
  7647   012768  0E01               	movlw	1
  7648   01276A  6E0E               	movwf	___lwdiv@counter^0,c
  7649   01276C  EFBC  F093         	goto	l3983
  7650   012770                     l3981:
  7651   012770  90D8               	bcf	status,0,c
  7652   012772  360C               	rlcf	___lwdiv@divisor^0,f,c
  7653   012774  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7654   012776  2A0E               	incf	___lwdiv@counter^0,f,c
  7655   012778                     l3983:
  7656   012778  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7657   01277A  EFC1  F093         	goto	u2091
  7658   01277E  EFC3  F093         	goto	u2090
  7659   012782                     u2091:
  7660   012782  EFB8  F093         	goto	l3981
  7661   012786                     u2090:
  7662   012786                     l3985:
  7663   012786  90D8               	bcf	status,0,c
  7664   012788  360F               	rlcf	___lwdiv@quotient^0,f,c
  7665   01278A  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7666   01278C  500C               	movf	___lwdiv@divisor^0,w,c
  7667   01278E  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7668   012790  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7669   012792  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7670   012794  A0D8               	btfss	status,0,c
  7671   012796  EFCF  F093         	goto	u2101
  7672   01279A  EFD1  F093         	goto	u2100
  7673   01279E                     u2101:
  7674   01279E  EFD6  F093         	goto	l3993
  7675   0127A2                     u2100:
  7676   0127A2  500C               	movf	___lwdiv@divisor^0,w,c
  7677   0127A4  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7678   0127A6  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7679   0127A8  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7680   0127AA  800F               	bsf	___lwdiv@quotient^0,0,c
  7681   0127AC                     l3993:
  7682   0127AC  90D8               	bcf	status,0,c
  7683   0127AE  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7684   0127B0  320C               	rrcf	___lwdiv@divisor^0,f,c
  7685   0127B2  2E0E               	decfsz	___lwdiv@counter^0,f,c
  7686   0127B4  EFC3  F093         	goto	l3985
  7687   0127B8                     l1024:
  7688   0127B8  C00F  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7689   0127BC  C010  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7690   0127C0  0012               	return		;funcret
  7691   0127C2                     __end_of___lwdiv:
  7692                           	callstack 0
  7693                           
  7694 ;; *************** function _make_master_closeness *****************
  7695 ;; Defined at:
  7696 ;;		line 101 in file "colour_identify.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;  buf             2    3[COMRAM] PTR unsigned char 
  7699 ;;		 -> main@buf(150), 
  7700 ;;  normalised_v    2    5[COMRAM] PTR unsigned int [9]
  7701 ;;		 -> card_response@normalised_values(72), 
  7702 ;;  master_close    2    7[COMRAM] PTR unsigned int 
  7703 ;;		 -> card_response@master_closeness(18), 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  i               1   39[COMRAM] enum E14551
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7715 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7717 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7718 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7719 ;;Total ram usage:       37 bytes
  7720 ;; Hardware stack levels used: 1
  7721 ;; Hardware stack levels required when called: 1
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_card_response
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text32
  7730   012174                     __ptext32:
  7731                           	callstack 0
  7732   012174                     _make_master_closeness:
  7733                           	callstack 28
  7734   012174                     
  7735                           ;colour_identify.c: 102:     for(colour i = RED; i<=BLACK; i++){
  7736   012174  0E00               	movlw	0
  7737   012176  6E28               	movwf	make_master_closeness@i^0,c
  7738   012178                     l4465:
  7739                           
  7740                           ;colour_identify.c: 104:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i] + normalised_values[3][i])/4;
  7741   012178  5028               	movf	make_master_closeness@i^0,w,c
  7742   01217A  0D02               	mullw	2
  7743   01217C  CFF3 F00A          	movff	prodl,??_make_master_closeness
  7744   012180  CFF4 F00B          	movff	prodh,??_make_master_closeness+1
  7745   012184  500A               	movf	??_make_master_closeness^0,w,c
  7746   012186  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7747   012188  6E0C               	movwf	(??_make_master_closeness+2)^0,c
  7748   01218A  500B               	movf	(??_make_master_closeness+1)^0,w,c
  7749   01218C  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7750   01218E  6E0D               	movwf	(??_make_master_closeness+3)^0,c
  7751   012190  0E36               	movlw	54
  7752   012192  240C               	addwf	(??_make_master_closeness+2)^0,w,c
  7753   012194  6ED9               	movwf	fsr2l,c
  7754   012196  0E00               	movlw	0
  7755   012198  200D               	addwfc	(??_make_master_closeness+3)^0,w,c
  7756   01219A  6EDA               	movwf	fsr2h,c
  7757   01219C  CFDE F00E          	movff	postinc2,??_make_master_closeness+4
  7758   0121A0  CFDD F00F          	movff	postdec2,??_make_master_closeness+5
  7759   0121A4  5028               	movf	make_master_closeness@i^0,w,c
  7760   0121A6  0D02               	mullw	2
  7761   0121A8  CFF3 F010          	movff	prodl,??_make_master_closeness+6
  7762   0121AC  CFF4 F011          	movff	prodh,??_make_master_closeness+7
  7763   0121B0  5010               	movf	(??_make_master_closeness+6)^0,w,c
  7764   0121B2  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7765   0121B4  6E12               	movwf	(??_make_master_closeness+8)^0,c
  7766   0121B6  5011               	movf	(??_make_master_closeness+7)^0,w,c
  7767   0121B8  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7768   0121BA  6E13               	movwf	(??_make_master_closeness+9)^0,c
  7769   0121BC  0E24               	movlw	36
  7770   0121BE  2412               	addwf	(??_make_master_closeness+8)^0,w,c
  7771   0121C0  6ED9               	movwf	fsr2l,c
  7772   0121C2  0E00               	movlw	0
  7773   0121C4  2013               	addwfc	(??_make_master_closeness+9)^0,w,c
  7774   0121C6  6EDA               	movwf	fsr2h,c
  7775   0121C8  CFDE F014          	movff	postinc2,??_make_master_closeness+10
  7776   0121CC  CFDD F015          	movff	postdec2,??_make_master_closeness+11
  7777   0121D0  5028               	movf	make_master_closeness@i^0,w,c
  7778   0121D2  0D02               	mullw	2
  7779   0121D4  CFF3 F016          	movff	prodl,??_make_master_closeness+12
  7780   0121D8  CFF4 F017          	movff	prodh,??_make_master_closeness+13
  7781   0121DC  5016               	movf	(??_make_master_closeness+12)^0,w,c
  7782   0121DE  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7783   0121E0  6E18               	movwf	(??_make_master_closeness+14)^0,c
  7784   0121E2  5017               	movf	(??_make_master_closeness+13)^0,w,c
  7785   0121E4  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7786   0121E6  6E19               	movwf	(??_make_master_closeness+15)^0,c
  7787   0121E8  0E12               	movlw	18
  7788   0121EA  2418               	addwf	(??_make_master_closeness+14)^0,w,c
  7789   0121EC  6ED9               	movwf	fsr2l,c
  7790   0121EE  0E00               	movlw	0
  7791   0121F0  2019               	addwfc	(??_make_master_closeness+15)^0,w,c
  7792   0121F2  6EDA               	movwf	fsr2h,c
  7793   0121F4  CFDE F01A          	movff	postinc2,??_make_master_closeness+16
  7794   0121F8  CFDD F01B          	movff	postdec2,??_make_master_closeness+17
  7795   0121FC  5028               	movf	make_master_closeness@i^0,w,c
  7796   0121FE  0D02               	mullw	2
  7797   012200  CFF3 F01C          	movff	prodl,??_make_master_closeness+18
  7798   012204  CFF4 F01D          	movff	prodh,??_make_master_closeness+19
  7799   012208  501C               	movf	(??_make_master_closeness+18)^0,w,c
  7800   01220A  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7801   01220C  6ED9               	movwf	fsr2l,c
  7802   01220E  501D               	movf	(??_make_master_closeness+19)^0,w,c
  7803   012210  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7804   012212  6EDA               	movwf	fsr2h,c
  7805   012214  CFDE F01E          	movff	postinc2,??_make_master_closeness+20
  7806   012218  CFDD F01F          	movff	postdec2,??_make_master_closeness+21
  7807   01221C  501A               	movf	(??_make_master_closeness+16)^0,w,c
  7808   01221E  241E               	addwf	(??_make_master_closeness+20)^0,w,c
  7809   012220  6E20               	movwf	(??_make_master_closeness+22)^0,c
  7810   012222  501B               	movf	(??_make_master_closeness+17)^0,w,c
  7811   012224  201F               	addwfc	(??_make_master_closeness+21)^0,w,c
  7812   012226  6E21               	movwf	(??_make_master_closeness+23)^0,c
  7813   012228  5014               	movf	(??_make_master_closeness+10)^0,w,c
  7814   01222A  2420               	addwf	(??_make_master_closeness+22)^0,w,c
  7815   01222C  6E22               	movwf	(??_make_master_closeness+24)^0,c
  7816   01222E  5015               	movf	(??_make_master_closeness+11)^0,w,c
  7817   012230  2021               	addwfc	(??_make_master_closeness+23)^0,w,c
  7818   012232  6E23               	movwf	(??_make_master_closeness+25)^0,c
  7819   012234  500E               	movf	(??_make_master_closeness+4)^0,w,c
  7820   012236  2422               	addwf	(??_make_master_closeness+24)^0,w,c
  7821   012238  6E24               	movwf	(??_make_master_closeness+26)^0,c
  7822   01223A  500F               	movf	(??_make_master_closeness+5)^0,w,c
  7823   01223C  2023               	addwfc	(??_make_master_closeness+25)^0,w,c
  7824   01223E  6E25               	movwf	(??_make_master_closeness+27)^0,c
  7825   012240  90D8               	bcf	status,0,c
  7826   012242  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7827   012244  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7828   012246  90D8               	bcf	status,0,c
  7829   012248  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7830   01224A  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7831   01224C  5028               	movf	make_master_closeness@i^0,w,c
  7832   01224E  0D02               	mullw	2
  7833   012250  CFF3 F026          	movff	prodl,??_make_master_closeness+28
  7834   012254  CFF4 F027          	movff	prodh,??_make_master_closeness+29
  7835   012258  5026               	movf	(??_make_master_closeness+28)^0,w,c
  7836   01225A  2408               	addwf	make_master_closeness@master_closeness^0,w,c
  7837   01225C  6ED9               	movwf	fsr2l,c
  7838   01225E  5027               	movf	(??_make_master_closeness+29)^0,w,c
  7839   012260  2009               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  7840   012262  6EDA               	movwf	fsr2h,c
  7841   012264  C024  FFDE         	movff	??_make_master_closeness+26,postinc2
  7842   012268  C025  FFDD         	movff	??_make_master_closeness+27,postdec2
  7843   01226C                     
  7844                           ;colour_identify.c: 109:     }
  7845   01226C  2A28               	incf	make_master_closeness@i^0,f,c
  7846   01226E  0E08               	movlw	8
  7847   012270  6428               	cpfsgt	make_master_closeness@i^0,c
  7848   012272  EF3D  F091         	goto	u2451
  7849   012276  EF3F  F091         	goto	u2450
  7850   01227A                     u2451:
  7851   01227A  EFBC  F090         	goto	l4465
  7852   01227E                     u2450:
  7853   01227E  0012               	return		;funcret
  7854   012280                     __end_of_make_master_closeness:
  7855                           	callstack 0
  7856                           
  7857 ;; *************** function _determine_card *****************
  7858 ;; Defined at:
  7859 ;;		line 112 in file "colour_identify.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  7862 ;;		 -> card_response@master_closeness(18), 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  i               1   12[COMRAM] enum E14551
  7865 ;;  current_smal    2    9[COMRAM] unsigned int 
  7866 ;;  predicted_co    1   11[COMRAM] enum E14551
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      enum E14551
  7869 ;; Registers used:
  7870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7877 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7878 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7879 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7880 ;;Total ram usage:       10 bytes
  7881 ;; Hardware stack levels used: 1
  7882 ;; Hardware stack levels required when called: 1
  7883 ;; This function calls:
  7884 ;;		Nothing
  7885 ;; This function is called by:
  7886 ;;		_card_response
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text33
  7891   012654                     __ptext33:
  7892                           	callstack 0
  7893   012654                     _determine_card:
  7894                           	callstack 28
  7895   012654                     
  7896                           ;colour_identify.c: 114:     colour predicted_colour = RED;
  7897   012654  0E00               	movlw	0
  7898   012656  6E0C               	movwf	determine_card@predicted_colour^0,c
  7899   012658                     
  7900                           ;colour_identify.c: 115:     unsigned int current_smallest = master_closeness[RED];
  7901   012658  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  7902   01265C  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  7903   012660  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7904   012664  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7905   012668                     
  7906                           ;colour_identify.c: 116:     for(colour i = GREEN; i<=BLACK; i++){
  7907   012668  0E01               	movlw	1
  7908   01266A  6E0D               	movwf	determine_card@i^0,c
  7909   01266C                     l4481:
  7910                           
  7911                           ;colour_identify.c: 117:         if(master_closeness[i] < current_smallest){
  7912   01266C  500D               	movf	determine_card@i^0,w,c
  7913   01266E  0D02               	mullw	2
  7914   012670  CFF3 F006          	movff	prodl,??_determine_card
  7915   012674  CFF4 F007          	movff	prodh,??_determine_card+1
  7916   012678  5006               	movf	??_determine_card^0,w,c
  7917   01267A  2404               	addwf	determine_card@master_closeness^0,w,c
  7918   01267C  6ED9               	movwf	fsr2l,c
  7919   01267E  5007               	movf	(??_determine_card+1)^0,w,c
  7920   012680  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7921   012682  6EDA               	movwf	fsr2h,c
  7922   012684  500A               	movf	determine_card@current_smallest^0,w,c
  7923   012686  5CDE               	subwf	postinc2,w,c
  7924   012688  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  7925   01268A  58DE               	subwfb	postinc2,w,c
  7926   01268C  B0D8               	btfsc	status,0,c
  7927   01268E  EF4B  F093         	goto	u2461
  7928   012692  EF4D  F093         	goto	u2460
  7929   012696                     u2461:
  7930   012696  EF5F  F093         	goto	l4487
  7931   01269A                     u2460:
  7932   01269A                     
  7933                           ;colour_identify.c: 118:             current_smallest = master_closeness[i];
  7934   01269A  500D               	movf	determine_card@i^0,w,c
  7935   01269C  0D02               	mullw	2
  7936   01269E  CFF3 F006          	movff	prodl,??_determine_card
  7937   0126A2  CFF4 F007          	movff	prodh,??_determine_card+1
  7938   0126A6  5006               	movf	??_determine_card^0,w,c
  7939   0126A8  2404               	addwf	determine_card@master_closeness^0,w,c
  7940   0126AA  6ED9               	movwf	fsr2l,c
  7941   0126AC  5007               	movf	(??_determine_card+1)^0,w,c
  7942   0126AE  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7943   0126B0  6EDA               	movwf	fsr2h,c
  7944   0126B2  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7945   0126B6  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7946   0126BA                     
  7947                           ;colour_identify.c: 119:             predicted_colour = i;
  7948   0126BA  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  7949   0126BE                     l4487:
  7950                           
  7951                           ;colour_identify.c: 121:     }
  7952   0126BE  2A0D               	incf	determine_card@i^0,f,c
  7953   0126C0  0E08               	movlw	8
  7954   0126C2  640D               	cpfsgt	determine_card@i^0,c
  7955   0126C4  EF66  F093         	goto	u2471
  7956   0126C8  EF68  F093         	goto	u2470
  7957   0126CC                     u2471:
  7958   0126CC  EF36  F093         	goto	l4481
  7959   0126D0                     u2470:
  7960   0126D0                     
  7961                           ;colour_identify.c: 122:     return predicted_colour;
  7962   0126D0  500C               	movf	determine_card@predicted_colour^0,w,c
  7963   0126D2  0012               	return		;funcret
  7964   0126D4                     __end_of_determine_card:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _collect_avg_readings *****************
  7968 ;; Defined at:
  7969 ;;		line 31 in file "colour_identify.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  clear_read      2   14[COMRAM] PTR unsigned int 
  7972 ;;		 -> main@clear_read(2), 
  7973 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  7974 ;;		 -> main@red_read(2), 
  7975 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  7976 ;;		 -> main@green_read(2), 
  7977 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  7978 ;;		 -> main@blue_read(2), 
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  i               2   32[COMRAM] int 
  7981 ;;  i               2   30[COMRAM] int 
  7982 ;;  i               2   28[COMRAM] int 
  7983 ;;  i               2   26[COMRAM] int 
  7984 ;;  i               2   24[COMRAM] int 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7994 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7995 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7996 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7997 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;Total ram usage:       20 bytes
  7999 ;; Hardware stack levels used: 1
  8000 ;; Hardware stack levels required when called: 4
  8001 ;; This function calls:
  8002 ;;		_color_read_Blue
  8003 ;;		_color_read_Clear
  8004 ;;		_color_read_Green
  8005 ;;		_color_read_Red
  8006 ;; This function is called by:
  8007 ;;		_main
  8008 ;;		_card_response
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text34
  8013   0116B8                     __ptext34:
  8014                           	callstack 0
  8015   0116B8                     _collect_avg_readings:
  8016                           	callstack 26
  8017   0116B8                     
  8018                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  8019   0116B8  0E00               	movlw	0
  8020   0116BA  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  8021   0116BC  0E00               	movlw	0
  8022   0116BE  6E19               	movwf	collect_avg_readings@i^0,c
  8023   0116C0                     l4377:
  8024                           
  8025                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  8026   0116C0  ECE4  F094         	call	_color_read_Clear	;wreg free
  8027   0116C4  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8028   0116C8  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8029   0116CC  C008  FFDE         	movff	?_color_read_Clear,postinc2
  8030   0116D0  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  8031                           
  8032                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  8033   0116D4  EC94  F094         	call	_color_read_Red	;wreg free
  8034   0116D8  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8035   0116DC  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8036   0116E0  C008  FFDE         	movff	?_color_read_Red,postinc2
  8037   0116E4  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  8038                           
  8039                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  8040   0116E8  ECBC  F094         	call	_color_read_Green	;wreg free
  8041   0116EC  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8042   0116F0  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8043   0116F4  C008  FFDE         	movff	?_color_read_Green,postinc2
  8044   0116F8  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  8045                           
  8046                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  8047   0116FC  EC0C  F095         	call	_color_read_Blue	;wreg free
  8048   011700  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8049   011704  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8050   011708  C008  FFDE         	movff	?_color_read_Blue,postinc2
  8051   01170C  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  8052   011710                     
  8053                           ;colour_identify.c: 40:     }
  8054   011710  4A19               	infsnz	collect_avg_readings@i^0,f,c
  8055   011712  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  8056   011714  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  8057   011716  EF96  F08B         	goto	u2391
  8058   01171A  0EF5               	movlw	245
  8059   01171C  5C19               	subwf	collect_avg_readings@i^0,w,c
  8060   01171E  0E01               	movlw	1
  8061   011720  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  8062   011722  A0D8               	btfss	status,0,c
  8063   011724  EF96  F08B         	goto	u2391
  8064   011728  EF98  F08B         	goto	u2390
  8065   01172C                     u2391:
  8066   01172C  EF60  F08B         	goto	l4377
  8067   011730                     u2390:
  8068   011730                     
  8069                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  8070   011730  0E00               	movlw	0
  8071   011732  6E1C               	movwf	(collect_avg_readings@i_1673+1)^0,c
  8072   011734  0E00               	movlw	0
  8073   011736  6E1B               	movwf	collect_avg_readings@i_1673^0,c
  8074   011738                     l4389:
  8075                           
  8076                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  8077   011738  ECE4  F094         	call	_color_read_Clear	;wreg free
  8078   01173C  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8079   011740  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8080   011744  5008               	movf	?_color_read_Clear^0,w,c
  8081   011746  26DE               	addwf	postinc2,f,c
  8082   011748  5009               	movf	(?_color_read_Clear+1)^0,w,c
  8083   01174A  22DD               	addwfc	postdec2,f,c
  8084   01174C                     
  8085                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8086   01174C  0E11               	movlw	17
  8087   01174E  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8088   011750  0E3C               	movlw	60
  8089   011752  6E17               	movwf	??_collect_avg_readings^0,c
  8090   011754  0ECB               	movlw	203
  8091   011756                     u3067:
  8092   011756  2EE8               	decfsz	wreg,f,c
  8093   011758  D7FE               	bra	u3067
  8094   01175A  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8095   01175C  D7FC               	bra	u3067
  8096   01175E  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8097   011760  D7FA               	bra	u3067
  8098   011762  F000               	nop	
  8099   011764                     
  8100                           ;colour_identify.c: 47:     }
  8101   011764  4A1B               	infsnz	collect_avg_readings@i_1673^0,f,c
  8102   011766  2A1C               	incf	(collect_avg_readings@i_1673+1)^0,f,c
  8103   011768  BE1C               	btfsc	(collect_avg_readings@i_1673+1)^0,7,c
  8104   01176A  EFC0  F08B         	goto	u2401
  8105   01176E  501C               	movf	(collect_avg_readings@i_1673+1)^0,w,c
  8106   011770  E109               	bnz	u2400
  8107   011772  0E03               	movlw	3
  8108   011774  5C1B               	subwf	collect_avg_readings@i_1673^0,w,c
  8109   011776  A0D8               	btfss	status,0,c
  8110   011778  EFC0  F08B         	goto	u2401
  8111   01177C  EFC2  F08B         	goto	u2400
  8112   011780                     u2401:
  8113   011780  EF9C  F08B         	goto	l4389
  8114   011784                     u2400:
  8115   011784                     
  8116                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  8117   011784  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8118   011788  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8119   01178C  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8120   011790  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8121   011794  90D8               	bcf	status,0,c
  8122   011796  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8123   011798  3217               	rrcf	??_collect_avg_readings^0,f,c
  8124   01179A  90D8               	bcf	status,0,c
  8125   01179C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8126   01179E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8127   0117A0  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8128   0117A4  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8129   0117A8  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8130   0117AC  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8131   0117B0                     
  8132                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  8133   0117B0  0E00               	movlw	0
  8134   0117B2  6E1E               	movwf	(collect_avg_readings@i_1674+1)^0,c
  8135   0117B4  0E00               	movlw	0
  8136   0117B6  6E1D               	movwf	collect_avg_readings@i_1674^0,c
  8137   0117B8                     l4405:
  8138                           
  8139                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  8140   0117B8  EC94  F094         	call	_color_read_Red	;wreg free
  8141   0117BC  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8142   0117C0  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8143   0117C4  5008               	movf	?_color_read_Red^0,w,c
  8144   0117C6  26DE               	addwf	postinc2,f,c
  8145   0117C8  5009               	movf	(?_color_read_Red+1)^0,w,c
  8146   0117CA  22DD               	addwfc	postdec2,f,c
  8147   0117CC                     
  8148                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8149   0117CC  0E11               	movlw	17
  8150   0117CE  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8151   0117D0  0E3C               	movlw	60
  8152   0117D2  6E17               	movwf	??_collect_avg_readings^0,c
  8153   0117D4  0ECB               	movlw	203
  8154   0117D6                     u3077:
  8155   0117D6  2EE8               	decfsz	wreg,f,c
  8156   0117D8  D7FE               	bra	u3077
  8157   0117DA  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8158   0117DC  D7FC               	bra	u3077
  8159   0117DE  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8160   0117E0  D7FA               	bra	u3077
  8161   0117E2  F000               	nop	
  8162   0117E4                     
  8163                           ;colour_identify.c: 53:     }
  8164   0117E4  4A1D               	infsnz	collect_avg_readings@i_1674^0,f,c
  8165   0117E6  2A1E               	incf	(collect_avg_readings@i_1674+1)^0,f,c
  8166   0117E8  BE1E               	btfsc	(collect_avg_readings@i_1674+1)^0,7,c
  8167   0117EA  EF00  F08C         	goto	u2411
  8168   0117EE  501E               	movf	(collect_avg_readings@i_1674+1)^0,w,c
  8169   0117F0  E109               	bnz	u2410
  8170   0117F2  0E03               	movlw	3
  8171   0117F4  5C1D               	subwf	collect_avg_readings@i_1674^0,w,c
  8172   0117F6  A0D8               	btfss	status,0,c
  8173   0117F8  EF00  F08C         	goto	u2411
  8174   0117FC  EF02  F08C         	goto	u2410
  8175   011800                     u2411:
  8176   011800  EFDC  F08B         	goto	l4405
  8177   011804                     u2410:
  8178   011804                     
  8179                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  8180   011804  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8181   011808  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8182   01180C  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8183   011810  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8184   011814  90D8               	bcf	status,0,c
  8185   011816  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8186   011818  3217               	rrcf	??_collect_avg_readings^0,f,c
  8187   01181A  90D8               	bcf	status,0,c
  8188   01181C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8189   01181E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8190   011820  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8191   011824  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8192   011828  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8193   01182C  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8194   011830                     
  8195                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  8196   011830  0E00               	movlw	0
  8197   011832  6E20               	movwf	(collect_avg_readings@i_1675+1)^0,c
  8198   011834  0E00               	movlw	0
  8199   011836  6E1F               	movwf	collect_avg_readings@i_1675^0,c
  8200   011838                     l4421:
  8201                           
  8202                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  8203   011838  ECBC  F094         	call	_color_read_Green	;wreg free
  8204   01183C  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8205   011840  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8206   011844  5008               	movf	?_color_read_Green^0,w,c
  8207   011846  26DE               	addwf	postinc2,f,c
  8208   011848  5009               	movf	(?_color_read_Green+1)^0,w,c
  8209   01184A  22DD               	addwfc	postdec2,f,c
  8210   01184C                     
  8211                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8212   01184C  0E11               	movlw	17
  8213   01184E  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8214   011850  0E3C               	movlw	60
  8215   011852  6E17               	movwf	??_collect_avg_readings^0,c
  8216   011854  0ECB               	movlw	203
  8217   011856                     u3087:
  8218   011856  2EE8               	decfsz	wreg,f,c
  8219   011858  D7FE               	bra	u3087
  8220   01185A  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8221   01185C  D7FC               	bra	u3087
  8222   01185E  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8223   011860  D7FA               	bra	u3087
  8224   011862  F000               	nop	
  8225   011864                     
  8226                           ;colour_identify.c: 59:     }
  8227   011864  4A1F               	infsnz	collect_avg_readings@i_1675^0,f,c
  8228   011866  2A20               	incf	(collect_avg_readings@i_1675+1)^0,f,c
  8229   011868  BE20               	btfsc	(collect_avg_readings@i_1675+1)^0,7,c
  8230   01186A  EF40  F08C         	goto	u2421
  8231   01186E  5020               	movf	(collect_avg_readings@i_1675+1)^0,w,c
  8232   011870  E109               	bnz	u2420
  8233   011872  0E03               	movlw	3
  8234   011874  5C1F               	subwf	collect_avg_readings@i_1675^0,w,c
  8235   011876  A0D8               	btfss	status,0,c
  8236   011878  EF40  F08C         	goto	u2421
  8237   01187C  EF42  F08C         	goto	u2420
  8238   011880                     u2421:
  8239   011880  EF1C  F08C         	goto	l4421
  8240   011884                     u2420:
  8241   011884                     
  8242                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  8243   011884  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8244   011888  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8245   01188C  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8246   011890  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8247   011894  90D8               	bcf	status,0,c
  8248   011896  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8249   011898  3217               	rrcf	??_collect_avg_readings^0,f,c
  8250   01189A  90D8               	bcf	status,0,c
  8251   01189C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8252   01189E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8253   0118A0  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8254   0118A4  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8255   0118A8  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8256   0118AC  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8257   0118B0                     
  8258                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  8259   0118B0  0E00               	movlw	0
  8260   0118B2  6E22               	movwf	(collect_avg_readings@i_1676+1)^0,c
  8261   0118B4  0E00               	movlw	0
  8262   0118B6  6E21               	movwf	collect_avg_readings@i_1676^0,c
  8263   0118B8                     l4437:
  8264                           
  8265                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  8266   0118B8  EC0C  F095         	call	_color_read_Blue	;wreg free
  8267   0118BC  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8268   0118C0  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8269   0118C4  5008               	movf	?_color_read_Blue^0,w,c
  8270   0118C6  26DE               	addwf	postinc2,f,c
  8271   0118C8  5009               	movf	(?_color_read_Blue+1)^0,w,c
  8272   0118CA  22DD               	addwfc	postdec2,f,c
  8273   0118CC                     
  8274                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8275   0118CC  0E11               	movlw	17
  8276   0118CE  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8277   0118D0  0E3C               	movlw	60
  8278   0118D2  6E17               	movwf	??_collect_avg_readings^0,c
  8279   0118D4  0ECB               	movlw	203
  8280   0118D6                     u3097:
  8281   0118D6  2EE8               	decfsz	wreg,f,c
  8282   0118D8  D7FE               	bra	u3097
  8283   0118DA  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8284   0118DC  D7FC               	bra	u3097
  8285   0118DE  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8286   0118E0  D7FA               	bra	u3097
  8287   0118E2  F000               	nop	
  8288   0118E4                     
  8289                           ;colour_identify.c: 65:     }
  8290   0118E4  4A21               	infsnz	collect_avg_readings@i_1676^0,f,c
  8291   0118E6  2A22               	incf	(collect_avg_readings@i_1676+1)^0,f,c
  8292   0118E8  BE22               	btfsc	(collect_avg_readings@i_1676+1)^0,7,c
  8293   0118EA  EF80  F08C         	goto	u2431
  8294   0118EE  5022               	movf	(collect_avg_readings@i_1676+1)^0,w,c
  8295   0118F0  E109               	bnz	u2430
  8296   0118F2  0E03               	movlw	3
  8297   0118F4  5C21               	subwf	collect_avg_readings@i_1676^0,w,c
  8298   0118F6  A0D8               	btfss	status,0,c
  8299   0118F8  EF80  F08C         	goto	u2431
  8300   0118FC  EF82  F08C         	goto	u2430
  8301   011900                     u2431:
  8302   011900  EF5C  F08C         	goto	l4437
  8303   011904                     u2430:
  8304   011904                     
  8305                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  8306   011904  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8307   011908  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8308   01190C  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8309   011910  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8310   011914  90D8               	bcf	status,0,c
  8311   011916  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8312   011918  3217               	rrcf	??_collect_avg_readings^0,f,c
  8313   01191A  90D8               	bcf	status,0,c
  8314   01191C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8315   01191E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8316   011920  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8317   011924  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8318   011928  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8319   01192C  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8320   011930  0012               	return		;funcret
  8321   011932                     __end_of_collect_avg_readings:
  8322                           	callstack 0
  8323                           
  8324 ;; *************** function _color_read_Red *****************
  8325 ;; Defined at:
  8326 ;;		line 29 in file "color.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;		None
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  tmp             2   12[COMRAM] unsigned int 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  2    7[COMRAM] unsigned int 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8342 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8343 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8344 ;;Total ram usage:        7 bytes
  8345 ;; Hardware stack levels used: 1
  8346 ;; Hardware stack levels required when called: 3
  8347 ;; This function calls:
  8348 ;;		_I2C_2_Master_Read
  8349 ;;		_I2C_2_Master_RepStart
  8350 ;;		_I2C_2_Master_Start
  8351 ;;		_I2C_2_Master_Stop
  8352 ;;		_I2C_2_Master_Write
  8353 ;; This function is called by:
  8354 ;;		_collect_avg_readings
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text35
  8359   012928                     __ptext35:
  8360                           	callstack 0
  8361   012928                     _color_read_Red:
  8362                           	callstack 26
  8363   012928                     
  8364                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  8365   012928  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8366                           
  8367                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  8368   01292C  0E52               	movlw	82
  8369   01292E  EC8E  F096         	call	_I2C_2_Master_Write
  8370                           
  8371                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  8372   012932  0EB6               	movlw	182
  8373   012934  EC8E  F096         	call	_I2C_2_Master_Write
  8374                           
  8375                           ;color.c: 35:  I2C_2_Master_RepStart();
  8376   012938  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8377                           
  8378                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  8379   01293C  0E53               	movlw	83
  8380   01293E  EC8E  F096         	call	_I2C_2_Master_Write
  8381                           
  8382                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  8383   012942  0E01               	movlw	1
  8384   012944  EC7A  F095         	call	_I2C_2_Master_Read
  8385   012948  6E0A               	movwf	??_color_read_Red^0,c
  8386   01294A  500A               	movf	??_color_read_Red^0,w,c
  8387   01294C  6E0D               	movwf	color_read_Red@tmp^0,c
  8388   01294E  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  8389                           
  8390                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8391   012950  0E00               	movlw	0
  8392   012952  EC7A  F095         	call	_I2C_2_Master_Read
  8393   012956  6E0A               	movwf	??_color_read_Red^0,c
  8394   012958  500A               	movf	??_color_read_Red^0,w,c
  8395   01295A  6E0C               	movwf	(??_color_read_Red+2)^0,c
  8396   01295C  6A0B               	clrf	(??_color_read_Red+1)^0,c
  8397   01295E  500D               	movf	color_read_Red@tmp^0,w,c
  8398   012960  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  8399   012962  6E0D               	movwf	color_read_Red@tmp^0,c
  8400   012964  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  8401   012966  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  8402   012968  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  8403                           
  8404                           ;color.c: 39:  I2C_2_Master_Stop();
  8405   01296A  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8406   01296E                     
  8407                           ;color.c: 40:  return tmp;
  8408   01296E  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  8409   012972  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8410   012976  0012               	return		;funcret
  8411   012978                     __end_of_color_read_Red:
  8412                           	callstack 0
  8413                           
  8414 ;; *************** function _color_read_Green *****************
  8415 ;; Defined at:
  8416 ;;		line 43 in file "color.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;		None
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;  tmp             2   12[COMRAM] unsigned int 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;                  2    7[COMRAM] unsigned int 
  8423 ;; Registers used:
  8424 ;;		wreg, status,2, status,0, cstack
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8432 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8433 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8434 ;;Total ram usage:        7 bytes
  8435 ;; Hardware stack levels used: 1
  8436 ;; Hardware stack levels required when called: 3
  8437 ;; This function calls:
  8438 ;;		_I2C_2_Master_Read
  8439 ;;		_I2C_2_Master_RepStart
  8440 ;;		_I2C_2_Master_Start
  8441 ;;		_I2C_2_Master_Stop
  8442 ;;		_I2C_2_Master_Write
  8443 ;; This function is called by:
  8444 ;;		_collect_avg_readings
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text36
  8449   012978                     __ptext36:
  8450                           	callstack 0
  8451   012978                     _color_read_Green:
  8452                           	callstack 26
  8453   012978                     
  8454                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  8455   012978  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8456                           
  8457                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  8458   01297C  0E52               	movlw	82
  8459   01297E  EC8E  F096         	call	_I2C_2_Master_Write
  8460                           
  8461                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  8462   012982  0EB8               	movlw	184
  8463   012984  EC8E  F096         	call	_I2C_2_Master_Write
  8464                           
  8465                           ;color.c: 49:  I2C_2_Master_RepStart();
  8466   012988  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8467                           
  8468                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  8469   01298C  0E53               	movlw	83
  8470   01298E  EC8E  F096         	call	_I2C_2_Master_Write
  8471                           
  8472                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  8473   012992  0E01               	movlw	1
  8474   012994  EC7A  F095         	call	_I2C_2_Master_Read
  8475   012998  6E0A               	movwf	??_color_read_Green^0,c
  8476   01299A  500A               	movf	??_color_read_Green^0,w,c
  8477   01299C  6E0D               	movwf	color_read_Green@tmp^0,c
  8478   01299E  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  8479                           
  8480                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8481   0129A0  0E00               	movlw	0
  8482   0129A2  EC7A  F095         	call	_I2C_2_Master_Read
  8483   0129A6  6E0A               	movwf	??_color_read_Green^0,c
  8484   0129A8  500A               	movf	??_color_read_Green^0,w,c
  8485   0129AA  6E0C               	movwf	(??_color_read_Green+2)^0,c
  8486   0129AC  6A0B               	clrf	(??_color_read_Green+1)^0,c
  8487   0129AE  500D               	movf	color_read_Green@tmp^0,w,c
  8488   0129B0  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  8489   0129B2  6E0D               	movwf	color_read_Green@tmp^0,c
  8490   0129B4  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  8491   0129B6  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  8492   0129B8  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  8493                           
  8494                           ;color.c: 53:  I2C_2_Master_Stop();
  8495   0129BA  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8496   0129BE                     
  8497                           ;color.c: 54:  return tmp;
  8498   0129BE  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  8499   0129C2  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8500   0129C6  0012               	return		;funcret
  8501   0129C8                     __end_of_color_read_Green:
  8502                           	callstack 0
  8503                           
  8504 ;; *************** function _color_read_Clear *****************
  8505 ;; Defined at:
  8506 ;;		line 71 in file "color.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;		None
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  tmp             2   12[COMRAM] unsigned int 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  2    7[COMRAM] unsigned int 
  8513 ;; Registers used:
  8514 ;;		wreg, status,2, status,0, cstack
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8522 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8523 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8524 ;;Total ram usage:        7 bytes
  8525 ;; Hardware stack levels used: 1
  8526 ;; Hardware stack levels required when called: 3
  8527 ;; This function calls:
  8528 ;;		_I2C_2_Master_Read
  8529 ;;		_I2C_2_Master_RepStart
  8530 ;;		_I2C_2_Master_Start
  8531 ;;		_I2C_2_Master_Stop
  8532 ;;		_I2C_2_Master_Write
  8533 ;; This function is called by:
  8534 ;;		_main
  8535 ;;		_clear_read_calibration
  8536 ;;		_collect_avg_readings
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           	psect	text37
  8541   0129C8                     __ptext37:
  8542                           	callstack 0
  8543   0129C8                     _color_read_Clear:
  8544                           	callstack 27
  8545   0129C8                     
  8546                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  8547   0129C8  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8548                           
  8549                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  8550   0129CC  0E52               	movlw	82
  8551   0129CE  EC8E  F096         	call	_I2C_2_Master_Write
  8552                           
  8553                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  8554   0129D2  0EB4               	movlw	180
  8555   0129D4  EC8E  F096         	call	_I2C_2_Master_Write
  8556                           
  8557                           ;color.c: 77:  I2C_2_Master_RepStart();
  8558   0129D8  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8559                           
  8560                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  8561   0129DC  0E53               	movlw	83
  8562   0129DE  EC8E  F096         	call	_I2C_2_Master_Write
  8563                           
  8564                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  8565   0129E2  0E01               	movlw	1
  8566   0129E4  EC7A  F095         	call	_I2C_2_Master_Read
  8567   0129E8  6E0A               	movwf	??_color_read_Clear^0,c
  8568   0129EA  500A               	movf	??_color_read_Clear^0,w,c
  8569   0129EC  6E0D               	movwf	color_read_Clear@tmp^0,c
  8570   0129EE  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  8571                           
  8572                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8573   0129F0  0E00               	movlw	0
  8574   0129F2  EC7A  F095         	call	_I2C_2_Master_Read
  8575   0129F6  6E0A               	movwf	??_color_read_Clear^0,c
  8576   0129F8  500A               	movf	??_color_read_Clear^0,w,c
  8577   0129FA  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  8578   0129FC  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  8579   0129FE  500D               	movf	color_read_Clear@tmp^0,w,c
  8580   012A00  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  8581   012A02  6E0D               	movwf	color_read_Clear@tmp^0,c
  8582   012A04  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  8583   012A06  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  8584   012A08  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  8585                           
  8586                           ;color.c: 81:  I2C_2_Master_Stop();
  8587   012A0A  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8588   012A0E                     
  8589                           ;color.c: 82:  return tmp;
  8590   012A0E  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  8591   012A12  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8592   012A16  0012               	return		;funcret
  8593   012A18                     __end_of_color_read_Clear:
  8594                           	callstack 0
  8595                           
  8596 ;; *************** function _color_read_Blue *****************
  8597 ;; Defined at:
  8598 ;;		line 57 in file "color.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;		None
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;  tmp             2   12[COMRAM] unsigned int 
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  2    7[COMRAM] unsigned int 
  8605 ;; Registers used:
  8606 ;;		wreg, status,2, status,0, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8614 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8615 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8616 ;;Total ram usage:        7 bytes
  8617 ;; Hardware stack levels used: 1
  8618 ;; Hardware stack levels required when called: 3
  8619 ;; This function calls:
  8620 ;;		_I2C_2_Master_Read
  8621 ;;		_I2C_2_Master_RepStart
  8622 ;;		_I2C_2_Master_Start
  8623 ;;		_I2C_2_Master_Stop
  8624 ;;		_I2C_2_Master_Write
  8625 ;; This function is called by:
  8626 ;;		_collect_avg_readings
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           	psect	text38
  8631   012A18                     __ptext38:
  8632                           	callstack 0
  8633   012A18                     _color_read_Blue:
  8634                           	callstack 26
  8635   012A18                     
  8636                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  8637   012A18  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8638                           
  8639                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  8640   012A1C  0E52               	movlw	82
  8641   012A1E  EC8E  F096         	call	_I2C_2_Master_Write
  8642                           
  8643                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  8644   012A22  0EBA               	movlw	186
  8645   012A24  EC8E  F096         	call	_I2C_2_Master_Write
  8646                           
  8647                           ;color.c: 63:  I2C_2_Master_RepStart();
  8648   012A28  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8649                           
  8650                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  8651   012A2C  0E53               	movlw	83
  8652   012A2E  EC8E  F096         	call	_I2C_2_Master_Write
  8653                           
  8654                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  8655   012A32  0E01               	movlw	1
  8656   012A34  EC7A  F095         	call	_I2C_2_Master_Read
  8657   012A38  6E0A               	movwf	??_color_read_Blue^0,c
  8658   012A3A  500A               	movf	??_color_read_Blue^0,w,c
  8659   012A3C  6E0D               	movwf	color_read_Blue@tmp^0,c
  8660   012A3E  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  8661                           
  8662                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8663   012A40  0E00               	movlw	0
  8664   012A42  EC7A  F095         	call	_I2C_2_Master_Read
  8665   012A46  6E0A               	movwf	??_color_read_Blue^0,c
  8666   012A48  500A               	movf	??_color_read_Blue^0,w,c
  8667   012A4A  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  8668   012A4C  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  8669   012A4E  500D               	movf	color_read_Blue@tmp^0,w,c
  8670   012A50  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  8671   012A52  6E0D               	movwf	color_read_Blue@tmp^0,c
  8672   012A54  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  8673   012A56  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  8674   012A58  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  8675                           
  8676                           ;color.c: 67:  I2C_2_Master_Stop();
  8677   012A5A  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8678   012A5E                     
  8679                           ;color.c: 68:  return tmp;
  8680   012A5E  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  8681   012A62  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8682   012A66  0012               	return		;funcret
  8683   012A68                     __end_of_color_read_Blue:
  8684                           	callstack 0
  8685                           
  8686 ;; *************** function _I2C_2_Master_Write *****************
  8687 ;; Defined at:
  8688 ;;		line 45 in file "i2c.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  data_byte       1    wreg     unsigned char 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  data_byte       1    4[COMRAM] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      void 
  8695 ;; Registers used:
  8696 ;;		wreg, status,2, status,0, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8706 ;;Total ram usage:        1 bytes
  8707 ;; Hardware stack levels used: 1
  8708 ;; Hardware stack levels required when called: 2
  8709 ;; This function calls:
  8710 ;;		_I2C_2_Master_Idle
  8711 ;; This function is called by:
  8712 ;;		_color_writetoaddr
  8713 ;;		_color_read_Red
  8714 ;;		_color_read_Green
  8715 ;;		_color_read_Blue
  8716 ;;		_color_read_Clear
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text39
  8721   012D1C                     __ptext39:
  8722                           	callstack 0
  8723   012D1C                     _I2C_2_Master_Write:
  8724                           	callstack 27
  8725                           
  8726                           ;incstack = 0
  8727                           ;I2C_2_Master_Write@data_byte stored from wreg
  8728   012D1C  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  8729   012D1E                     
  8730                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8731   012D1E  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8732   012D22                     
  8733                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8734   012D22  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8735   012D26  0012               	return		;funcret
  8736   012D28                     __end_of_I2C_2_Master_Write:
  8737                           	callstack 0
  8738                           
  8739 ;; *************** function _I2C_2_Master_Stop *****************
  8740 ;; Defined at:
  8741 ;;		line 39 in file "i2c.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;                  1    wreg      void 
  8748 ;; Registers used:
  8749 ;;		wreg, status,2, status,0, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8759 ;;Total ram usage:        0 bytes
  8760 ;; Hardware stack levels used: 1
  8761 ;; Hardware stack levels required when called: 2
  8762 ;; This function calls:
  8763 ;;		_I2C_2_Master_Idle
  8764 ;; This function is called by:
  8765 ;;		_color_writetoaddr
  8766 ;;		_color_read_Red
  8767 ;;		_color_read_Green
  8768 ;;		_color_read_Blue
  8769 ;;		_color_read_Clear
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           	psect	text40
  8774   012D28                     __ptext40:
  8775                           	callstack 0
  8776   012D28                     _I2C_2_Master_Stop:
  8777                           	callstack 27
  8778   012D28                     
  8779                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8780   012D28  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8781   012D2C                     
  8782                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8783   012D2C  010E               	movlb	14	; () banked
  8784   012D2E  85DA               	bsf	218,2,b	;volatile
  8785   012D30                     
  8786                           ; BSR set to: 14
  8787   012D30  0012               	return		;funcret
  8788   012D32                     __end_of_I2C_2_Master_Stop:
  8789                           	callstack 0
  8790                           
  8791 ;; *************** function _I2C_2_Master_Start *****************
  8792 ;; Defined at:
  8793 ;;		line 27 in file "i2c.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, status,2, status,0, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used: 1
  8813 ;; Hardware stack levels required when called: 2
  8814 ;; This function calls:
  8815 ;;		_I2C_2_Master_Idle
  8816 ;; This function is called by:
  8817 ;;		_color_writetoaddr
  8818 ;;		_color_read_Red
  8819 ;;		_color_read_Green
  8820 ;;		_color_read_Blue
  8821 ;;		_color_read_Clear
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text41
  8826   012D32                     __ptext41:
  8827                           	callstack 0
  8828   012D32                     _I2C_2_Master_Start:
  8829                           	callstack 27
  8830   012D32                     
  8831                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8832   012D32  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8833   012D36                     
  8834                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8835   012D36  010E               	movlb	14	; () banked
  8836   012D38  81DA               	bsf	218,0,b	;volatile
  8837   012D3A                     
  8838                           ; BSR set to: 14
  8839   012D3A  0012               	return		;funcret
  8840   012D3C                     __end_of_I2C_2_Master_Start:
  8841                           	callstack 0
  8842                           
  8843 ;; *************** function _I2C_2_Master_RepStart *****************
  8844 ;; Defined at:
  8845 ;;		line 33 in file "i2c.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      void 
  8852 ;; Registers used:
  8853 ;;		wreg, status,2, status,0, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8863 ;;Total ram usage:        0 bytes
  8864 ;; Hardware stack levels used: 1
  8865 ;; Hardware stack levels required when called: 2
  8866 ;; This function calls:
  8867 ;;		_I2C_2_Master_Idle
  8868 ;; This function is called by:
  8869 ;;		_color_read_Red
  8870 ;;		_color_read_Green
  8871 ;;		_color_read_Blue
  8872 ;;		_color_read_Clear
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           	psect	text42
  8877   012D3C                     __ptext42:
  8878                           	callstack 0
  8879   012D3C                     _I2C_2_Master_RepStart:
  8880                           	callstack 27
  8881   012D3C                     
  8882                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8883   012D3C  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8884   012D40                     
  8885                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8886   012D40  010E               	movlb	14	; () banked
  8887   012D42  83DA               	bsf	218,1,b	;volatile
  8888   012D44                     
  8889                           ; BSR set to: 14
  8890   012D44  0012               	return		;funcret
  8891   012D46                     __end_of_I2C_2_Master_RepStart:
  8892                           	callstack 0
  8893                           
  8894 ;; *************** function _I2C_2_Master_Read *****************
  8895 ;; Defined at:
  8896 ;;		line 51 in file "i2c.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  ack             1    wreg     unsigned char 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  ack             1    5[COMRAM] unsigned char 
  8901 ;;  tmp             1    6[COMRAM] unsigned char 
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      unsigned char 
  8904 ;; Registers used:
  8905 ;;		wreg, status,2, status,0, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8913 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8914 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8915 ;;Total ram usage:        3 bytes
  8916 ;; Hardware stack levels used: 1
  8917 ;; Hardware stack levels required when called: 2
  8918 ;; This function calls:
  8919 ;;		_I2C_2_Master_Idle
  8920 ;; This function is called by:
  8921 ;;		_color_read_Red
  8922 ;;		_color_read_Green
  8923 ;;		_color_read_Blue
  8924 ;;		_color_read_Clear
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text43
  8929   012AF4                     __ptext43:
  8930                           	callstack 0
  8931   012AF4                     _I2C_2_Master_Read:
  8932                           	callstack 27
  8933                           
  8934                           ; BSR set to: 14
  8935                           ;incstack = 0
  8936                           ;I2C_2_Master_Read@ack stored from wreg
  8937   012AF4  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  8938   012AF6                     
  8939                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8940   012AF6  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8941   012AFA                     
  8942                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8943   012AFA  010E               	movlb	14	; () banked
  8944   012AFC  87DA               	bsf	218,3,b	;volatile
  8945                           
  8946                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8947   012AFE  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8948   012B02                     
  8949                           ;i2c.c: 57:   tmp = SSP2BUF;
  8950   012B02  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8951                           
  8952                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8953   012B06  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8954   012B0A                     
  8955                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8956   012B0A  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  8957   012B0C  B4D8               	btfsc	status,2,c
  8958   012B0E  EF8B  F095         	goto	u2281
  8959   012B12  EF8F  F095         	goto	u2280
  8960   012B16                     u2281:
  8961   012B16  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8962   012B18  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  8963   012B1A  EF90  F095         	goto	u2298
  8964   012B1E                     u2280:
  8965   012B1E  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8966   012B20                     u2298:
  8967   012B20  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  8968   012B22  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  8969   012B24  010E               	movlb	14	; () banked
  8970   012B26  51DA               	movf	218,w,b	;volatile
  8971   012B28  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8972   012B2A  0BDF               	andlw	-33
  8973   012B2C  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8974   012B2E  6FDA               	movwf	218,b	;volatile
  8975   012B30                     
  8976                           ; BSR set to: 14
  8977                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8978   012B30  89DA               	bsf	218,4,b	;volatile
  8979   012B32                     
  8980                           ; BSR set to: 14
  8981                           ;i2c.c: 61:   return tmp;
  8982   012B32  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  8983   012B34                     
  8984                           ; BSR set to: 14
  8985   012B34  0012               	return		;funcret
  8986   012B36                     __end_of_I2C_2_Master_Read:
  8987                           	callstack 0
  8988                           
  8989 ;; *************** function _I2C_2_Master_Idle *****************
  8990 ;; Defined at:
  8991 ;;		line 22 in file "i2c.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;		None
  8994 ;; Auto vars:     Size  Location     Type
  8995 ;;		None
  8996 ;; Return value:  Size  Location     Type
  8997 ;;                  1    wreg      void 
  8998 ;; Registers used:
  8999 ;;		wreg, status,2, status,0
  9000 ;; Tracked objects:
  9001 ;;		On entry : 0/0
  9002 ;;		On exit  : 0/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9008 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9009 ;;Total ram usage:        1 bytes
  9010 ;; Hardware stack levels used: 1
  9011 ;; Hardware stack levels required when called: 1
  9012 ;; This function calls:
  9013 ;;		Nothing
  9014 ;; This function is called by:
  9015 ;;		_I2C_2_Master_Start
  9016 ;;		_I2C_2_Master_RepStart
  9017 ;;		_I2C_2_Master_Stop
  9018 ;;		_I2C_2_Master_Write
  9019 ;;		_I2C_2_Master_Read
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           	psect	text44
  9024   012C58                     __ptext44:
  9025                           	callstack 0
  9026   012C58                     _I2C_2_Master_Idle:
  9027                           	callstack 27
  9028   012C58                     l142:
  9029   012C58  010E               	movlb	14	; () banked
  9030   012C5A  B5D8               	btfsc	216,2,b	;volatile
  9031   012C5C  EF32  F096         	goto	u2231
  9032   012C60  EF34  F096         	goto	u2230
  9033   012C64                     u2231:
  9034   012C64  EF2C  F096         	goto	l142
  9035   012C68                     u2230:
  9036   012C68                     
  9037                           ; BSR set to: 14
  9038   012C68  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9039   012C6C  0E1F               	movlw	31
  9040   012C6E  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  9041   012C70  A4D8               	btfss	status,2,c
  9042   012C72  EF3D  F096         	goto	u2241
  9043   012C76  EF3F  F096         	goto	u2240
  9044   012C7A                     u2241:
  9045   012C7A  EF2C  F096         	goto	l142
  9046   012C7E                     u2240:
  9047   012C7E                     
  9048                           ; BSR set to: 14
  9049   012C7E  0012               	return		;funcret
  9050   012C80                     __end_of_I2C_2_Master_Idle:
  9051                           	callstack 0
  9052                           
  9053 ;; *************** function ___lwmod *****************
  9054 ;; Defined at:
  9055 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwmod.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  dividend        2    3[COMRAM] unsigned int 
  9058 ;;  divisor         2    5[COMRAM] unsigned int 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;  counter         1    7[COMRAM] unsigned char 
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  2    3[COMRAM] unsigned int 
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9071 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9073 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9074 ;;Total ram usage:        5 bytes
  9075 ;; Hardware stack levels used: 1
  9076 ;; Hardware stack levels required when called: 1
  9077 ;; This function calls:
  9078 ;;		Nothing
  9079 ;; This function is called by:
  9080 ;;		_main
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           	psect	text45
  9085   0127C2                     __ptext45:
  9086                           	callstack 0
  9087   0127C2                     ___lwmod:
  9088                           	callstack 29
  9089   0127C2  5006               	movf	___lwmod@divisor^0,w,c
  9090   0127C4  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
  9091   0127C6  B4D8               	btfsc	status,2,c
  9092   0127C8  EFE8  F093         	goto	u2551
  9093   0127CC  EFEA  F093         	goto	u2550
  9094   0127D0                     u2551:
  9095   0127D0  EF0E  F094         	goto	l1034
  9096   0127D4                     u2550:
  9097   0127D4  0E01               	movlw	1
  9098   0127D6  6E08               	movwf	___lwmod@counter^0,c
  9099   0127D8  EFF2  F093         	goto	l4837
  9100   0127DC                     l4835:
  9101   0127DC  90D8               	bcf	status,0,c
  9102   0127DE  3606               	rlcf	___lwmod@divisor^0,f,c
  9103   0127E0  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
  9104   0127E2  2A08               	incf	___lwmod@counter^0,f,c
  9105   0127E4                     l4837:
  9106   0127E4  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
  9107   0127E6  EFF7  F093         	goto	u2561
  9108   0127EA  EFF9  F093         	goto	u2560
  9109   0127EE                     u2561:
  9110   0127EE  EFEE  F093         	goto	l4835
  9111   0127F2                     u2560:
  9112   0127F2                     l4839:
  9113   0127F2  5006               	movf	___lwmod@divisor^0,w,c
  9114   0127F4  5C04               	subwf	___lwmod@dividend^0,w,c
  9115   0127F6  5007               	movf	(___lwmod@divisor+1)^0,w,c
  9116   0127F8  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
  9117   0127FA  A0D8               	btfss	status,0,c
  9118   0127FC  EF02  F094         	goto	u2571
  9119   012800  EF04  F094         	goto	u2570
  9120   012804                     u2571:
  9121   012804  EF08  F094         	goto	l4843
  9122   012808                     u2570:
  9123   012808  5006               	movf	___lwmod@divisor^0,w,c
  9124   01280A  5E04               	subwf	___lwmod@dividend^0,f,c
  9125   01280C  5007               	movf	(___lwmod@divisor+1)^0,w,c
  9126   01280E  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
  9127   012810                     l4843:
  9128   012810  90D8               	bcf	status,0,c
  9129   012812  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
  9130   012814  3206               	rrcf	___lwmod@divisor^0,f,c
  9131   012816  2E08               	decfsz	___lwmod@counter^0,f,c
  9132   012818  EFF9  F093         	goto	l4839
  9133   01281C                     l1034:
  9134   01281C  C004  F004         	movff	___lwmod@dividend,?___lwmod
  9135   012820  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  9136   012824  0012               	return		;funcret
  9137   012826                     __end_of___lwmod:
  9138                           	callstack 0
  9139                           
  9140 ;; *************** function _LEDSon_init *****************
  9141 ;; Defined at:
  9142 ;;		line 18 in file "LEDsOn.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		None
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9160 ;;Total ram usage:        0 bytes
  9161 ;; Hardware stack levels used: 1
  9162 ;; Hardware stack levels required when called: 1
  9163 ;; This function calls:
  9164 ;;		Nothing
  9165 ;; This function is called by:
  9166 ;;		_main
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text46
  9171   012C04                     __ptext46:
  9172                           	callstack 0
  9173   012C04                     _LEDSon_init:
  9174                           	callstack 29
  9175   012C04                     
  9176                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  9177   012C04  9288               	bcf	136,1,c	;volatile
  9178                           
  9179                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  9180   012C06  9088               	bcf	136,0,c	;volatile
  9181                           
  9182                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  9183   012C08  9884               	bcf	132,4,c	;volatile
  9184                           
  9185                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  9186   012C0A  9684               	bcf	132,3,c	;volatile
  9187                           
  9188                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  9189   012C0C  9086               	bcf	134,0,c	;volatile
  9190                           
  9191                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  9192   012C0E  9287               	bcf	135,1,c	;volatile
  9193                           
  9194                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  9195   012C10  9E86               	bcf	134,7,c	;volatile
  9196                           
  9197                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  9198   012C12  9881               	bcf	129,4,c	;volatile
  9199                           
  9200                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  9201   012C14  8E7E               	bsf	126,7,c	;volatile
  9202                           
  9203                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  9204   012C16  827F               	bsf	127,1,c	;volatile
  9205                           
  9206                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  9207   012C18  8879               	bsf	121,4,c	;volatile
  9208                           
  9209                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  9210   012C1A  987C               	bcf	124,4,c	;volatile
  9211                           
  9212                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  9213   012C1C  9280               	bcf	128,1,c	;volatile
  9214                           
  9215                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  9216   012C1E  907E               	bcf	126,0,c	;volatile
  9217                           
  9218                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  9219   012C20  9080               	bcf	128,0,c	;volatile
  9220                           
  9221                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  9222   012C22  967C               	bcf	124,3,c	;volatile
  9223                           
  9224                           ;LEDsOn.c: 44:     TRISHbits.TRISH3 = 0;
  9225   012C24  9688               	bcf	136,3,c	;volatile
  9226                           
  9227                           ;LEDsOn.c: 45:     LATHbits.LATH3=0;
  9228   012C26  9680               	bcf	128,3,c	;volatile
  9229                           
  9230                           ;LEDsOn.c: 46:     TRISDbits.TRISD7 = 0;
  9231   012C28  9E84               	bcf	132,7,c	;volatile
  9232                           
  9233                           ;LEDsOn.c: 47:     LATDbits.LATD7=0;
  9234   012C2A  9E7C               	bcf	124,7,c	;volatile
  9235   012C2C  0012               	return		;funcret
  9236   012C2E                     __end_of_LEDSon_init:
  9237                           	callstack 0
  9238                           
  9239 ;; *************** function _Interrupts_init *****************
  9240 ;; Defined at:
  9241 ;;		line 7 in file "interrupts.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;		None
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;		None
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      void 
  9248 ;; Registers used:
  9249 ;;		wreg, status,2
  9250 ;; Tracked objects:
  9251 ;;		On entry : 0/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9259 ;;Total ram usage:        0 bytes
  9260 ;; Hardware stack levels used: 1
  9261 ;; Hardware stack levels required when called: 1
  9262 ;; This function calls:
  9263 ;;		Nothing
  9264 ;; This function is called by:
  9265 ;;		_main
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           	psect	text47
  9270   012C2E                     __ptext47:
  9271                           	callstack 0
  9272   012C2E                     _Interrupts_init:
  9273                           	callstack 29
  9274   012C2E                     
  9275                           ;interrupts.c: 10:     TMR0IE=1;
  9276   012C2E  010E               	movlb	14	; () banked
  9277   012C30  8B29               	bsf	41,5,b	;volatile
  9278   012C32                     
  9279                           ; BSR set to: 14
  9280                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  9281   012C32  50D6               	movf	214,w,c	;volatile
  9282   012C34  0B1F               	andlw	-225
  9283   012C36  0940               	iorlw	64
  9284   012C38  6ED6               	movwf	214,c	;volatile
  9285   012C3A                     
  9286                           ; BSR set to: 14
  9287                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  9288   012C3A  88D6               	bsf	214,4,c	;volatile
  9289                           
  9290                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  9291   012C3C  50D6               	movf	214,w,c	;volatile
  9292   012C3E  0BF0               	andlw	-16
  9293   012C40  0905               	iorlw	5
  9294   012C42  6ED6               	movwf	214,c	;volatile
  9295   012C44                     
  9296                           ; BSR set to: 14
  9297                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  9298   012C44  88D5               	bsf	213,4,c	;volatile
  9299   012C46                     
  9300                           ; BSR set to: 14
  9301                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  9302   012C46  9B1F               	bcf	31,5,b	;volatile
  9303                           
  9304                           ;interrupts.c: 16:     TMR0H=0b00111100;
  9305   012C48  0E3C               	movlw	60
  9306   012C4A  6ED4               	movwf	212,c	;volatile
  9307                           
  9308                           ;interrupts.c: 17:     TMR0L=0b10101111;
  9309   012C4C  0EAF               	movlw	175
  9310   012C4E  6ED3               	movwf	211,c	;volatile
  9311   012C50                     
  9312                           ; BSR set to: 14
  9313                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  9314   012C50  8ED5               	bsf	213,7,c	;volatile
  9315   012C52                     
  9316                           ; BSR set to: 14
  9317                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  9318   012C52  8CF2               	bsf	242,6,c	;volatile
  9319   012C54                     
  9320                           ; BSR set to: 14
  9321                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  9322   012C54  8EF2               	bsf	242,7,c	;volatile
  9323   012C56                     
  9324                           ; BSR set to: 14
  9325   012C56  0012               	return		;funcret
  9326   012C58                     __end_of_Interrupts_init:
  9327                           	callstack 0
  9328                           
  9329 ;; *************** function _LowISR *****************
  9330 ;; Defined at:
  9331 ;;		line 24 in file "interrupts.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  1    wreg      void 
  9338 ;; Registers used:
  9339 ;;		wreg, status,2
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9347 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9348 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9349 ;;Total ram usage:        3 bytes
  9350 ;; Hardware stack levels used: 1
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		Interrupt level 1
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           	psect	intcodelo
  9359   000018                     __pintcodelo:
  9360                           	callstack 0
  9361   000018                     _LowISR:
  9362                           	callstack 20
  9363                           
  9364                           ; BSR set to: 14
  9365                           ;incstack = 0
  9366   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  9367   00001A  CFD8 F001          	movff	status,??_LowISR
  9368   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  9369   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  9370   000026                     
  9371                           ;interrupts.c: 27:     if(TMR0IF){
  9372   000026  010E               	movlb	14	; () banked
  9373   000028  AB33               	btfss	51,5,b	;volatile
  9374   00002A  EF19  F000         	goto	i1u182_21
  9375   00002E  EF1B  F000         	goto	i1u182_20
  9376   000032                     i1u182_21:
  9377   000032  EF26  F000         	goto	i1l441
  9378   000036                     i1u182_20:
  9379   000036                     
  9380                           ; BSR set to: 14
  9381                           ;interrupts.c: 28:     TMR0H=0b00111100;
  9382   000036  0E3C               	movlw	60
  9383   000038  6ED4               	movwf	212,c	;volatile
  9384                           
  9385                           ;interrupts.c: 29:     TMR0L=0b10101111;
  9386   00003A  0EAF               	movlw	175
  9387   00003C  6ED3               	movwf	211,c	;volatile
  9388                           
  9389                           ;interrupts.c: 34:         TimerFlag=1;
  9390   00003E  0E00               	movlw	0
  9391   000040  0100               	movlb	0	; () banked
  9392   000042  6FDC               	movwf	(_TimerFlag+1)& (0+255),b
  9393   000044  0E01               	movlw	1
  9394   000046  6FDB               	movwf	_TimerFlag& (0+255),b
  9395   000048                     
  9396                           ; BSR set to: 0
  9397                           ;interrupts.c: 36:        TMR0IF=0;
  9398   000048  010E               	movlb	14	; () banked
  9399   00004A  9B33               	bcf	51,5,b	;volatile
  9400   00004C                     i1l441:
  9401                           
  9402                           ; BSR set to: 14
  9403   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  9404   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  9405   000054  C001  FFD8         	movff	??_LowISR,status
  9406   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  9407   00005A  0010               	retfie	
  9408   00005C                     __end_of_LowISR:
  9409                           	callstack 0
  9410                           
  9411                           	psect	rparam
  9412   000000                     
  9413                           	psect	temp
  9414   00005B                     btemp:
  9415                           	callstack 0
  9416   00005B                     	ds	1
  9417   000000                     int$flags	set	btemp
  9418   000000                     wtemp8	set	btemp+1
  9419   000000                     ttemp5	set	btemp+1
  9420   000000                     ttemp6	set	btemp+4
  9421   000000                     ttemp7	set	btemp+8
  9422                           
  9423                           	psect	idloc
  9424                           
  9425                           ;Config register IDLOC0 @ 0x200000
  9426                           ;	unspecified, using default values
  9427   200000                     	org	2097152
  9428   200000  0FFF               	dw	4095
  9429                           
  9430                           ;Config register IDLOC1 @ 0x200002
  9431                           ;	unspecified, using default values
  9432   200002                     	org	2097154
  9433   200002  0FFF               	dw	4095
  9434                           
  9435                           ;Config register IDLOC2 @ 0x200004
  9436                           ;	unspecified, using default values
  9437   200004                     	org	2097156
  9438   200004  0FFF               	dw	4095
  9439                           
  9440                           ;Config register IDLOC3 @ 0x200006
  9441                           ;	unspecified, using default values
  9442   200006                     	org	2097158
  9443   200006  0FFF               	dw	4095
  9444                           
  9445                           ;Config register IDLOC4 @ 0x200008
  9446                           ;	unspecified, using default values
  9447   200008                     	org	2097160
  9448   200008  0FFF               	dw	4095
  9449                           
  9450                           ;Config register IDLOC5 @ 0x20000A
  9451                           ;	unspecified, using default values
  9452   20000A                     	org	2097162
  9453   20000A  0FFF               	dw	4095
  9454                           
  9455                           ;Config register IDLOC6 @ 0x20000C
  9456                           ;	unspecified, using default values
  9457   20000C                     	org	2097164
  9458   20000C  0FFF               	dw	4095
  9459                           
  9460                           ;Config register IDLOC7 @ 0x20000E
  9461                           ;	unspecified, using default values
  9462   20000E                     	org	2097166
  9463   20000E  0FFF               	dw	4095
  9464                           
  9465                           	psect	config
  9466                           
  9467                           ;Config register CONFIG1L @ 0x300000
  9468                           ;	External Oscillator mode Selection bits
  9469                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9470                           ;	Power-up default value for COSC bits
  9471                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9472   300000                     	org	3145728
  9473   300000  AA                 	db	170
  9474                           
  9475                           ;Config register CONFIG1H @ 0x300001
  9476                           ;	unspecified, using default values
  9477                           ;	Clock Out Enable bit
  9478                           ;	CLKOUTEN = 0x1, unprogrammed default
  9479                           ;	Clock Switch Enable bit
  9480                           ;	CSWEN = 0x1, unprogrammed default
  9481                           ;	Fail-Safe Clock Monitor Enable bit
  9482                           ;	FCMEN = 0x1, unprogrammed default
  9483   300001                     	org	3145729
  9484   300001  FF                 	db	255
  9485                           
  9486                           ;Config register CONFIG2L @ 0x300002
  9487                           ;	unspecified, using default values
  9488                           ;	Master Clear Enable bit
  9489                           ;	MCLRE = 0x1, unprogrammed default
  9490                           ;	Power-up Timer Enable bit
  9491                           ;	PWRTE = 0x1, unprogrammed default
  9492                           ;	Low-power BOR enable bit
  9493                           ;	LPBOREN = 0x1, unprogrammed default
  9494                           ;	Brown-out Reset Enable bits
  9495                           ;	BOREN = 0x3, unprogrammed default
  9496   300002                     	org	3145730
  9497   300002  FF                 	db	255
  9498                           
  9499                           ;Config register CONFIG2H @ 0x300003
  9500                           ;	unspecified, using default values
  9501                           ;	Brown Out Reset Voltage selection bits
  9502                           ;	BORV = 0x3, unprogrammed default
  9503                           ;	ZCD Disable bit
  9504                           ;	ZCD = 0x1, unprogrammed default
  9505                           ;	PPSLOCK bit One-Way Set Enable bit
  9506                           ;	PPS1WAY = 0x1, unprogrammed default
  9507                           ;	Stack Full/Underflow Reset Enable bit
  9508                           ;	STVREN = 0x1, unprogrammed default
  9509                           ;	Debugger Enable bit
  9510                           ;	DEBUG = 0x1, unprogrammed default
  9511                           ;	Extended Instruction Set Enable bit
  9512                           ;	XINST = 0x1, unprogrammed default
  9513   300003                     	org	3145731
  9514   300003  FF                 	db	255
  9515                           
  9516                           ;Config register CONFIG3L @ 0x300004
  9517                           ;	WDT Period Select bits
  9518                           ;	WDTCPS = 0x1F, unprogrammed default
  9519                           ;	WDT operating mode
  9520                           ;	WDTE = OFF, WDT Disabled
  9521   300004                     	org	3145732
  9522   300004  9F                 	db	159
  9523                           
  9524                           ;Config register CONFIG3H @ 0x300005
  9525                           ;	unspecified, using default values
  9526                           ;	WDT Window Select bits
  9527                           ;	WDTCWS = 0x7, unprogrammed default
  9528                           ;	WDT input clock selector
  9529                           ;	WDTCCS = 0x7, unprogrammed default
  9530   300005                     	org	3145733
  9531   300005  FF                 	db	255
  9532                           
  9533                           ;Config register CONFIG4L @ 0x300006
  9534                           ;	unspecified, using default values
  9535                           ;	Write Protection Block 0
  9536                           ;	WRT0 = 0x1, unprogrammed default
  9537                           ;	Write Protection Block 1
  9538                           ;	WRT1 = 0x1, unprogrammed default
  9539                           ;	Write Protection Block 2
  9540                           ;	WRT2 = 0x1, unprogrammed default
  9541                           ;	Write Protection Block 3
  9542                           ;	WRT3 = 0x1, unprogrammed default
  9543                           ;	Write Protection Block 3
  9544                           ;	WRT4 = 0x1, unprogrammed default
  9545                           ;	Write Protection Block 3
  9546                           ;	WRT5 = 0x1, unprogrammed default
  9547                           ;	Write Protection Block 3
  9548                           ;	WRT6 = 0x1, unprogrammed default
  9549                           ;	Write Protection Block 3
  9550                           ;	WRT7 = 0x1, unprogrammed default
  9551   300006                     	org	3145734
  9552   300006  FF                 	db	255
  9553                           
  9554                           ;Config register CONFIG4H @ 0x300007
  9555                           ;	unspecified, using default values
  9556                           ;	Configuration Register Write Protection bit
  9557                           ;	WRTC = 0x1, unprogrammed default
  9558                           ;	Boot Block Write Protection bit
  9559                           ;	WRTB = 0x1, unprogrammed default
  9560                           ;	Data EEPROM Write Protection bit
  9561                           ;	WRTD = 0x1, unprogrammed default
  9562                           ;	Scanner Enable bit
  9563                           ;	SCANE = 0x1, unprogrammed default
  9564                           ;	Low Voltage Programming Enable bit
  9565                           ;	LVP = 0x1, unprogrammed default
  9566   300007                     	org	3145735
  9567   300007  FF                 	db	255
  9568                           
  9569                           ;Config register CONFIG5L @ 0x300008
  9570                           ;	unspecified, using default values
  9571                           ;	UserNVM Program Memory Code Protection bit
  9572                           ;	CP = 0x1, unprogrammed default
  9573                           ;	DataNVM Memory Code Protection bit
  9574                           ;	CPD = 0x1, unprogrammed default
  9575   300008                     	org	3145736
  9576   300008  FF                 	db	255
  9577                           
  9578                           ;Config register CONFIG5H @ 0x300009
  9579                           ;	unspecified, using default values
  9580   300009                     	org	3145737
  9581   300009  FF                 	db	255
  9582                           
  9583                           ;Config register CONFIG6L @ 0x30000A
  9584                           ;	unspecified, using default values
  9585                           ;	Table Read Protection Block 0
  9586                           ;	EBTR0 = 0x1, unprogrammed default
  9587                           ;	Table Read Protection Block 1
  9588                           ;	EBTR1 = 0x1, unprogrammed default
  9589                           ;	Table Read Protection Block 2
  9590                           ;	EBTR2 = 0x1, unprogrammed default
  9591                           ;	Table Read Protection Block 3
  9592                           ;	EBTR3 = 0x1, unprogrammed default
  9593                           ;	Table Read Protection Block 4
  9594                           ;	EBTR4 = 0x1, unprogrammed default
  9595                           ;	Table Read Protection Block 5
  9596                           ;	EBTR5 = 0x1, unprogrammed default
  9597                           ;	Table Read Protection Block 6
  9598                           ;	EBTR6 = 0x1, unprogrammed default
  9599                           ;	Table Read Protection Block 7
  9600                           ;	EBTR7 = 0x1, unprogrammed default
  9601   30000A                     	org	3145738
  9602   30000A  FF                 	db	255
  9603                           
  9604                           ;Config register CONFIG6H @ 0x30000B
  9605                           ;	unspecified, using default values
  9606                           ;	Boot Block Table Read Protection bit
  9607                           ;	EBTRB = 0x1, unprogrammed default
  9608   30000B                     	org	3145739
  9609   30000B  FF                 	db	255
  9610                           tosu	equ	0xFFF
  9611                           tosh	equ	0xFFE
  9612                           tosl	equ	0xFFD
  9613                           stkptr	equ	0xFFC
  9614                           pclatu	equ	0xFFB
  9615                           pclath	equ	0xFFA
  9616                           pcl	equ	0xFF9
  9617                           tblptru	equ	0xFF8
  9618                           tblptrh	equ	0xFF7
  9619                           tblptrl	equ	0xFF6
  9620                           tablat	equ	0xFF5
  9621                           prodh	equ	0xFF4
  9622                           prodl	equ	0xFF3
  9623                           indf0	equ	0xFEF
  9624                           postinc0	equ	0xFEE
  9625                           postdec0	equ	0xFED
  9626                           preinc0	equ	0xFEC
  9627                           plusw0	equ	0xFEB
  9628                           fsr0h	equ	0xFEA
  9629                           fsr0l	equ	0xFE9
  9630                           wreg	equ	0xFE8
  9631                           indf1	equ	0xFE7
  9632                           postinc1	equ	0xFE6
  9633                           postdec1	equ	0xFE5
  9634                           preinc1	equ	0xFE4
  9635                           plusw1	equ	0xFE3
  9636                           fsr1h	equ	0xFE2
  9637                           fsr1l	equ	0xFE1
  9638                           bsr	equ	0xFE0
  9639                           indf2	equ	0xFDF
  9640                           postinc2	equ	0xFDE
  9641                           postdec2	equ	0xFDD
  9642                           preinc2	equ	0xFDC
  9643                           plusw2	equ	0xFDB
  9644                           fsr2h	equ	0xFDA
  9645                           fsr2l	equ	0xFD9
  9646                           status	equ	0xFD8

Data Sizes:
    Strings     267
    Constant    0
    Data        30
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160     95     159
    BANK1           256    256     256
    BANK2           256    171     201
    BANK3           256      0     120
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2570$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2521$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2521$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@stop_all	PTR unsigned int  size(2) Largest target is 2
		 -> main@stop_all(BANK0[2]), 

    card_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    card_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK2[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motor_response@stop_all	PTR unsigned int  size(2) Largest target is 2
		 -> main@stop_all(BANK0[2]), 

    motor_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    motor_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    motor_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK1[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK1[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK2[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK0[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _normalise_readings->_abs
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_motor_response
    _motor_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               391   391      0  178941
                                             85 COMRAM     2     2      0
                                             83 BANK0     12    12      0
                                             90 BANK1    166   166      0
                                              0 BANK2    171   171      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                            ___lwmod
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6   11681
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      113    90     23  120225
                                             60 BANK0     23     0     23
                                              0 BANK1     90    90      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    4398
                                             25 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      27    14     13   99588
                                             33 BANK0     27    14     13
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                  _sendStringSerial4
                            _sprintf
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    9656
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2    1176
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    5857
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        8     4      4   40642
                                             30 COMRAM     8     4      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    9457
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    7297
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   14696
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    5317
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3741
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1192
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     961
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     648
                                              3 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     418
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    2212
                                             14 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      31
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      65
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     412
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   ___lwmod
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
     _sendStringSerial4
     _sprintf
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      78      11       46.9%
BITBANK2           100      0       0       8        0.0%
BANK2              100     AB      C9       9       78.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhh     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhh      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhh      3      0       0      57        0.0%
BITBIGSFRllllhh      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     33A      64        0.0%
DATA                 0      0     33A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 11:38:44 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 2928  
                       _color_read_Blue 2A18                                      l22 2CE4  
                                    l31 2A66                                      l25 2976  
                                    l34 2A16                                      l19 2BA8  
                                    l28 29C6                                      l92 2880  
                                    l86 1D96                                      l79 2652  
                                    l97 24A4                                      bsr 000FE0  
                   ___wmul@multiplicand 0006                   card_response@stop_all 00B1  
                      _color_read_Clear 29C8                        _color_read_Green 2978  
                     ??_Interrupts_init 0004                                     l102 23F6  
                                   l112 25CA                                     l107 253E  
                                   l142 2C58                                     l151 2D44  
                                   l160 2B34                                     l145 2C7E  
                                   l154 2D30                                     l410 1C2A  
                                   l250 09A4                                     l139 2C02  
                                   l251 09F6                                     l148 2D3A  
                                   l252 09F2                                     l157 2D26  
                                   l253 0A04                                     l245 0802  
                                   l246 0800                                     l407 1156  
                                   l247 0810                                     l336 2172  
                                   l248 0996                                     l249 0994  
                                   l354 143A                                     l435 2C56  
                                   l285 2C2C                                     l349 1930  
                                   l365 26D2                                     l533 2CA4  
                                   l390 0680                                     l359 227E  
                                   l391 0704                                     l480 2CC4  
                                   l394 0CBC                                     l492 2D1A  
                                   l660 1EFA                                     l389 0660  
                                   l647 1AB8                                     l489 2D06  
                                   l498 2BD8     normalise_readings@normalised_values 0026  
                      ??_motor_response 008E                                     _abs 2B36  
                                   _pad 26D4                   __end_of_card_response 1C2C  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1031 27C0  
                                  l1024 27B8                                    l1041 2824  
                                  l1034 281C                                    l1211 2B74  
                                  ?_abs 0016                                    l1208 2B6C  
                                  l1240 26F6                                    l1218 2926  
                                  l1251 14D0                                    l1244 274C  
                                  l1252 1516                                    l1270 2058  
                                  l1263 16B6                                    l1249 14C8  
                                  l4001 1470                                    l4011 14E8  
                                  l4003 1480                                    l1276 28D4  
                                  l4101 2D36                                    l4021 151E  
                                  l4013 14EE                                    l4005 14A0  
                                  l4111 2D3C                                    l4103 2D1E  
                                  l4031 15BA                                    l4023 1526  
                                  l4015 14FE                                    l4007 14BC  
                                  l1288 2348                                    l1296 2AF2  
                                  l4121 2B0A                                    l4113 2D40  
                                  l4105 2D22                                    l4201 250C  
                                  l4041 1680                                    l4025 152C  
                                  l4033 161E                                    l4017 150A  
                                  l4009 14D8                                    l5001 0C62  
                                  l4123 2B30                                    l4115 2AF6  
                                  l4107 2D28                                    l4051 1C48  
                                  l4203 2514                                    l4131 282A  
                                  l1299 2D46                                    l4043 1686  
                                  l4035 1638                                    l4027 15AE  
                                  l4019 1512                                    l4211 2882  
                                  l5011 0CA4                                    l5003 0C66  
                                  l4125 2B32                                    l4117 2AFA  
                                  l4109 2D2C                                    l4221 2928  
                                  l4061 1D12                                    l4053 1C9C  
                                  l4205 2530                                    l4133 2842  
                                  l4141 23F8                                    l4301 0DB0  
                                  l4045 1696                                    l4037 1656  
                                  l4029 15B4                                    l4213 288E  
                                  l5005 0C70                                    l4119 2B02  
                                  l4223 296E                                    l4063 1D56  
                                  l4055 1CB0                                    l4135 2850  
                                  l4151 2438                                    l4143 2418  
                                  l4311 0F0C                                    l4303 0E54  
                                  l4207 2D06                                    l4039 1670  
                                  l4071 1F24                                    l4215 28AA  
                                  l5007 0C82                                    l4065 2C58  
                                  l4233 2A18                                    l4241 2A0E  
                                  l4057 1CB4                                    l4049 1C2C  
                                  l4137 285C                                    l4129 2826  
                                  l4161 248C                                    l4153 2450  
                                  l4321 0F70                                    l4313 0F20  
                                  l4305 0ECC                                    l4209 2D16  
                                  l4081 1F74                                    l4073 1F32  
                                  l4217 28CA                                    l5009 0C96  
                                  l4067 2C68                                    l4235 2A5E  
                                  l4227 2978                                    l4411 17E8  
                                  l4059 1CF6                                    l4139 2868  
                                  l4155 245C                                    l4171 2372  
                                  l4163 234A                                    l4323 0F88  
                                  l4315 0F34                                    l4307 0EE4  
                                  l4083 1F94                                    l4075 1F40  
                                  l4229 29BE                                    l4421 1838  
                                  l4413 1804                                    l4405 17B8  
                                  l4157 2468                                    l4149 2420  
                                  l4181 23C2                                    l4173 238A  
                                  l4165 236A                                    l4317 0F48  
                                  l4309 0EF8                                    l4261 25A6  
                                  l4253 2568                                    l4245 2540  
                                  l4085 1FEA                                    l4077 1F44  
                                  l4093 202C                                    l4069 1EFC  
                                  l4501 0032                                    l4239 29C8  
                                  l4431 18B0                                    l4423 184C  
                                  l4415 1830                                    l4407 17CC  
                                  l4159 2470                                    l4183 23DE  
                                  l4175 23A2                                    l4343 1004  
                                  l4319 0F5C                                    l4351 10FC  
                                  l4263 25AE                                    l4255 2580  
                                  l4247 2560                                    l4079 1F54  
                                  l4271 28F8                                    l4511 009A  
                                  l4503 0046                                    l4441 18E4  
                                  l4425 1864                                    l4409 17E4  
                                  l4193 24CE                                    l4185 24A6  
                                  l4177 23AE                                    l4345 1080  
                                  l4257 258C                                    l4281 2BBC  
                                  l4089 201A                                    l4273 2914  
                                  l4265 28D6                                    l5065 06B6  
                                  l4601 0262                                    l4521 00F4  
                                  l4513 00B4                                    l4505 005A  
                                  l4361 2BEA                                    l4099 2D32  
                                  l4443 18E8                                    l4427 1868  
                                  l4371 16B8                                    l4195 24E6  
                                  l4187 24C6                                    l4179 23BA  
                                  l5067 1110                                    l4291 0CBE  
                                  l4259 2598                                    l4283 2BC0  
                                  l4267 28E8                                    l4611 02CC  
                                  l4603 0276                                    l4531 015E  
                                  l4523 0108                                    l4515 00C8  
                                  l4507 006E                                    l4363 2BEC  
                                  l4445 1904                                    l4437 18B8  
                                  l4429 1884                                    l4381 1714  
                                  l4197 24F2                                    l4293 0CD6  
                                  l4285 0CB8                                    l4277 2BAA  
                                  l3901 1A00                                    l4269 28F0  
                                  l4621 034A                                    l4613 02E0  
                                  l4605 0290                                    l4541 0176  
                                  l4525 0122                                    l4517 00DC  
                                  l4509 0086                                    l4701 06A0  
                                  l4453 115C                                    l4365 2BEE  
                                  l4357 2BDA                                    ?_pad 0014  
                                  l4439 18CC                                    l4391 174C  
                                  l4383 1730                                    l4471 2654  
                                  l4199 24FE                                    l4295 0CF0  
                                  l4279 2BAE                                    l3903 1A2E  
                                  l3911 1A68                                    l4631 039E  
                                  l4623 035E                                    l4615 030E  
                                  l4607 02A4                                    l4543 018A  
                                  l4527 0136                                    l4455 1428  
                                  l4447 1158                                    l4367 2BF0  
                                  l4359 2BE4                                    l4711 2B7A  
                                  l4393 1764                                    l4377 16C0  
                                  l4481 266C                                    l4473 2658  
                                  l4465 2178                                    l4297 0D08  
                                  l3913 1A78                                    l3905 1A4E  
                                  l3921 1D9C                                    l4641 0414  
                                  l4633 03AA                                    l4617 0322  
                                  l4609 02B8                                    l4529 014A  
                                  l4457 142A                                    l4801 211C  
                                  l4369 2CC8                                    l4713 2B84  
                                  l4721 25D4                                    l4395 1768  
                                  l4379 1710                                    l4491 26D0  
                                  l4483 269A                                    l4475 2668  
                                  l4467 226C                                    l4459 2174  
                                  l4299 0D5C                                    l3915 1A98  
                                  l3907 1A50                                    l3931 1DFC  
                                  l3923 1DAA                                    l3851 2292  
                                  l4651 04B6                                    l4635 03EA  
                                  l4619 0336                                    l4571 01FE  
                                  l4555 01A6                                    l4811 1ADE  
                                  l4803 2138                                    l4715 2B94  
                                  l4731 2638                                    l4723 25FE  
                                  l4741 2C04                                    l4397 1784  
                                  l4389 1738                                    l4485 26BA  
                                  l4469 226E                                    l3909 1A62  
                                  l3941 1E72                                    l3933 1E1A  
                                  l3925 1DCA                                    l3853 22A4  
                                  l4661 052C                                    l4653 04C2  
                                  l4645 0426                                    l4637 03F0  
                                  l4629 0368                                    l4557 01BA  
                                  l4821 1BC8                                    l4813 1B34  
                                  l4805 2144                                    l4717 2B9E  
                                  l4709 2B76                                    l4733 263A  
                                  l4725 2622                                    l4901 07B0  
                                  l4831 27C2                                    l4399 17B0  
                                  l4487 26BE                                    l3951 1EDA  
                                  l3943 1E92                                    l3935 1E22  
                                  l3927 1DCE                                    l3919 1D98  
                                  l3871 2B36                                    l3855 22AE  
                                  l3863 2AB0                                    l4663 0540  
                                  l4655 04D0                                    l4647 045E  
                                  l4639 040C                                    l4559 01D2  
                                  l4495 0000                                    l4823 1BE2  
                                  l4815 1B40                                    l4807 1ABA  
                                  l4735 2644                                    l4727 262C  
                                  l4719 25CC                                    l4751 2CBE  
                                  l4743 2CA6                                    l4911 07EC  
                                  l4903 07BA                                    l4761 2C3A  
                                  l4841 2808                                    l4833 27D4  
                                  l4489 26C0                                    l3881 1964  
                                  l3945 1EA4                                    l3937 1E36  
                                  l3929 1DDC                                    l3873 2B50  
                                  l3857 22CC                                    l3849 2280  
                                  l3865 2ABC                                    l3961 2702  
                                  l4681 05FA                                    l4665 056C  
                                  l4657 04EA                                    l4649 0472  
                                  l4673 05A8                                    l4585 021C  
                                  l4569 01EA                                    l4497 0004  
                                  l4825 1BEE                                    l4817 1B9C  
                                  l4809 1ABA                                    l4737 2646  
                                  l4729 262E                                    l4753 2CC0  
                                  l4745 2CB0                                    l4921 0812  
                                  l4913 07F4                                    l4905 07C4  
                                  l4771 2C54                                    l4763 2C44  
                                  l4843 2810                                    l4835 27DC  
                                  l3971 2C9C                                    l3891 19A6  
                                  l3883 1968                                    l3875 1932  
                                  l3939 1E44                                    l3947 1EAA  
                                  l3859 2302                                    l3867 2ACE  
                                  l3963 2716                                    l3955 26D4  
                                  l4691 0662                                    l4683 0614  
                                  l4675 05CC                                    l4667 0578  
                                  l4659 04F0                                    l4587 0230  
                                  l4499 0018                                    l4827 1C26  
                                  l4819 1BB8                                    l4739 2650  
                                  l4755 2CC2                                    l4747 2CB2  
                                  l4931 0896                                    l4923 082A  
                                  l4915 07F6                                    l4907 07CE  
                                  l4851 070E                                    l4765 2C46  
                                  l4757 2C2E                                    l4845 2816  
                                  l4837 27E4                                    l3981 2770  
                                  l3893 19C4                                    l3885 1976  
                                  l3877 1936                                    l3949 1EBA  
                                  l3869 2AD2                                    l3965 271A  
                                  l3957 26E2                                    l4693 067A  
                                  l4685 061A                                    l4677 05D8  
                                  l4669 059C                                    l4589 024A  
                                  l4781 2078                                    l4773 205A  
                                  l4749 2CB4                                    l4941 0934  
                                  l4933 08BA                                    l4925 083E  
                                  l4909 07DA                                    l4861 0720  
                                  l4853 0712                                    l4767 2C50  
                                  l4759 2C32                                    l4839 27F2  
                                  l3991 27AA                                    l3983 2778  
                                  l3975 274E                                    l3895 19CC  
                                  l3887 1996                                    l3879 1944  
                                  l3967 2738                                    l3959 26EE  
                                  l4695 0682                                    l4687 0638  
                                  l4679 05EC                                    l4791 20A2  
                                  l4783 207E                                    l4951 09E2  
                                  l4943 0970                                    l4935 08D4  
                                  l4927 086A                                    l4871 0732  
                                  l4863 0724                                    l4855 0716  
                                  l4847 0706                                    l4769 2C52  
                                  l3993 27AC                                    l3985 2786  
                                  l3977 2756                                    l3969 2C80  
                                  l3897 19E0                                    l3889 199A  
                                  l4697 069A                                    l4689 064C  
                                  l4793 20B6                                    l4785 209A  
                                  l4961 0A5A                                    l4953 0A08  
                                  l4945 097C                                    l4937 08F4  
                                  l4929 0882                                    l4881 0750  
                                  l4873 0736                                    l4865 0726  
                                  l4857 071A                                    l4849 070A  
                                  l3995 27B2                                    l3987 278C  
                                  l3979 2768                                    l3899 19EE  
                                  l4795 20CE                                    l4779 2064  
                                  l4971 0AC4                                    l4963 0A7E  
                                  l4955 0A1C                                    l4947 0980  
                                  l4939 0914                                    l4891 0780  
                                  l4883 0756                                    l4875 073A  
                                  l4867 0728                                    l4859 071E  
                                  l3989 27A2                                    l3997 143C  
                                  l4797 20D4                                    l4981 0B54  
                                  l4973 0AE0                                    l4957 0A30  
                                  l4965 0A88                                    l4949 09A6  
                                  l4893 078C                                    l4885 075A  
                                  l4877 0742                                    l4869 072C  
                                  l3999 145C                                    l4799 20F0  
                                  l4991 0BBA                                    l4983 0B62  
                                  l4975 0AEC                                    l4967 0A94  
                                  l4959 0A34                                    l4895 0796  
                                  l4887 076E                                    l4879 074A  
                                  l4993 0BCE                                    l4985 0B76  
                                  l4977 0B16                                    l4969 0AB2  
                                  l4897 079E                                    l4889 0774  
                                  l4995 0BDC                                    l4987 0B8E  
                                  l4979 0B48                                    l4899 07A8  
                                  l4997 0C42                                    l4989 0BA2  
                                  l4999 0C50                                    STR_1 FEF3  
                                  STR_2 FFCE                                    STR_3 FFE5  
                                  STR_4 FF49                                    STR_5 FFCE  
                                  STR_6 FF82                                    STR_7 FF9C  
                                  STR_8 FFB5                                    STR_9 FF67  
                                  u2000 1DAA                                    u2001 1DA6  
                                  u2010 1DDC                                    u2011 1DD8  
                                  u2100 27A2                                    u2020 1E1A  
                          ?_LEDSon_init 0001                                    u2101 279E  
                                  u2021 1E16                                    u2030 1E44  
                                  u2110 146C                                    u2031 1E40  
                                  u2111 1466                                    u2040 1E72  
                                  u2200 1680                                    u2120 146E  
                                  u2041 1E6E                                    u2201 167C  
                                  u2210 1C48                                    u2050 1EBA  
                                  u2130 1480                                    u2211 1C44  
                                  u2051 1EB6                                    u2131 147C  
                                  u2220 1D12                                    u2300 2880  
                                  u2060 26E2                                    u2140 14BC  
                                  u2221 1D0E                                    u2301 287C  
                                  u2061 26DE                                    u2141 14B8  
                                  u2230 2C68                                    u2310 248C  
                                  u2070 2738                                    u2150 14E8  
                                  u2231 2C64                                    u2311 2488  
                                  u3007 23E8                                    u2071 2734  
                                  u2151 14E4                                    u2240 2C7E  
                                  u2400 1784                                    u2080 2768  
                                  u2320 23DE                                    u2160 14FE  
                          _BAUD4CONbits 000EE9                                    u2241 2C7A  
                                  u2401 1780                                    u2081 2764  
                                  u3017 2442                                    u2321 23DA  
                                  u2161 14FA                                    u2410 1804  
                                  u2090 2786                                    u2330 2530  
                                  u2170 1638                                    u2250 1F24  
                                  u2411 1800                                    u2091 2782  
                                  u2331 252C                                    u3027 2496  
                                  u2171 1634                                    u2251 1F20  
                                  u2420 1884                                    u2340 2D16  
                                  u2180 1656                                    u2260 1F74  
                                  u2500 045E                                    u2421 1880  
                                  u3037 2848                                    u2341 2D12  
                                  u2181 1652                                    u2261 1F70  
                                  u2501 045A                                    u2430 1904  
                                  u2190 1670                                    u2270 1F94  
                                  u2350 28CA                                    u2510 052C  
                                  u2431 1900                                    u3047 2504  
                                  u2191 166C                                    u2271 1F90  
                                  u2351 28C6                                    u2511 0528  
                                  u2280 2B1E                                    u2360 25CA  
                                  u2520 0638                                    u2440 143A  
                                  u2600 0810                                    u2281 2B16  
                                  u3057 2536                                    u2361 25C6  
                                  u2521 0634                                    u2441 1436  
                                  u2601 080C                                    u2450 227E  
                                  u2370 2BD8                                    u2530 209A  
                                  u2610 0990                                    _T2PR 000FBC  
                                  u3067 1756                                    u2451 227A  
                                  u2371 2BD4                                    u2531 2096  
                                  u2611 098C                                    u2460 269A  
                                  u2380 0D04                                    u1900 2302  
                                  u2540 20F0                                    u2700 0C82  
                                  u2620 09A4                                    u3077 17D6  
                                  u2461 2696                                    u2381 0D00  
                                  u1901 22FE                                    u2541 20EC  
                                  u2701 0C7E                                    u2621 09A0  
                                  u2550 27D4                                    u2390 1730  
                                  u2470 26D0                                    u1910 2AF2  
                                  u2710 0CA4                                    u2630 0A04  
                                  u2551 27D0                                    u3087 1856  
                                  u2391 172C                                    u2471 26CC  
                                  u1911 2AEE                                    u2711 0CA0  
                                  u2631 0A00                                    u2560 27F2  
                                  u1920 2B50                                    u2480 040C  
                                  u2640 0A30                                    u2561 27EE  
                                  u3097 18D6                                    u1921 2B4C  
                                  u2481 0408                                    u2641 0A2C  
                                  u2570 2808                                    u2298 2B20  
                                  u1930 1944                                    u2490 0422  
                                  u2650 0A5A                                    u2571 2804  
                                  u1931 1940                                    u2491 041E  
                                  u2651 0A56                                    u1940 1976  
                                  u2660 0A6C                                    u1941 1972  
                                  u2661 0A64                                    u2581 07D4  
                                  u1870 2292                                    u1951 19A0  
                                  u1871 228E                                    u2807 2B8A  
                                  u2727 081C                                    u2591 07E4  
                                  u1960 19C4                                    u1880 22A4  
                                  u2680 0AB2                                    u1961 19C0  
                                  u1881 22A0                                    u2817 20C2  
                                  u2681 0AAE                                    u2737 0848  
                                  u1970 19EE                                    u1890 22CC  
                                  u2690 0AC4                                    u1971 19EA  
                                  u1891 22C8                                    u2907 0300  
                                  u2827 0024                                    u2691 0AC0  
                                  u2747 0874                                    u1980 1A2E  
                                  u1981 1A2A                                    u2917 04DC  
                                  u2837 00A6                                    u2757 0B5A  
                                  u1990 1A78                                    u2678 0A6E  
                                  u1991 1A74                                    u2927 0606  
                                  u2847 0114                                    u2767 0B80  
                                  u2937 066E                                    u2857 0196  
                                  u2777 0BAC                                    u2947 068E  
                                  u2867 01C6                                    u2787 0BD4  
                                  u2957 259E                                    u2877 020A  
                                  u2797 0C48                                    u2967 0CC8  
                                  u2887 023C                                    u2977 0CE2  
                                  u2897 0282                                    u2987 0ED6  
                                  u2997 2394              normalise_readings@red_read 001E  
                                  abs@a 0016                                    _dbuf 00DF  
                                  _main 0706                                    _dtoa 143C  
                                  _prec 00D5                                    pad@i 001B  
                                  pad@p 0018                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001D  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2826                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005C  
      clear_read_calibration@clear_read 0083                         card_response@mL 00A9  
                       card_response@mR 00AB                  __end_of_color_read_Red 2978  
                  _response_in_progress 00D9             normalise_readings@blue_read 0022  
                          ___param_bank 000000                                   ??_abs 0018  
                                 ??_pad 001A                             _turnRight45 234A  
                       __end_of___aodiv 1ABA                                   ?_main 0001  
                                 ?_dtoa 001F                         __end_of___aomod 1EFC  
                                 STR_10 FFB5                                   STR_11 FF25  
                                 STR_12 FFF4                                   ?_stop 0017  
                       __end_of___lwdiv 27C2                                   i1l441 004C  
                       __end_of___lwmod 2826                            vfpfcnvrt@fmt 0044  
                                 _TMR0H 000FD4                                   _TMR0L 000FD3  
                          main@red_read 00BB                 __end_of_sendCharSerial4 2D1C  
            __end_of_I2C_2_Master_Start 2D3C              __end_of_I2C_2_Master_Write 2D28  
                                 _flags 00DD                                   _fputc 2280  
                                 _fputs 2AB0                                   pad@fp 0014  
        determine_card@master_closeness 0004                 ??_make_master_closeness 000A  
                                 _width 00D3                                   _putch 2D46  
          card_response@ReturnHomeCards 00AF                                   main@i 01F4  
                                 dtoa@d 0021                                   dtoa@i 0040  
                                 dtoa@n 0037                                   dtoa@p 0033  
                                 dtoa@s 003F                                   dtoa@w 0035  
                   normalise_readings@i 0032                                   tablat 000FF5  
          card_response@ReturnHomeTimes 00AD                                   plusw1 000FE3  
                                 plusw2 000FDB                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2928          card_response@normalised_values 0100  
                          main@stop_all 00B9                        card_response@buf 009C  
               __end_of_color_read_Blue 2A68                   _I2C_2_Master_RepStart 2D3C  
                       ?_color_read_Red 0008                         __initialization 2A68  
                          __end_of_main 0CB6                            __end_of_dtoa 16B8  
                          __end_of_stop 2882                                  ??_main 0056  
                                ??_dtoa 0029                                  ??_stop 001B  
                         __activetblptr 000003                           main@blue_read 01F2  
                  main@clear_read_check 00B7               clear_read_calibration@buf 0081  
                          ?_setMotorPWM 0011                                  ?_fputc 0004  
                                ?_fputs 000D                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21                          main@TimerCount 00B5  
          collect_avg_readings@red_read 0011                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i1l3761 0048  
                                i1l3757 0026                                  i1l3759 0036  
                                _RG6PPS 000E88                __end_of_color_click_init 2BAA  
                                _TMR0IE 00714D                                  _TMR0IF 00719D  
                make_master_closeness@i 0028                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                                  _LowISR 0018  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0054  
                             ??___aodiv 0014                               ??___aomod 0014  
                                ___wmul 2C80                      _normalise_readings 1158  
                             ??___lwdiv 000E                               ??___lwmod 0008  
                                clear_0 2A8E                                  clear_1 2A9A  
                                isa$std 000001                                  pad@buf 0016  
                                dtoa@fp 001F                     ?_normalise_readings 001A  
                                fputc@c 0004                                  fputs@c 0011  
                                fputs@i 0012                                  fputs@s 000D  
                          __mediumconst FEF2                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                           _home_response 0CB6  
                                putch@c 0001                        __end_of_vfprintf 28D6  
                                stop@mL 0017                                  stop@mR 0019  
                     ??_initDCmotorsPWM 0004                               ??_sprintf 0056  
                     card_response@card 00A8                              __accesstop 0060  
               __end_of__initialization 2AA6                __end_of_color_read_Clear 2A18  
                       fullSpeedAhead@i 001C                __end_of_color_read_Green 29C8  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0028  
                         ___rparam_used 000001                        ?_color_read_Blue 0008  
                       _Interrupts_init 2C2E            __end_of_collect_avg_readings 1932  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 205A  
                      _reverseFullSpeed 2540                            __pidataBANK2 2CE6  
            collect_avg_readings@i_1673 001B              collect_avg_readings@i_1674 001D  
            collect_avg_readings@i_1675 001F              collect_avg_readings@i_1676 0021  
                         __end_of_fputc 234A                           __end_of_fputs 2AF4  
                         __end_of_putch 2D48                          ?_home_response 001F  
                        main@clear_read 01F5                                 ??_fputc 0008  
                               ??_fputs 0011                                 ??_putch 0004  
                            __pbssBANK0 00BF                              __pbssBANK3 0300  
                               ?_LowISR 0001                       _color_writetoaddr 2CC6  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0084  
                      motor_response@mR 0086                      ?_color_writetoaddr 0006  
                               ?___wmul 0004                      motor_response@card 0083  
                          ?_turnRight45 0017                     ??_color_writetoaddr 0007  
                        main@green_read 00BD                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                    motor_response@j_1718 0096  
               __end_of_Interrupts_init 2C58          collect_avg_readings@clear_read 000F  
                color_writetoaddr@value 0006                        ??_color_read_Red 000A  
         __end_of_make_master_closeness 2280          determine_card@predicted_colour 000C  
             __end_of_color_writetoaddr 2CE6                      _I2C_2_Master_Start 2D32  
                            _initUSART4 2CA6                      _I2C_2_Master_Write 2D1C  
                               __Hparam 0000                                 __Lparam 0000  
                     color_read_Red@tmp 000D  make_master_closeness@normalised_values 0006  
               sendStringSerial4@string 0005                       reverseFullSpeed@i 001C  
                               ___aodiv 1932                                 ___aomod 1D98  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 274E  
                   ?_I2C_2_Master_Write 0001                                 ___lwmod 27C2  
                             ?_vfprintf 0060                            turnLeft45@mL 0017  
                          turnLeft45@mR 0019                                 __pcinit 2A68  
                               __ramtop 0E00                                 __ptext0 0706  
                               __ptext1 2CA6                                 __ptext2 25CC  
                               __ptext3 2B76                                 __ptext4 2CC6  
                               __ptext5 2BDA                                 __ptext6 205A  
                               __ptext7 1ABA                                 __ptext8 1158  
                               __ptext9 0000                         ??_home_response 0023  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 16B8  
                               main@buf 015A                                 _sprintf 28D6  
                  ??_I2C_2_Master_Start 0005                    ??_I2C_2_Master_Write 0005  
                  end_of_initialization 2AA6          collect_avg_readings@green_read 0013  
                 normalise_readings@buf 001A                                 fputc@fp 0006  
                               fputs@fp 000F                       ?_color_click_init 0001  
                          turnRight45@i 001D                      ??_color_click_init 0008  
                         _card_detected 00D7                       __end_of_vfpfcnvrt 205A  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004A  
                            main@F14700 0300                              main@F14702 02AB  
                        home_response@i 0025                              ??_vfprintf 0054  
                       _initDCmotorsPWM 25CC                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0016       normalise_readings@expected_values 0024  
                         _card_response 1ABA                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0015                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 000F  
              __end_of_reverseFullSpeed 25CC                        fullSpeedAhead@mL 0017  
                      fullSpeedAhead@mR 0019                     main@expected_values 025A  
              color_writetoaddr@address 0007                 ??_I2C_2_Master_RepStart 0005  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0008                            _EUSART4RXbuf 00BF  
                          _EUSART4TXbuf 033C                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0008                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 0081  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0004  
                            main@motorL 01F7                              main@motorR 02A2  
                    ??_color_read_Clear 000A                      ??_color_read_Green 000A  
                            _turnLeft45 23F8                          __end_of_LowISR 005C  
                        _fullSpeedAhead 24A6                             vfpfcnvrt@ap 0046  
                           vfpfcnvrt@cp 0052                             vfpfcnvrt@fp 0042  
                        __end_of___wmul 2CA6                         determine_card@i 000D  
                        ?_card_response 009C                     color_read_Clear@tmp 000D  
                   start_initialization 2A68                             __end_of_abs 2B76  
                           __end_of_pad 274E                           _TxBufWriteCnt 0059  
                         ??_LEDSon_init 0004          __end_of_clear_read_calibration 2174  
                   color_read_Green@tmp 000D                  motor_response@stop_all 008C  
                              ??_LowISR 0001                 __end_of_initDCmotorsPWM 2654  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 2540  
                             _TimerFlag 00DB                                ??___wmul 0008  
                           __pdataBANK2 02AB                          _determine_card 2654  
                           __pbssCOMRAM 0058                  ??_collect_avg_readings 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                        ___aodiv@dividend 0004  
               clear_read_calibration@i 008B                          _motor_response 0000  
                   __end_of_LEDSon_init 2C2E                        ___lwdiv@dividend 000A  
                             _dtoa$2598 0031                             ?_turnLeft45 0017  
                       motor_response@i 009A                         motor_response@j 0094  
                       motor_response@k 0098                         ?_fullSpeedAhead 0017  
                         __pmediumconst FEF2                                ?___aodiv 0004  
                              ?___aomod 0004                       motor_response@buf 0081  
                      ___aodiv@quotient 0016                  __end_of_determine_card 26D4  
                              ?___lwdiv 000A                                ?___lwmod 0004  
                           __pintcodelo 0018                    I2C_2_Master_Read@ack 0006  
                       ??_card_response 0056                    I2C_2_Master_Read@tmp 0007  
                     _I2C_2_Master_Idle 2C58                       _I2C_2_Master_Init 2BDA  
                     _I2C_2_Master_Read 2AF4                       _I2C_2_Master_Stop 2D28  
                          _RxBufReadCnt 00DE            normalise_readings@clear_read 001C  
                   main@ReturnHomeCards 0200            normalise_readings@difference 0030  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0013  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                   main@ReturnHomeTimes 021E                  __end_of_motor_response 0706  
                           turnLeft45@i 001D                                ?_sprintf 0066  
          clear_read_calibration@i_1662 008D                       _sendStringSerial4 2BAA  
                   ??_I2C_2_Master_Idle 0004                     ??_I2C_2_Master_Init 0004  
                   ??_I2C_2_Master_Read 0005                          ___wmul@product 0008  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0005  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                      ?_sendStringSerial4 0005  
                              _PIE4bits 000E2D                   _make_master_closeness 2174  
                              i1u182_20 0036                                i1u182_21 0032  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0004                make_master_closeness@buf 0004  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0007  
                              _SSP2STAT 000ED8                         ?_determine_card 0004  
                             _vfpfcnvrt 1EFC               __end_of_I2C_2_Master_Idle 2C80  
             __end_of_I2C_2_Master_Init 2C04               __end_of_I2C_2_Master_Read 2B36  
                     ___wmul@multiplier 0004               __end_of_I2C_2_Master_Stop 2D32  
                          setMotorPWM@m 0011             I2C_2_Master_Write@data_byte 0005  
          normalise_readings@green_read 0020                   __end_of_home_response 1158  
                     ??_color_read_Blue 000A                            _TxBufReadCnt 0058  
                       ?_motor_response 0081                       ?_reverseFullSpeed 0017  
                             copy_data0 2A7C               __end_of_sendStringSerial4 2BDA  
                           _LEDSon_init 2C04                      ??_reverseFullSpeed 001B  
         __end_of_I2C_2_Master_RepStart 2D46                      color_read_Blue@tmp 000D  
                   __end_of_setMotorPWM 1D98                            ??_initUSART4 0004  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0008                      reverseFullSpeed@mL 0017  
                    reverseFullSpeed@mR 0019                       home_response@card 0026  
                            ?_vfpfcnvrt 0042                         ___aodiv@divisor 000C  
                       ___aodiv@counter 0014                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                            _T0CON0bits 000FD5                              _T0CON1bits 000FD6  
                       ___lwdiv@divisor 000C                      __end_of_initUSART4 2CC6  
                       ___lwdiv@counter 000E                                __ptext10 28D6  
                              __ptext11 2882                                __ptext20 1932  
                              __ptext12 1EFC                                __ptext21 2BAA  
                              __ptext13 143C                                __ptext30 2C80  
                              __ptext22 2D04                                __ptext14 26D4  
                              __ptext31 274E                                __ptext23 2540  
                              __ptext15 2AB0                                __ptext40 2D28  
                              __ptext32 2174                                __ptext24 0CB6  
                              __ptext16 2280                                __ptext41 2D32  
                              __ptext33 2654                                __ptext25 234A  
                              __ptext17 2D46                                __ptext42 2D3C  
                              __ptext34 16B8                                __ptext26 23F8  
                              __ptext18 2B36                                __ptext43 2AF4  
                              __ptext35 2928                                __ptext27 2826  
                              __ptext19 1D98                                __ptext44 2C58  
                              __ptext36 2978                                __ptext28 24A6  
                              __ptext45 27C2                                __ptext37 29C8  
                              __ptext29 1C2C                                __ptext46 2C04  
                              __ptext38 2A18                                __ptext47 2C2E  
                              __ptext39 2D1C           motor_response@ReturnHomeCards 008A  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
         motor_response@ReturnHomeTimes 0088                  ?_make_master_closeness 0004  
                              isa$xinst 000000                 card_response@clear_read 009E  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 2882                           ??_turnRight45 001B  
                              main@card 00B4                        ___aomod@dividend 0004  
                 collect_avg_readings@i 0019                              _INTCONbits 000FF2  
                           _setMotorPWM 1C2C           collect_avg_readings@blue_read 0015  
                         turnRight45@mL 0017                           turnRight45@mR 0019  
                              intlevel1 0000                               sprintf@ap 0074  
            __end_of_normalise_readings 143C            card_response@expected_values 00A6  
                      ___lwmod@dividend 0004                        ??_fullSpeedAhead 001B  
               card_response@green_read 00A2                            ??_turnLeft45 001B  
        determine_card@current_smallest 000A                         ___aomod@divisor 000C  
                           ??_vfpfcnvrt 0048                         ___aomod@counter 0014  
                card_response@blue_read 00A4                        _color_click_init 2B76  
                       home_response@mL 001F                         home_response@mR 0021  
         card_response@master_closeness 0148                                sprintf@f 0076  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                         ___lwmod@divisor 0006  
                   __end_of_turnRight45 23F8                         ___lwmod@counter 0008  
                    __end_of_turnLeft45 24A6                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0015                         _sendCharSerial4 2D04  
                 card_response@red_read 00A0                            ___aomod@sign 0015  
                      ??_determine_card 0006                           main@CardCount 01F0  
                          main@PWMcycle 00B3  
