

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Nov 24 14:19:14 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.35
    28                           ; Generated 05/05/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F67K40 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _TRISFbits	set	3974
    63   000000                     _TRISDbits	set	3972
    64   000000                     _TRISGbits	set	3975
    65   000000                     _SSP2CON2bits	set	3802
    66   000000                     _SSP2CLKPPS	set	3612
    67   000000                     _SSP2DATPPS	set	3613
    68   000000                     _RC7PPS	set	3689
    69   000000                     _RE2PPS	set	3700
    70   000000                     _TRISCbits	set	3971
    71   000000                     _TRISEbits	set	3973
    72   000000                     _TRISHbits	set	3976
    73   000000                     _T2PR	set	4028
    74   000000                     _T2CONbits	set	4029
    75   000000                     _CCPR2H	set	4006
    76   000000                     _CCPR1H	set	4010
    77   000000                     _RE4PPS	set	3702
    78   000000                     _RG6PPS	set	3720
    79   000000                     _RD5PPS	set	3695
    80   000000                     _ANSELDbits	set	3751
    81   000000                     _SSP2ADD	set	3798
    82   000000                     _SSP2CON1bits	set	3801
    83   000000                     _CCPR4H	set	3873
    84   000000                     _CCPR3H	set	3877
    85   000000                     _T2CLKCONbits	set	4031
    86   000000                     _T2HLTbits	set	4030
    87   000000                     _CCP1CONbits	set	4011
    88   000000                     _CCPTMRS0bits	set	4013
    89   000000                     _CCP2CONbits	set	4007
    90   000000                     _LATDbits	set	3964
    91   000000                     _CCP3CONbits	set	3878
    92   000000                     _CCP4CONbits	set	3874
    93   000000                     _SSP2CON2	set	3802
    94   000000                     _SSP2STAT	set	3800
    95   000000                     _SSP2BUF	set	3797
    96   000000                     _RD6PPS	set	3696
    97   000000                     _LATFbits	set	3966
    98   000000                     _LATHbits	set	3968
    99                           
   100                           ; #config settings
   101                           
   102                           	psect	cinit
   103   01FB7A                     __pcinit:
   104                           	callstack 0
   105   01FB7A                     start_initialization:
   106                           	callstack 0
   107   01FB7A                     __initialization:
   108                           	callstack 0
   109   01FB7A                     end_of_initialization:
   110                           	callstack 0
   111   01FB7A                     __end_of__initialization:
   112                           	callstack 0
   113   01FB7A  0100               	movlb	0
   114   01FB7C  EFFE  F0FE         	goto	_main	;jump to C main() function
   115                           
   116                           	psect	cstackCOMRAM
   117   000001                     __pcstackCOMRAM:
   118                           	callstack 0
   119   000001                     ??_I2C_2_Master_Idle:
   120   000001                     ?___wmul:
   121                           	callstack 0
   122   000001                     initDCmotorsPWM@PWMperiod:
   123                           	callstack 0
   124   000001                     ___wmul@multiplier:
   125                           	callstack 0
   126                           
   127                           ; 2 bytes @ 0x0
   128   000001                     	ds	1
   129   000002                     ??_I2C_2_Master_Read:
   130   000002                     I2C_2_Master_Write@data_byte:
   131                           	callstack 0
   132                           
   133                           ; 1 bytes @ 0x1
   134   000002                     	ds	1
   135   000003                     color_writetoaddr@value:
   136                           	callstack 0
   137   000003                     I2C_2_Master_Read@ack:
   138                           	callstack 0
   139   000003                     ___wmul@multiplicand:
   140                           	callstack 0
   141                           
   142                           ; 2 bytes @ 0x2
   143   000003                     	ds	1
   144   000004                     color_writetoaddr@address:
   145                           	callstack 0
   146   000004                     I2C_2_Master_Read@tmp:
   147                           	callstack 0
   148                           
   149                           ; 1 bytes @ 0x3
   150   000004                     	ds	1
   151   000005                     ??_color_click_init:
   152   000005                     ??_color_read_Red:
   153   000005                     ___wmul@product:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x4
   157   000005                     	ds	2
   158   000007                     ?___lwdiv:
   159                           	callstack 0
   160   000007                     ___lwdiv@dividend:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x6
   164   000007                     	ds	1
   165   000008                     color_read_Red@tmp:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x7
   169   000008                     	ds	1
   170   000009                     ___lwdiv@divisor:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x8
   174   000009                     	ds	2
   175   00000B                     ___lwdiv@quotient:
   176                           	callstack 0
   177                           
   178                           ; 2 bytes @ 0xA
   179   00000B                     	ds	2
   180   00000D                     ___lwdiv@counter:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0xC
   184   00000D                     	ds	1
   185   00000E                     setMotorPWM@m:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0xD
   189   00000E                     	ds	2
   190   000010                     ??_setMotorPWM:
   191                           
   192                           ; 1 bytes @ 0xF
   193   000010                     	ds	2
   194   000012                     setMotorPWM@posDuty:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x11
   198   000012                     	ds	1
   199   000013                     setMotorPWM@negDuty:
   200                           	callstack 0
   201                           
   202                           ; 1 bytes @ 0x12
   203   000013                     	ds	1
   204   000014                     main@PWMcycle:
   205                           	callstack 0
   206                           
   207                           ; 1 bytes @ 0x13
   208   000014                     	ds	1
   209   000015                     main@motorL:
   210                           	callstack 0
   211                           
   212                           ; 9 bytes @ 0x14
   213   000015                     	ds	9
   214   00001E                     main@motorR:
   215                           	callstack 0
   216                           
   217                           ; 9 bytes @ 0x1D
   218   00001E                     	ds	9
   219                           
   220 ;;
   221 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   222 ;;
   223 ;; *************** function _main *****************
   224 ;; Defined at:
   225 ;;		line 16 in file "main.c"
   226 ;; Parameters:    Size  Location     Type
   227 ;;		None
   228 ;; Auto vars:     Size  Location     Type
   229 ;;  motorR          9   29[COMRAM] struct DC_motor
   230 ;;  motorL          9   20[COMRAM] struct DC_motor
   231 ;;  PWMcycle        1   19[COMRAM] unsigned char 
   232 ;; Return value:  Size  Location     Type
   233 ;;                  1    wreg      void 
   234 ;; Registers used:
   235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   236 ;; Tracked objects:
   237 ;;		On entry : 0/0
   238 ;;		On exit  : 0/0
   239 ;;		Unchanged: 0/0
   240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   242 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   244 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   245 ;;Total ram usage:       19 bytes
   246 ;; Hardware stack levels required when called: 4
   247 ;; This function calls:
   248 ;;		_I2C_2_Master_Init
   249 ;;		_color_click_init
   250 ;;		_color_read_Red
   251 ;;		_initDCmotorsPWM
   252 ;;		_setMotorPWM
   253 ;; This function is called by:
   254 ;;		Startup code after reset
   255 ;; This function uses a non-reentrant model
   256 ;;
   257                           
   258                           	psect	text0
   259   01FDFC                     __ptext0:
   260                           	callstack 0
   261   01FDFC                     _main:
   262                           	callstack 27
   263   01FDFC                     
   264                           ;main.c: 18:     TRISDbits.TRISD7 = 0;
   265   01FDFC  9E84               	bcf	132,7,c	;volatile
   266                           
   267                           ;main.c: 19:     LATDbits.LATD7 = 1;
   268   01FDFE  8E7C               	bsf	124,7,c	;volatile
   269                           
   270                           ;main.c: 21:     TRISHbits.TRISH1 = 0;
   271   01FE00  9288               	bcf	136,1,c	;volatile
   272                           
   273                           ;main.c: 22:     TRISHbits.TRISH0 = 0;
   274   01FE02  9088               	bcf	136,0,c	;volatile
   275                           
   276                           ;main.c: 23:     TRISDbits.TRISD4 = 0;
   277   01FE04  9884               	bcf	132,4,c	;volatile
   278                           
   279                           ;main.c: 24:     TRISDbits.TRISD3 = 0;
   280   01FE06  9684               	bcf	132,3,c	;volatile
   281                           
   282                           ;main.c: 25:     TRISFbits.TRISF0 = 0;
   283   01FE08  9086               	bcf	134,0,c	;volatile
   284                           
   285                           ;main.c: 27:     LATDbits.LATD4 = 1;
   286   01FE0A  887C               	bsf	124,4,c	;volatile
   287                           
   288                           ;main.c: 28:     LATDbits.LATD3 = 1;
   289   01FE0C  867C               	bsf	124,3,c	;volatile
   290                           
   291                           ;main.c: 29:     LATHbits.LATH0 = 1;
   292   01FE0E  8080               	bsf	128,0,c	;volatile
   293                           
   294                           ;main.c: 30:     LATHbits.LATH1 = 1;
   295   01FE10  8280               	bsf	128,1,c	;volatile
   296                           
   297                           ;main.c: 31:     LATFbits.LATF0 = 1;
   298   01FE12  807E               	bsf	126,0,c	;volatile
   299   01FE14                     
   300                           ;main.c: 33:     I2C_2_Master_Init();
   301   01FE14  EC0C  F0FE         	call	_I2C_2_Master_Init	;wreg free
   302   01FE18                     
   303                           ;main.c: 34:     color_click_init();
   304   01FE18  EC21  F0FE         	call	_color_click_init	;wreg free
   305   01FE1C                     
   306                           ;main.c: 35:     initDCmotorsPWM(10);
   307   01FE1C  0E00               	movlw	0
   308   01FE1E  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   309   01FE20  0E0A               	movlw	10
   310   01FE22  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   311   01FE24  ECBA  F0FE         	call	_initDCmotorsPWM	;wreg free
   312   01FE28                     
   313                           ;main.c: 37:     unsigned char PWMcycle = T2PR;
   314   01FE28  CFBC F014          	movff	4028,main@PWMcycle	;volatile
   315   01FE2C                     
   316                           ;main.c: 39:     struct DC_motor motorL, motorR;;main.c: 41:     motorL.power=0;
   317   01FE2C  0E00               	movlw	0
   318   01FE2E  6E15               	movwf	main@motorL^0,c
   319   01FE30                     
   320                           ;main.c: 42:     motorL.direction=1;
   321   01FE30  0E01               	movlw	1
   322   01FE32  6E16               	movwf	(main@motorL+1)^0,c
   323   01FE34                     
   324                           ;main.c: 43:     motorL.brakemode=1;
   325   01FE34  0E01               	movlw	1
   326   01FE36  6E17               	movwf	(main@motorL+2)^0,c
   327   01FE38                     
   328                           ;main.c: 44:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   329   01FE38  0EAA               	movlw	170
   330   01FE3A  6E1A               	movwf	(main@motorL+5)^0,c
   331   01FE3C  0E0F               	movlw	15
   332   01FE3E  6E1B               	movwf	(main@motorL+6)^0,c
   333   01FE40                     
   334                           ;main.c: 45:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   335   01FE40  0EA6               	movlw	166
   336   01FE42  6E1C               	movwf	(main@motorL+7)^0,c
   337   01FE44  0E0F               	movlw	15
   338   01FE46  6E1D               	movwf	(main@motorL+8)^0,c
   339   01FE48                     
   340                           ;main.c: 46:     motorL.PWMperiod=PWMcycle;
   341   01FE48  C014  F018         	movff	main@PWMcycle,main@motorL+3
   342   01FE4C  6A19               	clrf	(main@motorL+4)^0,c
   343   01FE4E                     
   344                           ;main.c: 48:     motorR.power=0;
   345   01FE4E  0E00               	movlw	0
   346   01FE50  6E1E               	movwf	main@motorR^0,c
   347   01FE52                     
   348                           ;main.c: 49:     motorR.direction=1;
   349   01FE52  0E01               	movlw	1
   350   01FE54  6E1F               	movwf	(main@motorR+1)^0,c
   351   01FE56                     
   352                           ;main.c: 50:     motorR.brakemode=1;
   353   01FE56  0E01               	movlw	1
   354   01FE58  6E20               	movwf	(main@motorR+2)^0,c
   355   01FE5A                     
   356                           ;main.c: 51:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   357   01FE5A  0E25               	movlw	37
   358   01FE5C  6E23               	movwf	(main@motorR+5)^0,c
   359   01FE5E  0E0F               	movlw	15
   360   01FE60  6E24               	movwf	(main@motorR+6)^0,c
   361   01FE62                     
   362                           ;main.c: 52:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   363   01FE62  0E21               	movlw	33
   364   01FE64  6E25               	movwf	(main@motorR+7)^0,c
   365   01FE66  0E0F               	movlw	15
   366   01FE68  6E26               	movwf	(main@motorR+8)^0,c
   367   01FE6A                     
   368                           ;main.c: 53:     motorR.PWMperiod=PWMcycle;
   369   01FE6A  C014  F021         	movff	main@PWMcycle,main@motorR+3
   370   01FE6E  6A22               	clrf	(main@motorR+4)^0,c
   371   01FE70                     
   372                           ;main.c: 55:     setMotorPWM(&motorL);
   373   01FE70  0E15               	movlw	low main@motorL
   374   01FE72  6E0E               	movwf	setMotorPWM@m^0,c
   375   01FE74  0E00               	movlw	high main@motorL
   376   01FE76  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   377   01FE78  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   378   01FE7C                     
   379                           ;main.c: 56:     setMotorPWM(&motorR);
   380   01FE7C  0E1E               	movlw	low main@motorR
   381   01FE7E  6E0E               	movwf	setMotorPWM@m^0,c
   382   01FE80  0E00               	movlw	high main@motorR
   383   01FE82  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   384   01FE84  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   385   01FE88                     l186:
   386                           
   387                           ;main.c: 64:         color_read_Red();
   388   01FE88  EC5C  F0FE         	call	_color_read_Red	;wreg free
   389   01FE8C  EF44  F0FF         	goto	l186
   390   01FE90  EF01  F000         	goto	start
   391   01FE94                     __end_of_main:
   392                           	callstack 0
   393                           
   394 ;; *************** function _setMotorPWM *****************
   395 ;; Defined at:
   396 ;;		line 61 in file "dc_motor.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  m               2   13[COMRAM] PTR struct DC_motor
   399 ;;		 -> main@motorR(9), main@motorL(9), 
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  negDuty         1   18[COMRAM] unsigned char 
   402 ;;  posDuty         1   17[COMRAM] unsigned char 
   403 ;; Return value:  Size  Location     Type
   404 ;;                  1    wreg      void 
   405 ;; Registers used:
   406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   407 ;; Tracked objects:
   408 ;;		On entry : 0/0
   409 ;;		On exit  : 0/0
   410 ;;		Unchanged: 0/0
   411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   416 ;;Total ram usage:        6 bytes
   417 ;; Hardware stack levels used: 1
   418 ;; Hardware stack levels required when called: 1
   419 ;; This function calls:
   420 ;;		___lwdiv
   421 ;;		___wmul
   422 ;; This function is called by:
   423 ;;		_main
   424 ;;		_stop
   425 ;;		_turnLeft
   426 ;;		_turnRight
   427 ;;		_fullSpeedAhead
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431                           	psect	text1
   432   01FE94                     __ptext1:
   433                           	callstack 0
   434   01FE94                     _setMotorPWM:
   435                           	callstack 29
   436   01FE94                     
   437                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
   438   01FE94  EE20 F002          	lfsr	2,2
   439   01FE98  500E               	movf	setMotorPWM@m^0,w,c
   440   01FE9A  26D9               	addwf	fsr2l,f,c
   441   01FE9C  500F               	movf	(setMotorPWM@m+1)^0,w,c
   442   01FE9E  22DA               	addwfc	fsr2h,f,c
   443   01FEA0  50DF               	movf	indf2,w,c
   444   01FEA2  B4D8               	btfsc	status,2,c
   445   01FEA4  EF56  F0FF         	goto	u181
   446   01FEA8  EF58  F0FF         	goto	u180
   447   01FEAC                     u181:
   448   01FEAC  EF8C  F0FF         	goto	l1165
   449   01FEB0                     u180:
   450   01FEB0                     
   451                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
   452   01FEB0  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   453   01FEB4  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   454   01FEB8  50DF               	movf	indf2,w,c
   455   01FEBA  6E10               	movwf	??_setMotorPWM^0,c
   456   01FEBC  5010               	movf	??_setMotorPWM^0,w,c
   457   01FEBE  6E01               	movwf	___wmul@multiplier^0,c
   458   01FEC0  6A02               	clrf	(___wmul@multiplier+1)^0,c
   459   01FEC2  EE20 F003          	lfsr	2,3
   460   01FEC6  500E               	movf	setMotorPWM@m^0,w,c
   461   01FEC8  26D9               	addwf	fsr2l,f,c
   462   01FECA  500F               	movf	(setMotorPWM@m+1)^0,w,c
   463   01FECC  22DA               	addwfc	fsr2h,f,c
   464   01FECE  CFDE F003          	movff	postinc2,___wmul@multiplicand
   465   01FED2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   466   01FED6  ECE5  F0FD         	call	___wmul	;wreg free
   467   01FEDA  C001  F007         	movff	?___wmul,___lwdiv@dividend
   468   01FEDE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   469   01FEE2  0E00               	movlw	0
   470   01FEE4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   471   01FEE6  0E64               	movlw	100
   472   01FEE8  6E09               	movwf	___lwdiv@divisor^0,c
   473   01FEEA  EC80  F0FE         	call	___lwdiv	;wreg free
   474   01FEEE  EE20 F003          	lfsr	2,3
   475   01FEF2  500E               	movf	setMotorPWM@m^0,w,c
   476   01FEF4  26D9               	addwf	fsr2l,f,c
   477   01FEF6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   478   01FEF8  22DA               	addwfc	fsr2h,f,c
   479   01FEFA  50DF               	movf	indf2,w,c
   480   01FEFC  6E11               	movwf	(??_setMotorPWM+1)^0,c
   481   01FEFE  5007               	movf	?___lwdiv^0,w,c
   482   01FF00  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
   483   01FF02  6E12               	movwf	setMotorPWM@posDuty^0,c
   484   01FF04                     
   485                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
   486   01FF04  EE20 F003          	lfsr	2,3
   487   01FF08  500E               	movf	setMotorPWM@m^0,w,c
   488   01FF0A  26D9               	addwf	fsr2l,f,c
   489   01FF0C  500F               	movf	(setMotorPWM@m+1)^0,w,c
   490   01FF0E  22DA               	addwfc	fsr2h,f,c
   491   01FF10  50DF               	movf	indf2,w,c
   492   01FF12  6E13               	movwf	setMotorPWM@negDuty^0,c
   493                           
   494                           ;dc_motor.c: 68:     }
   495   01FF14  EFAF  F0FF         	goto	l1169
   496   01FF18                     l1165:
   497                           
   498                           ;dc_motor.c: 70:         posDuty=0;
   499   01FF18  0E00               	movlw	0
   500   01FF1A  6E12               	movwf	setMotorPWM@posDuty^0,c
   501   01FF1C                     
   502                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
   503   01FF1C  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   504   01FF20  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   505   01FF24  50DF               	movf	indf2,w,c
   506   01FF26  6E10               	movwf	??_setMotorPWM^0,c
   507   01FF28  5010               	movf	??_setMotorPWM^0,w,c
   508   01FF2A  6E01               	movwf	___wmul@multiplier^0,c
   509   01FF2C  6A02               	clrf	(___wmul@multiplier+1)^0,c
   510   01FF2E  EE20 F003          	lfsr	2,3
   511   01FF32  500E               	movf	setMotorPWM@m^0,w,c
   512   01FF34  26D9               	addwf	fsr2l,f,c
   513   01FF36  500F               	movf	(setMotorPWM@m+1)^0,w,c
   514   01FF38  22DA               	addwfc	fsr2h,f,c
   515   01FF3A  CFDE F003          	movff	postinc2,___wmul@multiplicand
   516   01FF3E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   517   01FF42  ECE5  F0FD         	call	___wmul	;wreg free
   518   01FF46  C001  F007         	movff	?___wmul,___lwdiv@dividend
   519   01FF4A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   520   01FF4E  0E00               	movlw	0
   521   01FF50  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   522   01FF52  0E64               	movlw	100
   523   01FF54  6E09               	movwf	___lwdiv@divisor^0,c
   524   01FF56  EC80  F0FE         	call	___lwdiv	;wreg free
   525   01FF5A  5007               	movf	?___lwdiv^0,w,c
   526   01FF5C  6E13               	movwf	setMotorPWM@negDuty^0,c
   527   01FF5E                     l1169:
   528                           
   529                           ;dc_motor.c: 74:     if (m->direction) {
   530   01FF5E  EE20 F001          	lfsr	2,1
   531   01FF62  500E               	movf	setMotorPWM@m^0,w,c
   532   01FF64  26D9               	addwf	fsr2l,f,c
   533   01FF66  500F               	movf	(setMotorPWM@m+1)^0,w,c
   534   01FF68  22DA               	addwfc	fsr2h,f,c
   535   01FF6A  50DF               	movf	indf2,w,c
   536   01FF6C  B4D8               	btfsc	status,2,c
   537   01FF6E  EFBB  F0FF         	goto	u191
   538   01FF72  EFBD  F0FF         	goto	u190
   539   01FF76                     u191:
   540   01FF76  EFDF  F0FF         	goto	l1173
   541   01FF7A                     u190:
   542   01FF7A                     
   543                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
   544   01FF7A  EE20 F005          	lfsr	2,5
   545   01FF7E  500E               	movf	setMotorPWM@m^0,w,c
   546   01FF80  26D9               	addwf	fsr2l,f,c
   547   01FF82  500F               	movf	(setMotorPWM@m+1)^0,w,c
   548   01FF84  22DA               	addwfc	fsr2h,f,c
   549   01FF86  CFDE F010          	movff	postinc2,??_setMotorPWM
   550   01FF8A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   551   01FF8E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   552   01FF92  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   553   01FF96  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   554                           
   555                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
   556   01FF9A  EE20 F007          	lfsr	2,7
   557   01FF9E  500E               	movf	setMotorPWM@m^0,w,c
   558   01FFA0  26D9               	addwf	fsr2l,f,c
   559   01FFA2  500F               	movf	(setMotorPWM@m+1)^0,w,c
   560   01FFA4  22DA               	addwfc	fsr2h,f,c
   561   01FFA6  CFDE F010          	movff	postinc2,??_setMotorPWM
   562   01FFAA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   563   01FFAE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   564   01FFB2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   565   01FFB6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   566                           
   567                           ;dc_motor.c: 77:     } else {
   568   01FFBA  EFFF  F0FF         	goto	l77
   569   01FFBE                     l1173:
   570                           
   571                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
   572   01FFBE  EE20 F005          	lfsr	2,5
   573   01FFC2  500E               	movf	setMotorPWM@m^0,w,c
   574   01FFC4  26D9               	addwf	fsr2l,f,c
   575   01FFC6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   576   01FFC8  22DA               	addwfc	fsr2h,f,c
   577   01FFCA  CFDE F010          	movff	postinc2,??_setMotorPWM
   578   01FFCE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   579   01FFD2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   580   01FFD6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   581   01FFDA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   582                           
   583                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
   584   01FFDE  EE20 F007          	lfsr	2,7
   585   01FFE2  500E               	movf	setMotorPWM@m^0,w,c
   586   01FFE4  26D9               	addwf	fsr2l,f,c
   587   01FFE6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   588   01FFE8  22DA               	addwfc	fsr2h,f,c
   589   01FFEA  CFDE F010          	movff	postinc2,??_setMotorPWM
   590   01FFEE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   591   01FFF2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   592   01FFF6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   593   01FFFA  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   594   01FFFE                     l77:
   595   01FFFE  0012               	return		;funcret
   596   020000                     __end_of_setMotorPWM:
   597                           	callstack 0
   598                           
   599 ;; *************** function ___wmul *****************
   600 ;; Defined at:
   601 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  multiplier      2    0[COMRAM] unsigned int 
   604 ;;  multiplicand    2    2[COMRAM] unsigned int 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  product         2    4[COMRAM] unsigned int 
   607 ;; Return value:  Size  Location     Type
   608 ;;                  2    0[COMRAM] unsigned int 
   609 ;; Registers used:
   610 ;;		wreg, status,2, status,0, prodl, prodh
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   617 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   620 ;;Total ram usage:        6 bytes
   621 ;; Hardware stack levels used: 1
   622 ;; This function calls:
   623 ;;		Nothing
   624 ;; This function is called by:
   625 ;;		_setMotorPWM
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text2
   630   01FBCA                     __ptext2:
   631                           	callstack 0
   632   01FBCA                     ___wmul:
   633                           	callstack 29
   634   01FBCA  5001               	movf	___wmul@multiplier^0,w,c
   635   01FBCC  0203               	mulwf	___wmul@multiplicand^0,c
   636   01FBCE  CFF3 F005          	movff	prodl,___wmul@product
   637   01FBD2  CFF4 F006          	movff	prodh,___wmul@product+1
   638   01FBD6  5001               	movf	___wmul@multiplier^0,w,c
   639   01FBD8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   640   01FBDA  50F3               	movf	243,w,c
   641   01FBDC  2606               	addwf	(___wmul@product+1)^0,f,c
   642   01FBDE  5002               	movf	(___wmul@multiplier+1)^0,w,c
   643   01FBE0  0203               	mulwf	___wmul@multiplicand^0,c
   644   01FBE2  50F3               	movf	243,w,c
   645   01FBE4  2606               	addwf	(___wmul@product+1)^0,f,c
   646   01FBE6  C005  F001         	movff	___wmul@product,?___wmul
   647   01FBEA  C006  F002         	movff	___wmul@product+1,?___wmul+1
   648   01FBEE  0012               	return		;funcret
   649   01FBF0                     __end_of___wmul:
   650                           	callstack 0
   651                           
   652 ;; *************** function ___lwdiv *****************
   653 ;; Defined at:
   654 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  dividend        2    6[COMRAM] unsigned int 
   657 ;;  divisor         2    8[COMRAM] unsigned int 
   658 ;; Auto vars:     Size  Location     Type
   659 ;;  quotient        2   10[COMRAM] unsigned int 
   660 ;;  counter         1   12[COMRAM] unsigned char 
   661 ;; Return value:  Size  Location     Type
   662 ;;                  2    6[COMRAM] unsigned int 
   663 ;; Registers used:
   664 ;;		wreg, status,2, status,0
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   671 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   673 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   674 ;;Total ram usage:        7 bytes
   675 ;; Hardware stack levels used: 1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_setMotorPWM
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           	psect	text3
   684   01FD00                     __ptext3:
   685                           	callstack 0
   686   01FD00                     ___lwdiv:
   687                           	callstack 29
   688   01FD00  0E00               	movlw	0
   689   01FD02  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
   690   01FD04  0E00               	movlw	0
   691   01FD06  6E0B               	movwf	___lwdiv@quotient^0,c
   692   01FD08  5009               	movf	___lwdiv@divisor^0,w,c
   693   01FD0A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
   694   01FD0C  B4D8               	btfsc	status,2,c
   695   01FD0E  EF8B  F0FE         	goto	u151
   696   01FD12  EF8D  F0FE         	goto	u150
   697   01FD16                     u151:
   698   01FD16  EFB5  F0FE         	goto	l683
   699   01FD1A                     u150:
   700   01FD1A  0E01               	movlw	1
   701   01FD1C  6E0D               	movwf	___lwdiv@counter^0,c
   702   01FD1E  EF95  F0FE         	goto	l1113
   703   01FD22                     l1111:
   704   01FD22  90D8               	bcf	status,0,c
   705   01FD24  3609               	rlcf	___lwdiv@divisor^0,f,c
   706   01FD26  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
   707   01FD28  2A0D               	incf	___lwdiv@counter^0,f,c
   708   01FD2A                     l1113:
   709   01FD2A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
   710   01FD2C  EF9A  F0FE         	goto	u161
   711   01FD30  EF9C  F0FE         	goto	u160
   712   01FD34                     u161:
   713   01FD34  EF91  F0FE         	goto	l1111
   714   01FD38                     u160:
   715   01FD38                     l1115:
   716   01FD38  90D8               	bcf	status,0,c
   717   01FD3A  360B               	rlcf	___lwdiv@quotient^0,f,c
   718   01FD3C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
   719   01FD3E  5009               	movf	___lwdiv@divisor^0,w,c
   720   01FD40  5C07               	subwf	___lwdiv@dividend^0,w,c
   721   01FD42  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   722   01FD44  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
   723   01FD46  A0D8               	btfss	status,0,c
   724   01FD48  EFA8  F0FE         	goto	u171
   725   01FD4C  EFAA  F0FE         	goto	u170
   726   01FD50                     u171:
   727   01FD50  EFAF  F0FE         	goto	l1123
   728   01FD54                     u170:
   729   01FD54  5009               	movf	___lwdiv@divisor^0,w,c
   730   01FD56  5E07               	subwf	___lwdiv@dividend^0,f,c
   731   01FD58  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   732   01FD5A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
   733   01FD5C  800B               	bsf	___lwdiv@quotient^0,0,c
   734   01FD5E                     l1123:
   735   01FD5E  90D8               	bcf	status,0,c
   736   01FD60  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
   737   01FD62  3209               	rrcf	___lwdiv@divisor^0,f,c
   738   01FD64  2E0D               	decfsz	___lwdiv@counter^0,f,c
   739   01FD66  EF9C  F0FE         	goto	l1115
   740   01FD6A                     l683:
   741   01FD6A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
   742   01FD6E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
   743   01FD72  0012               	return		;funcret
   744   01FD74                     __end_of___lwdiv:
   745                           	callstack 0
   746                           
   747 ;; *************** function _initDCmotorsPWM *****************
   748 ;; Defined at:
   749 ;;		line 6 in file "dc_motor.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, status,2
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   763 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   767 ;;Total ram usage:        2 bytes
   768 ;; Hardware stack levels used: 1
   769 ;; This function calls:
   770 ;;		Nothing
   771 ;; This function is called by:
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text4
   777   01FD74                     __ptext4:
   778                           	callstack 0
   779   01FD74                     _initDCmotorsPWM:
   780                           	callstack 30
   781   01FD74                     
   782                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
   783   01FD74  9485               	bcf	133,2,c	;volatile
   784                           
   785                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
   786   01FD76  9885               	bcf	133,4,c	;volatile
   787                           
   788                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
   789   01FD78  9E83               	bcf	131,7,c	;volatile
   790                           
   791                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
   792   01FD7A  9C87               	bcf	135,6,c	;volatile
   793   01FD7C                     
   794                           ;dc_motor.c: 14:     RE2PPS=0x05;
   795   01FD7C  0E05               	movlw	5
   796   01FD7E  010E               	movlb	14	; () banked
   797   01FD80  6F74               	movwf	116,b	;volatile
   798                           
   799                           ;dc_motor.c: 15:     RE4PPS=0x06;
   800   01FD82  0E06               	movlw	6
   801   01FD84  6F76               	movwf	118,b	;volatile
   802                           
   803                           ;dc_motor.c: 16:     RC7PPS=0x07;
   804   01FD86  0E07               	movlw	7
   805   01FD88  6F69               	movwf	105,b	;volatile
   806                           
   807                           ;dc_motor.c: 17:     RG6PPS=0x08;
   808   01FD8A  0E08               	movlw	8
   809   01FD8C  6F88               	movwf	136,b	;volatile
   810                           
   811                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
   812   01FD8E  50BD               	movf	189,w,c	;volatile
   813   01FD90  0B8F               	andlw	-113
   814   01FD92  0940               	iorlw	64
   815   01FD94  6EBD               	movwf	189,c	;volatile
   816                           
   817                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
   818   01FD96  0EE0               	movlw	-32
   819   01FD98  16BE               	andwf	190,f,c	;volatile
   820                           
   821                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
   822   01FD9A  50BF               	movf	191,w,c	;volatile
   823   01FD9C  0BF0               	andlw	-16
   824   01FD9E  0901               	iorlw	1
   825   01FDA0  6EBF               	movwf	191,c	;volatile
   826                           
   827                           ;dc_motor.c: 26:     T2PR=99;
   828   01FDA2  0E63               	movlw	99
   829   01FDA4  6EBC               	movwf	188,c	;volatile
   830   01FDA6                     
   831                           ; BSR set to: 14
   832                           ;dc_motor.c: 27:     T2CONbits.ON=1;
   833   01FDA6  8EBD               	bsf	189,7,c	;volatile
   834                           
   835                           ;dc_motor.c: 31:     CCPR1H=0;
   836   01FDA8  0E00               	movlw	0
   837   01FDAA  6EAA               	movwf	170,c	;volatile
   838                           
   839                           ;dc_motor.c: 32:     CCPR2H=0;
   840   01FDAC  0E00               	movlw	0
   841   01FDAE  6EA6               	movwf	166,c	;volatile
   842                           
   843                           ;dc_motor.c: 33:     CCPR3H=0;
   844   01FDB0  0E00               	movlw	0
   845   01FDB2  010F               	movlb	15	; () banked
   846   01FDB4  6F25               	movwf	37,b	;volatile
   847                           
   848                           ;dc_motor.c: 34:     CCPR4H=0;
   849   01FDB6  0E00               	movlw	0
   850   01FDB8  6F21               	movwf	33,b	;volatile
   851                           
   852                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
   853   01FDBA  0EFC               	movlw	-4
   854   01FDBC  16AD               	andwf	173,f,c	;volatile
   855                           
   856                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
   857   01FDBE  0EF3               	movlw	-13
   858   01FDC0  16AD               	andwf	173,f,c	;volatile
   859                           
   860                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
   861   01FDC2  0ECF               	movlw	-49
   862   01FDC4  16AD               	andwf	173,f,c	;volatile
   863                           
   864                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
   865   01FDC6  0E3F               	movlw	-193
   866   01FDC8  16AD               	andwf	173,f,c	;volatile
   867   01FDCA                     
   868                           ; BSR set to: 15
   869                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
   870   01FDCA  88AB               	bsf	171,4,c	;volatile
   871                           
   872                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
   873   01FDCC  50AB               	movf	171,w,c	;volatile
   874   01FDCE  0BF0               	andlw	-16
   875   01FDD0  090C               	iorlw	12
   876   01FDD2  6EAB               	movwf	171,c	;volatile
   877   01FDD4                     
   878                           ; BSR set to: 15
   879                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
   880   01FDD4  8EAB               	bsf	171,7,c	;volatile
   881   01FDD6                     
   882                           ; BSR set to: 15
   883                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
   884   01FDD6  88A7               	bsf	167,4,c	;volatile
   885                           
   886                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
   887   01FDD8  50A7               	movf	167,w,c	;volatile
   888   01FDDA  0BF0               	andlw	-16
   889   01FDDC  090C               	iorlw	12
   890   01FDDE  6EA7               	movwf	167,c	;volatile
   891   01FDE0                     
   892                           ; BSR set to: 15
   893                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
   894   01FDE0  8EA7               	bsf	167,7,c	;volatile
   895   01FDE2                     
   896                           ; BSR set to: 15
   897                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
   898   01FDE2  8926               	bsf	38,4,b	;volatile
   899                           
   900                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
   901   01FDE4  5126               	movf	38,w,b	;volatile
   902   01FDE6  0BF0               	andlw	-16
   903   01FDE8  090C               	iorlw	12
   904   01FDEA  6F26               	movwf	38,b	;volatile
   905   01FDEC                     
   906                           ; BSR set to: 15
   907                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
   908   01FDEC  8F26               	bsf	38,7,b	;volatile
   909   01FDEE                     
   910                           ; BSR set to: 15
   911                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
   912   01FDEE  8922               	bsf	34,4,b	;volatile
   913                           
   914                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
   915   01FDF0  5122               	movf	34,w,b	;volatile
   916   01FDF2  0BF0               	andlw	-16
   917   01FDF4  090C               	iorlw	12
   918   01FDF6  6F22               	movwf	34,b	;volatile
   919   01FDF8                     
   920                           ; BSR set to: 15
   921                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
   922   01FDF8  8F22               	bsf	34,7,b	;volatile
   923   01FDFA                     
   924                           ; BSR set to: 15
   925   01FDFA  0012               	return		;funcret
   926   01FDFC                     __end_of_initDCmotorsPWM:
   927                           	callstack 0
   928                           
   929 ;; *************** function _color_read_Red *****************
   930 ;; Defined at:
   931 ;;		line 29 in file "color.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  tmp             2    7[COMRAM] unsigned int 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  2   24[None  ] unsigned int 
   938 ;; Registers used:
   939 ;;		wreg, status,2, status,0, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   947 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   948 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   949 ;;Total ram usage:        5 bytes
   950 ;; Hardware stack levels used: 1
   951 ;; Hardware stack levels required when called: 2
   952 ;; This function calls:
   953 ;;		_I2C_2_Master_Read
   954 ;;		_I2C_2_Master_RepStart
   955 ;;		_I2C_2_Master_Start
   956 ;;		_I2C_2_Master_Stop
   957 ;;		_I2C_2_Master_Write
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text5
   964   01FCB8                     __ptext5:
   965                           	callstack 0
   966   01FCB8                     _color_read_Red:
   967                           	callstack 28
   968   01FCB8                     
   969                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
   970   01FCB8  ECC0  F0FD         	call	_I2C_2_Master_Start	;wreg free
   971                           
   972                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
   973   01FCBC  0E52               	movlw	82
   974   01FCBE  ECCF  F0FD         	call	_I2C_2_Master_Write
   975                           
   976                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
   977   01FCC2  0EB6               	movlw	182
   978   01FCC4  ECCF  F0FD         	call	_I2C_2_Master_Write
   979                           
   980                           ;color.c: 35:  I2C_2_Master_RepStart();
   981   01FCC8  ECCA  F0FD         	call	_I2C_2_Master_RepStart	;wreg free
   982                           
   983                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
   984   01FCCC  0E53               	movlw	83
   985   01FCCE  ECCF  F0FD         	call	_I2C_2_Master_Write
   986                           
   987                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
   988   01FCD2  0E01               	movlw	1
   989   01FCD4  EC3B  F0FE         	call	_I2C_2_Master_Read
   990   01FCD8  6E05               	movwf	??_color_read_Red^0,c
   991   01FCDA  5005               	movf	??_color_read_Red^0,w,c
   992   01FCDC  6E08               	movwf	color_read_Red@tmp^0,c
   993   01FCDE  6A09               	clrf	(color_read_Red@tmp+1)^0,c
   994                           
   995                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
   996   01FCE0  0E00               	movlw	0
   997   01FCE2  EC3B  F0FE         	call	_I2C_2_Master_Read
   998   01FCE6  6E05               	movwf	??_color_read_Red^0,c
   999   01FCE8  5005               	movf	??_color_read_Red^0,w,c
  1000   01FCEA  6E07               	movwf	(??_color_read_Red+2)^0,c
  1001   01FCEC  6A06               	clrf	(??_color_read_Red+1)^0,c
  1002   01FCEE  5008               	movf	color_read_Red@tmp^0,w,c
  1003   01FCF0  1006               	iorwf	(??_color_read_Red+1)^0,w,c
  1004   01FCF2  6E08               	movwf	color_read_Red@tmp^0,c
  1005   01FCF4  5009               	movf	(color_read_Red@tmp+1)^0,w,c
  1006   01FCF6  1007               	iorwf	(??_color_read_Red+2)^0,w,c
  1007   01FCF8  6E09               	movwf	(color_read_Red@tmp+1)^0,c
  1008                           
  1009                           ;color.c: 39:  I2C_2_Master_Stop();
  1010   01FCFA  ECC5  F0FD         	call	_I2C_2_Master_Stop	;wreg free
  1011   01FCFE  0012               	return		;funcret
  1012   01FD00                     __end_of_color_read_Red:
  1013                           	callstack 0
  1014                           
  1015 ;; *************** function _I2C_2_Master_RepStart *****************
  1016 ;; Defined at:
  1017 ;;		line 33 in file "i2c.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, status,2, status,0, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; Hardware stack levels required when called: 1
  1038 ;; This function calls:
  1039 ;;		_I2C_2_Master_Idle
  1040 ;; This function is called by:
  1041 ;;		_color_read_Red
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text6
  1046   01FB94                     __ptext6:
  1047                           	callstack 0
  1048   01FB94                     _I2C_2_Master_RepStart:
  1049                           	callstack 28
  1050   01FB94                     
  1051                           ;i2c.c: 35:   I2C_2_Master_Idle();
  1052   01FB94  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1053   01FB98                     
  1054                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  1055   01FB98  010E               	movlb	14	; () banked
  1056   01FB9A  83DA               	bsf	218,1,b	;volatile
  1057   01FB9C                     
  1058                           ; BSR set to: 14
  1059   01FB9C  0012               	return		;funcret
  1060   01FB9E                     __end_of_I2C_2_Master_RepStart:
  1061                           	callstack 0
  1062                           
  1063 ;; *************** function _I2C_2_Master_Read *****************
  1064 ;; Defined at:
  1065 ;;		line 51 in file "i2c.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;  ack             1    wreg     unsigned char 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  ack             1    2[COMRAM] unsigned char 
  1070 ;;  tmp             1    3[COMRAM] unsigned char 
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      unsigned char 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;Total ram usage:        3 bytes
  1085 ;; Hardware stack levels used: 1
  1086 ;; Hardware stack levels required when called: 1
  1087 ;; This function calls:
  1088 ;;		_I2C_2_Master_Idle
  1089 ;; This function is called by:
  1090 ;;		_color_read_Red
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text7
  1095   01FC76                     __ptext7:
  1096                           	callstack 0
  1097   01FC76                     _I2C_2_Master_Read:
  1098                           	callstack 28
  1099                           
  1100                           ; BSR set to: 14
  1101                           ;incstack = 0
  1102                           ;I2C_2_Master_Read@ack stored from wreg
  1103   01FC76  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  1104   01FC78                     
  1105                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  1106   01FC78  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1107   01FC7C                     
  1108                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  1109   01FC7C  010E               	movlb	14	; () banked
  1110   01FC7E  87DA               	bsf	218,3,b	;volatile
  1111                           
  1112                           ;i2c.c: 56:   I2C_2_Master_Idle();
  1113   01FC80  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1114   01FC84                     
  1115                           ;i2c.c: 57:   tmp = SSP2BUF;
  1116   01FC84  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  1117                           
  1118                           ;i2c.c: 58:   I2C_2_Master_Idle();
  1119   01FC88  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1120   01FC8C                     
  1121                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  1122   01FC8C  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  1123   01FC8E  B4D8               	btfsc	status,2,c
  1124   01FC90  EF4C  F0FE         	goto	u31
  1125   01FC94  EF50  F0FE         	goto	u30
  1126   01FC98                     u31:
  1127   01FC98  6A02               	clrf	??_I2C_2_Master_Read^0,c
  1128   01FC9A  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  1129   01FC9C  EF51  F0FE         	goto	u48
  1130   01FCA0                     u30:
  1131   01FCA0  6A02               	clrf	??_I2C_2_Master_Read^0,c
  1132   01FCA2                     u48:
  1133   01FCA2  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  1134   01FCA4  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  1135   01FCA6  010E               	movlb	14	; () banked
  1136   01FCA8  51DA               	movf	218,w,b	;volatile
  1137   01FCAA  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  1138   01FCAC  0BDF               	andlw	-33
  1139   01FCAE  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  1140   01FCB0  6FDA               	movwf	218,b	;volatile
  1141   01FCB2                     
  1142                           ; BSR set to: 14
  1143                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  1144   01FCB2  89DA               	bsf	218,4,b	;volatile
  1145   01FCB4                     
  1146                           ; BSR set to: 14
  1147                           ;i2c.c: 61:   return tmp;
  1148   01FCB4  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  1149   01FCB6                     
  1150                           ; BSR set to: 14
  1151   01FCB6  0012               	return		;funcret
  1152   01FCB8                     __end_of_I2C_2_Master_Read:
  1153                           	callstack 0
  1154                           
  1155 ;; *************** function _color_click_init *****************
  1156 ;; Defined at:
  1157 ;;		line 5 in file "color.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, status,0, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;Total ram usage:        1 bytes
  1176 ;; Hardware stack levels used: 1
  1177 ;; Hardware stack levels required when called: 3
  1178 ;; This function calls:
  1179 ;;		_I2C_2_Master_Init
  1180 ;;		_color_writetoaddr
  1181 ;; This function is called by:
  1182 ;;		_main
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text8
  1187   01FC42                     __ptext8:
  1188                           	callstack 0
  1189   01FC42                     _color_click_init:
  1190                           	callstack 27
  1191   01FC42                     
  1192                           ;color.c: 8:     I2C_2_Master_Init();
  1193   01FC42  EC0C  F0FE         	call	_I2C_2_Master_Init	;wreg free
  1194   01FC46                     
  1195                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1196   01FC46  0E01               	movlw	1
  1197   01FC48  6E03               	movwf	color_writetoaddr@value^0,c
  1198   01FC4A  0E00               	movlw	0
  1199   01FC4C  ECD5  F0FD         	call	_color_writetoaddr
  1200   01FC50                     
  1201                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1202   01FC50  0E3F               	movlw	63
  1203   01FC52  6E05               	movwf	??_color_click_init^0,c
  1204   01FC54  0E55               	movlw	85
  1205   01FC56                     u257:
  1206   01FC56  2EE8               	decfsz	wreg,f,c
  1207   01FC58  D7FE               	bra	u257
  1208   01FC5A  2E05               	decfsz	??_color_click_init^0,f,c
  1209   01FC5C  D7FC               	bra	u257
  1210   01FC5E  F000               	nop	
  1211   01FC60                     
  1212                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1213   01FC60  0E03               	movlw	3
  1214   01FC62  6E03               	movwf	color_writetoaddr@value^0,c
  1215   01FC64  0E00               	movlw	0
  1216   01FC66  ECD5  F0FD         	call	_color_writetoaddr
  1217   01FC6A                     
  1218                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1219   01FC6A  0ED5               	movlw	213
  1220   01FC6C  6E03               	movwf	color_writetoaddr@value^0,c
  1221   01FC6E  0E01               	movlw	1
  1222   01FC70  ECD5  F0FD         	call	_color_writetoaddr
  1223   01FC74  0012               	return		;funcret
  1224   01FC76                     __end_of_color_click_init:
  1225                           	callstack 0
  1226                           
  1227 ;; *************** function _color_writetoaddr *****************
  1228 ;; Defined at:
  1229 ;;		line 21 in file "color.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  address         1    wreg     unsigned char 
  1232 ;;  value           1    2[COMRAM] unsigned char 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  address         1    3[COMRAM] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, status,2, status,0, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1244 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1247 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1248 ;;Total ram usage:        2 bytes
  1249 ;; Hardware stack levels used: 1
  1250 ;; Hardware stack levels required when called: 2
  1251 ;; This function calls:
  1252 ;;		_I2C_2_Master_Start
  1253 ;;		_I2C_2_Master_Stop
  1254 ;;		_I2C_2_Master_Write
  1255 ;; This function is called by:
  1256 ;;		_color_click_init
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text9
  1261   01FBAA                     __ptext9:
  1262                           	callstack 0
  1263   01FBAA                     _color_writetoaddr:
  1264                           	callstack 27
  1265                           
  1266                           ;incstack = 0
  1267                           ;color_writetoaddr@address stored from wreg
  1268   01FBAA  6E04               	movwf	color_writetoaddr@address^0,c
  1269   01FBAC                     
  1270                           ;color.c: 22:     I2C_2_Master_Start();
  1271   01FBAC  ECC0  F0FD         	call	_I2C_2_Master_Start	;wreg free
  1272                           
  1273                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1274   01FBB0  0E52               	movlw	82
  1275   01FBB2  ECCF  F0FD         	call	_I2C_2_Master_Write
  1276                           
  1277                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1278   01FBB6  5004               	movf	color_writetoaddr@address^0,w,c
  1279   01FBB8  0980               	iorlw	128
  1280   01FBBA  ECCF  F0FD         	call	_I2C_2_Master_Write
  1281                           
  1282                           ;color.c: 25:     I2C_2_Master_Write(value);
  1283   01FBBE  5003               	movf	color_writetoaddr@value^0,w,c
  1284   01FBC0  ECCF  F0FD         	call	_I2C_2_Master_Write
  1285                           
  1286                           ;color.c: 26:     I2C_2_Master_Stop();
  1287   01FBC4  ECC5  F0FD         	call	_I2C_2_Master_Stop	;wreg free
  1288   01FBC8  0012               	return		;funcret
  1289   01FBCA                     __end_of_color_writetoaddr:
  1290                           	callstack 0
  1291                           
  1292 ;; *************** function _I2C_2_Master_Write *****************
  1293 ;; Defined at:
  1294 ;;		line 45 in file "i2c.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  data_byte       1    wreg     unsigned char 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  data_byte       1    1[COMRAM] unsigned char 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1309 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1311 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1312 ;;Total ram usage:        1 bytes
  1313 ;; Hardware stack levels used: 1
  1314 ;; Hardware stack levels required when called: 1
  1315 ;; This function calls:
  1316 ;;		_I2C_2_Master_Idle
  1317 ;; This function is called by:
  1318 ;;		_color_writetoaddr
  1319 ;;		_color_read_Red
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text10
  1324   01FB9E                     __ptext10:
  1325                           	callstack 0
  1326   01FB9E                     _I2C_2_Master_Write:
  1327                           	callstack 28
  1328                           
  1329                           ;incstack = 0
  1330                           ;I2C_2_Master_Write@data_byte stored from wreg
  1331   01FB9E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1332   01FBA0                     
  1333                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1334   01FBA0  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1335   01FBA4                     
  1336                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1337   01FBA4  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1338   01FBA8  0012               	return		;funcret
  1339   01FBAA                     __end_of_I2C_2_Master_Write:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _I2C_2_Master_Stop *****************
  1343 ;; Defined at:
  1344 ;;		line 39 in file "i2c.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;		None
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;		None
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;Total ram usage:        0 bytes
  1363 ;; Hardware stack levels used: 1
  1364 ;; Hardware stack levels required when called: 1
  1365 ;; This function calls:
  1366 ;;		_I2C_2_Master_Idle
  1367 ;; This function is called by:
  1368 ;;		_color_writetoaddr
  1369 ;;		_color_read_Red
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text11
  1374   01FB8A                     __ptext11:
  1375                           	callstack 0
  1376   01FB8A                     _I2C_2_Master_Stop:
  1377                           	callstack 28
  1378   01FB8A                     
  1379                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1380   01FB8A  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1381   01FB8E                     
  1382                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1383   01FB8E  010E               	movlb	14	; () banked
  1384   01FB90  85DA               	bsf	218,2,b	;volatile
  1385   01FB92                     
  1386                           ; BSR set to: 14
  1387   01FB92  0012               	return		;funcret
  1388   01FB94                     __end_of_I2C_2_Master_Stop:
  1389                           	callstack 0
  1390                           
  1391 ;; *************** function _I2C_2_Master_Start *****************
  1392 ;; Defined at:
  1393 ;;		line 27 in file "i2c.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;		None
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2, status,0, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;Total ram usage:        0 bytes
  1412 ;; Hardware stack levels used: 1
  1413 ;; Hardware stack levels required when called: 1
  1414 ;; This function calls:
  1415 ;;		_I2C_2_Master_Idle
  1416 ;; This function is called by:
  1417 ;;		_color_writetoaddr
  1418 ;;		_color_read_Red
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text12
  1423   01FB80                     __ptext12:
  1424                           	callstack 0
  1425   01FB80                     _I2C_2_Master_Start:
  1426                           	callstack 28
  1427   01FB80                     
  1428                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1429   01FB80  ECF8  F0FD         	call	_I2C_2_Master_Idle	;wreg free
  1430   01FB84                     
  1431                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1432   01FB84  010E               	movlb	14	; () banked
  1433   01FB86  81DA               	bsf	218,0,b	;volatile
  1434   01FB88                     
  1435                           ; BSR set to: 14
  1436   01FB88  0012               	return		;funcret
  1437   01FB8A                     __end_of_I2C_2_Master_Start:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _I2C_2_Master_Idle *****************
  1441 ;; Defined at:
  1442 ;;		line 22 in file "i2c.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1460 ;;Total ram usage:        1 bytes
  1461 ;; Hardware stack levels used: 1
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_I2C_2_Master_Start
  1466 ;;		_I2C_2_Master_RepStart
  1467 ;;		_I2C_2_Master_Stop
  1468 ;;		_I2C_2_Master_Write
  1469 ;;		_I2C_2_Master_Read
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text13
  1474   01FBF0                     __ptext13:
  1475                           	callstack 0
  1476   01FBF0                     _I2C_2_Master_Idle:
  1477                           	callstack 28
  1478   01FBF0                     l131:
  1479   01FBF0  010E               	movlb	14	; () banked
  1480   01FBF2  B5D8               	btfsc	216,2,b	;volatile
  1481   01FBF4  EFFE  F0FD         	goto	u11
  1482   01FBF8  EF00  F0FE         	goto	u10
  1483   01FBFC                     u11:
  1484   01FBFC  EFF8  F0FD         	goto	l131
  1485   01FC00                     u10:
  1486   01FC00                     
  1487                           ; BSR set to: 14
  1488   01FC00  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1489   01FC04  0E1F               	movlw	31
  1490   01FC06  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1491   01FC08  A4D8               	btfss	status,2,c
  1492   01FC0A  EF09  F0FE         	goto	u21
  1493   01FC0E  EF0B  F0FE         	goto	u20
  1494   01FC12                     u21:
  1495   01FC12  EFF8  F0FD         	goto	l131
  1496   01FC16                     u20:
  1497   01FC16                     
  1498                           ; BSR set to: 14
  1499   01FC16  0012               	return		;funcret
  1500   01FC18                     __end_of_I2C_2_Master_Idle:
  1501                           	callstack 0
  1502                           
  1503 ;; *************** function _I2C_2_Master_Init *****************
  1504 ;; Defined at:
  1505 ;;		line 4 in file "i2c.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels used: 1
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_color_click_init
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text14
  1534   01FC18                     __ptext14:
  1535                           	callstack 0
  1536   01FC18                     _I2C_2_Master_Init:
  1537                           	callstack 29
  1538   01FC18                     
  1539                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1540   01FC18  010E               	movlb	14	; () banked
  1541   01FC1A  51D9               	movf	217,w,b	;volatile
  1542   01FC1C  0BF0               	andlw	-16
  1543   01FC1E  0908               	iorlw	8
  1544   01FC20  6FD9               	movwf	217,b	;volatile
  1545   01FC22                     
  1546                           ; BSR set to: 14
  1547                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1548   01FC22  8BD9               	bsf	217,5,b	;volatile
  1549                           
  1550                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1551   01FC24  0E9F               	movlw	159
  1552   01FC26  6FD6               	movwf	214,b	;volatile
  1553   01FC28                     
  1554                           ; BSR set to: 14
  1555                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1556   01FC28  8A84               	bsf	132,5,c	;volatile
  1557   01FC2A                     
  1558                           ; BSR set to: 14
  1559                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1560   01FC2A  8C84               	bsf	132,6,c	;volatile
  1561   01FC2C                     
  1562                           ; BSR set to: 14
  1563                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1564   01FC2C  9BA7               	bcf	167,5,b	;volatile
  1565   01FC2E                     
  1566                           ; BSR set to: 14
  1567                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1568   01FC2E  9DA7               	bcf	167,6,b	;volatile
  1569                           
  1570                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1571   01FC30  0E1D               	movlw	29
  1572   01FC32  6F1D               	movwf	29,b	;volatile
  1573                           
  1574                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1575   01FC34  0E1E               	movlw	30
  1576   01FC36  6F1C               	movwf	28,b	;volatile
  1577                           
  1578                           ;i2c.c: 18:   RD5PPS=0x1C;
  1579   01FC38  0E1C               	movlw	28
  1580   01FC3A  6F6F               	movwf	111,b	;volatile
  1581                           
  1582                           ;i2c.c: 19:   RD6PPS=0x1B;
  1583   01FC3C  0E1B               	movlw	27
  1584   01FC3E  6F70               	movwf	112,b	;volatile
  1585   01FC40                     
  1586                           ; BSR set to: 14
  1587   01FC40  0012               	return		;funcret
  1588   01FC42                     __end_of_I2C_2_Master_Init:
  1589                           	callstack 0
  1590   000000                     
  1591                           	psect	rparam
  1592   000000                     
  1593                           	psect	idloc
  1594                           
  1595                           ;Config register IDLOC0 @ 0x200000
  1596                           ;	unspecified, using default values
  1597   200000                     	org	2097152
  1598   200000  0FFF               	dw	4095
  1599                           
  1600                           ;Config register IDLOC1 @ 0x200002
  1601                           ;	unspecified, using default values
  1602   200002                     	org	2097154
  1603   200002  0FFF               	dw	4095
  1604                           
  1605                           ;Config register IDLOC2 @ 0x200004
  1606                           ;	unspecified, using default values
  1607   200004                     	org	2097156
  1608   200004  0FFF               	dw	4095
  1609                           
  1610                           ;Config register IDLOC3 @ 0x200006
  1611                           ;	unspecified, using default values
  1612   200006                     	org	2097158
  1613   200006  0FFF               	dw	4095
  1614                           
  1615                           ;Config register IDLOC4 @ 0x200008
  1616                           ;	unspecified, using default values
  1617   200008                     	org	2097160
  1618   200008  0FFF               	dw	4095
  1619                           
  1620                           ;Config register IDLOC5 @ 0x20000A
  1621                           ;	unspecified, using default values
  1622   20000A                     	org	2097162
  1623   20000A  0FFF               	dw	4095
  1624                           
  1625                           ;Config register IDLOC6 @ 0x20000C
  1626                           ;	unspecified, using default values
  1627   20000C                     	org	2097164
  1628   20000C  0FFF               	dw	4095
  1629                           
  1630                           ;Config register IDLOC7 @ 0x20000E
  1631                           ;	unspecified, using default values
  1632   20000E                     	org	2097166
  1633   20000E  0FFF               	dw	4095
  1634                           
  1635                           	psect	config
  1636                           
  1637                           ;Config register CONFIG1L @ 0x300000
  1638                           ;	External Oscillator mode Selection bits
  1639                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1640                           ;	Power-up default value for COSC bits
  1641                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1642   300000                     	org	3145728
  1643   300000  AA                 	db	170
  1644                           
  1645                           ;Config register CONFIG1H @ 0x300001
  1646                           ;	unspecified, using default values
  1647                           ;	Clock Out Enable bit
  1648                           ;	CLKOUTEN = 0x1, unprogrammed default
  1649                           ;	Clock Switch Enable bit
  1650                           ;	CSWEN = 0x1, unprogrammed default
  1651                           ;	Fail-Safe Clock Monitor Enable bit
  1652                           ;	FCMEN = 0x1, unprogrammed default
  1653   300001                     	org	3145729
  1654   300001  FF                 	db	255
  1655                           
  1656                           ;Config register CONFIG2L @ 0x300002
  1657                           ;	unspecified, using default values
  1658                           ;	Master Clear Enable bit
  1659                           ;	MCLRE = 0x1, unprogrammed default
  1660                           ;	Power-up Timer Enable bit
  1661                           ;	PWRTE = 0x1, unprogrammed default
  1662                           ;	Low-power BOR enable bit
  1663                           ;	LPBOREN = 0x1, unprogrammed default
  1664                           ;	Brown-out Reset Enable bits
  1665                           ;	BOREN = 0x3, unprogrammed default
  1666   300002                     	org	3145730
  1667   300002  FF                 	db	255
  1668                           
  1669                           ;Config register CONFIG2H @ 0x300003
  1670                           ;	unspecified, using default values
  1671                           ;	Brown Out Reset Voltage selection bits
  1672                           ;	BORV = 0x3, unprogrammed default
  1673                           ;	ZCD Disable bit
  1674                           ;	ZCD = 0x1, unprogrammed default
  1675                           ;	PPSLOCK bit One-Way Set Enable bit
  1676                           ;	PPS1WAY = 0x1, unprogrammed default
  1677                           ;	Stack Full/Underflow Reset Enable bit
  1678                           ;	STVREN = 0x1, unprogrammed default
  1679                           ;	Debugger Enable bit
  1680                           ;	DEBUG = 0x1, unprogrammed default
  1681                           ;	Extended Instruction Set Enable bit
  1682                           ;	XINST = 0x1, unprogrammed default
  1683   300003                     	org	3145731
  1684   300003  FF                 	db	255
  1685                           
  1686                           ;Config register CONFIG3L @ 0x300004
  1687                           ;	WDT Period Select bits
  1688                           ;	WDTCPS = 0x1F, unprogrammed default
  1689                           ;	WDT operating mode
  1690                           ;	WDTE = OFF, WDT Disabled
  1691   300004                     	org	3145732
  1692   300004  9F                 	db	159
  1693                           
  1694                           ;Config register CONFIG3H @ 0x300005
  1695                           ;	unspecified, using default values
  1696                           ;	WDT Window Select bits
  1697                           ;	WDTCWS = 0x7, unprogrammed default
  1698                           ;	WDT input clock selector
  1699                           ;	WDTCCS = 0x7, unprogrammed default
  1700   300005                     	org	3145733
  1701   300005  FF                 	db	255
  1702                           
  1703                           ;Config register CONFIG4L @ 0x300006
  1704                           ;	unspecified, using default values
  1705                           ;	Write Protection Block 0
  1706                           ;	WRT0 = 0x1, unprogrammed default
  1707                           ;	Write Protection Block 1
  1708                           ;	WRT1 = 0x1, unprogrammed default
  1709                           ;	Write Protection Block 2
  1710                           ;	WRT2 = 0x1, unprogrammed default
  1711                           ;	Write Protection Block 3
  1712                           ;	WRT3 = 0x1, unprogrammed default
  1713                           ;	Write Protection Block 3
  1714                           ;	WRT4 = 0x1, unprogrammed default
  1715                           ;	Write Protection Block 3
  1716                           ;	WRT5 = 0x1, unprogrammed default
  1717                           ;	Write Protection Block 3
  1718                           ;	WRT6 = 0x1, unprogrammed default
  1719                           ;	Write Protection Block 3
  1720                           ;	WRT7 = 0x1, unprogrammed default
  1721   300006                     	org	3145734
  1722   300006  FF                 	db	255
  1723                           
  1724                           ;Config register CONFIG4H @ 0x300007
  1725                           ;	unspecified, using default values
  1726                           ;	Configuration Register Write Protection bit
  1727                           ;	WRTC = 0x1, unprogrammed default
  1728                           ;	Boot Block Write Protection bit
  1729                           ;	WRTB = 0x1, unprogrammed default
  1730                           ;	Data EEPROM Write Protection bit
  1731                           ;	WRTD = 0x1, unprogrammed default
  1732                           ;	Scanner Enable bit
  1733                           ;	SCANE = 0x1, unprogrammed default
  1734                           ;	Low Voltage Programming Enable bit
  1735                           ;	LVP = 0x1, unprogrammed default
  1736   300007                     	org	3145735
  1737   300007  FF                 	db	255
  1738                           
  1739                           ;Config register CONFIG5L @ 0x300008
  1740                           ;	unspecified, using default values
  1741                           ;	UserNVM Program Memory Code Protection bit
  1742                           ;	CP = 0x1, unprogrammed default
  1743                           ;	DataNVM Memory Code Protection bit
  1744                           ;	CPD = 0x1, unprogrammed default
  1745   300008                     	org	3145736
  1746   300008  FF                 	db	255
  1747                           
  1748                           ;Config register CONFIG5H @ 0x300009
  1749                           ;	unspecified, using default values
  1750   300009                     	org	3145737
  1751   300009  FF                 	db	255
  1752                           
  1753                           ;Config register CONFIG6L @ 0x30000A
  1754                           ;	unspecified, using default values
  1755                           ;	Table Read Protection Block 0
  1756                           ;	EBTR0 = 0x1, unprogrammed default
  1757                           ;	Table Read Protection Block 1
  1758                           ;	EBTR1 = 0x1, unprogrammed default
  1759                           ;	Table Read Protection Block 2
  1760                           ;	EBTR2 = 0x1, unprogrammed default
  1761                           ;	Table Read Protection Block 3
  1762                           ;	EBTR3 = 0x1, unprogrammed default
  1763                           ;	Table Read Protection Block 4
  1764                           ;	EBTR4 = 0x1, unprogrammed default
  1765                           ;	Table Read Protection Block 5
  1766                           ;	EBTR5 = 0x1, unprogrammed default
  1767                           ;	Table Read Protection Block 6
  1768                           ;	EBTR6 = 0x1, unprogrammed default
  1769                           ;	Table Read Protection Block 7
  1770                           ;	EBTR7 = 0x1, unprogrammed default
  1771   30000A                     	org	3145738
  1772   30000A  FF                 	db	255
  1773                           
  1774                           ;Config register CONFIG6H @ 0x30000B
  1775                           ;	unspecified, using default values
  1776                           ;	Boot Block Table Read Protection bit
  1777                           ;	EBTRB = 0x1, unprogrammed default
  1778   30000B                     	org	3145739
  1779   30000B  FF                 	db	255
  1780                           tosu	equ	0xFFF
  1781                           tosh	equ	0xFFE
  1782                           tosl	equ	0xFFD
  1783                           stkptr	equ	0xFFC
  1784                           pclatu	equ	0xFFB
  1785                           pclath	equ	0xFFA
  1786                           pcl	equ	0xFF9
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           prodh	equ	0xFF4
  1792                           prodl	equ	0xFF3
  1793                           indf0	equ	0xFEF
  1794                           postinc0	equ	0xFEE
  1795                           postdec0	equ	0xFED
  1796                           preinc0	equ	0xFEC
  1797                           plusw0	equ	0xFEB
  1798                           fsr0h	equ	0xFEA
  1799                           fsr0l	equ	0xFE9
  1800                           wreg	equ	0xFE8
  1801                           indf1	equ	0xFE7
  1802                           postinc1	equ	0xFE6
  1803                           postdec1	equ	0xFE5
  1804                           preinc1	equ	0xFE4
  1805                           plusw1	equ	0xFE3
  1806                           fsr1h	equ	0xFE2
  1807                           fsr1l	equ	0xFE1
  1808                           bsr	equ	0xFE0
  1809                           indf2	equ	0xFDF
  1810                           postinc2	equ	0xFDE
  1811                           postdec2	equ	0xFDD
  1812                           preinc2	equ	0xFDC
  1813                           plusw2	equ	0xFDB
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      38
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    S519DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S519DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read_Red->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    2612
                                             19 COMRAM    19    19      0
                  _I2C_2_Master_Init
                   _color_click_init
                     _color_read_Red
                    _initDCmotorsPWM
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    1829
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       5     5      0      65
                                              4 COMRAM     5     5      0
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      30
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_read_Red
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _initDCmotorsPWM
   _setMotorPWM
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     26      26       1       40.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhhh      2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllhhhh     55      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      41        0.0%
BITBIGSFRllhhhl     46      0       0      42        0.0%
BITBIGSFRllhhhl      1      0       0      43        0.0%
BITBIGSFRllhhhl     2D      0       0      44        0.0%
BITBIGSFRllhhhl     1E      0       0      45        0.0%
BITBIGSFRllhhl      11      0       0      46        0.0%
BITBIGSFRllhl        1      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      48        0.0%
BITBIGSFRlllhl       5      0       0      49        0.0%
BITBIGSFRllllh      4B      0       0      50        0.0%
BITBIGSFRlllll      2D      0       0      51        0.0%
ABS                  0      0       0      52        0.0%
BIGRAM             DE9      0       0      53        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Nov 24 14:19:14 2022

               _color_read_Red FCB8                             l22 FBC8                             l25 FCFE  
                           l19 FC74                             l70 FDFA                             l77 FFFE  
                           u10 FC00                             u11 FBFC                             u20 FC16  
                           u21 FC12                             u30 FCA0                             u31 FC98  
                           u48 FCA2            ___wmul@multiplicand 0003                            l131 FBF0  
                          l140 FB9C                            l134 FC16                            l143 FB92  
                          l128 FC40                            l137 FB88                            l146 FBA8  
                          l149 FCB6                            l192 FBEE                            l186 FE88  
                          l901 FC7C                            l903 FC84                            l905 FC8C  
                          l690 FD72                            l907 FCB2                            l683 FD6A  
                          l909 FCB4                            l871 FB84                            l951 FCB8  
                          l881 FC18                            l865 FBF0                            l873 FBA0  
                          l891 FC2E                            l883 FC22                            l867 FC00  
                          l875 FBA4                            l885 FC28                            l869 FB80  
                          l877 FB8A                            l887 FC2A                            l879 FB8E  
                          l895 FB94                            l889 FC2C                            l897 FB98  
                          l899 FC78                            u150 FD1A                            u151 FD16  
                          u160 FD38                            u161 FD34                            u170 FD54  
                          u171 FD50                            u180 FEB0                            u181 FEAC  
                          u190 FF7A                            u191 FF76                            u257 FC56  
                          wreg 000FE8                           l1101 FBE6                           l1111 FD22  
                         l1121 FD5C                           l1113 FD2A                           l1105 FD00  
                         l1131 FC50                           l1123 FD5E                           l1115 FD38  
                         l1107 FD08                           l1133 FC60                           l1141 FDA6  
                         l1125 FD64                           l1117 FD3E                           l1109 FD1A  
                         l1135 FC6A                           l1127 FC42                           l1151 FDE2  
                         l1143 FDCA                           l1119 FD54                           l1129 FC46  
                         l1153 FDEC                           l1145 FDD4                           l1137 FD74  
                         l1161 FEB0                           l1241 FDFC                           l1155 FDEE  
                         l1147 FDD6                           l1139 FD7C                           l1171 FF7A  
                         l1163 FF04                           l1251 FE2C                           l1243 FE14  
                         l1157 FDF8                           l1149 FDE0                           l1173 FFBE  
                         l1165 FF18                           l1261 FE48                           l1253 FE30  
                         l1245 FE18                           l1167 FF1C                           l1159 FE94  
                         l1271 FE62                           l1263 FE4E                           l1255 FE34  
                         l1247 FE1C                           l1097 FBAC                           l1169 FF5E  
                         l1273 FE6A                           l1265 FE52                           l1257 FE38  
                         l1249 FE28                           l1099 FBCA                           l1275 FE70  
                         l1267 FE56                           l1259 FE40                           l1277 FE7C  
                         l1269 FE5A                           _T2PR 000FBC                           _main FDFC  
                         fsr2h 000FDA                           indf2 000FDF                           fsr2l 000FD9  
                         prodh 000FF4                           prodl 000FF3                           start 0002  
       __end_of_color_read_Red FD00                   ___param_bank 000000                          ?_main 0001  
              __end_of___lwdiv FD74     __end_of_I2C_2_Master_Start FB8A     __end_of_I2C_2_Master_Write FBAA  
                        status 000FD8          _I2C_2_Master_RepStart FB94                ?_color_read_Red 0001  
              __initialization FB7A                   __end_of_main FE94                         ??_main 0014  
                __activetblptr 000000                   ?_setMotorPWM 000E                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         _RE4PPS 000E76                         _RG6PPS 000E88  
     __end_of_color_click_init FC76                   _CCPTMRS0bits 000FAD                         ___wmul FBCA  
                    ??___lwdiv 000B                         isa$std 000001              ??_initDCmotorsPWM 0003  
                   __accesstop 0060        __end_of__initialization FB7A         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001                 __pcstackCOMRAM 0001              _color_writetoaddr FBAA  
                 _T2CLKCONbits 000FBF             ?_color_writetoaddr 0003                        ?___wmul 0001  
          ??_color_writetoaddr 0004                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
       color_writetoaddr@value 0003               ??_color_read_Red 0005      __end_of_color_writetoaddr FBCA  
           _I2C_2_Master_Start FB80             _I2C_2_Master_Write FB9E                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 0008            ?_I2C_2_Master_Start 0001  
                      ___lwdiv FD00            ?_I2C_2_Master_Write 0001                        __pcinit FB7A  
                      __ramtop 0E00                        __ptext0 FDFC                        __ptext1 FE94  
                      __ptext2 FBCA                        __ptext3 FD00                        __ptext4 FD74  
                      __ptext5 FCB8                        __ptext6 FB94                        __ptext7 FC76  
                      __ptext8 FC42                        __ptext9 FBAA                      _T2CONbits 000FBD  
                    _T2HLTbits 000FBE           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization FB7A              ?_color_click_init 0001             ??_color_click_init 0005  
                      postdec2 000FDD                        postinc2 000FDE                _initDCmotorsPWM FD74  
           setMotorPWM@negDuty 0013             setMotorPWM@posDuty 0012                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002                    _CCP1CONbits 000FAB                    _CCP2CONbits 000FA7  
                  _CCP3CONbits 000F26                    _CCP4CONbits 000F22                     main@motorL 0015  
                   main@motorR 001E                 __end_of___wmul FBF0            start_initialization FB7A  
      __end_of_initDCmotorsPWM FDFC                       ??___wmul 0005               ___lwdiv@dividend 0007  
                     ?___lwdiv 0007           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
            _I2C_2_Master_Idle FBF0              _I2C_2_Master_Init FC18              _I2C_2_Master_Read FC76  
            _I2C_2_Master_Stop FB8A             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
          ??_I2C_2_Master_Stop 0002                       _LATDbits 000F7C                       _LATFbits 000F7E  
                     _LATHbits 000F80               ?_initDCmotorsPWM 0001                       _SSP2CON2 000EDA  
                     _SSP2STAT 000ED8      __end_of_I2C_2_Master_Idle FC18      __end_of_I2C_2_Master_Init FC42  
    __end_of_I2C_2_Master_Read FCB8              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop FB94  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  __end_of_I2C_2_Master_RepStart FB9E  
          __end_of_setMotorPWM 0000                       __Hrparam 0000                       __Lrparam 0000  
                   _ANSELDbits 000EA7                ___lwdiv@divisor 0009                ___lwdiv@counter 000D  
                     __ptext10 FB9E                       __ptext11 FB8A                       __ptext12 FB80  
                     __ptext13 FBF0                       __ptext14 FC18                   _SSP2CON1bits 000ED9  
                 _SSP2CON2bits 000EDA                       isa$xinst 000000                    _setMotorPWM FE94  
             _color_click_init FC42                     _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
                 main@PWMcycle 0014  
