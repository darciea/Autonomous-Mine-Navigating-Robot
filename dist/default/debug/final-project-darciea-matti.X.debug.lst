

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Dec 12 20:58:28 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _LATGbits	set	3967
   107   000000                     _TRISFbits	set	3974
   108   000000                     _TRISDbits	set	3972
   109   000000                     _TRISGbits	set	3975
   110   000000                     _SSP2CON2bits	set	3802
   111   000000                     _RX4PPS	set	3605
   112   000000                     _SSP2CLKPPS	set	3612
   113   000000                     _SSP2DATPPS	set	3613
   114   000000                     _RC7PPS	set	3689
   115   000000                     _RE2PPS	set	3700
   116   000000                     _TRISCbits	set	3971
   117   000000                     _TRISEbits	set	3973
   118   000000                     _TRISHbits	set	3976
   119   000000                     _PORTFbits	set	3982
   120   000000                     _T2PR	set	4028
   121   000000                     _T2CONbits	set	4029
   122   000000                     _CCPR2H	set	4006
   123   000000                     _CCPR1H	set	4010
   124   000000                     _RE4PPS	set	3702
   125   000000                     _RG6PPS	set	3720
   126   000000                     _RD5PPS	set	3695
   127   000000                     _ANSELDbits	set	3751
   128   000000                     _SSP2ADD	set	3798
   129   000000                     _SSP2CON1bits	set	3801
   130   000000                     _CCPR4H	set	3873
   131   000000                     _CCPR3H	set	3877
   132   000000                     _TMR0L	set	4051
   133   000000                     _TMR0H	set	4052
   134   000000                     _T0CON0bits	set	4053
   135   000000                     _T0CON1bits	set	4054
   136   000000                     _T2CLKCONbits	set	4031
   137   000000                     _T2HLTbits	set	4030
   138   000000                     _CCP1CONbits	set	4011
   139   000000                     _CCPTMRS0bits	set	4013
   140   000000                     _CCP2CONbits	set	4007
   141   000000                     _LATAbits	set	3961
   142   000000                     _LATDbits	set	3964
   143   000000                     _CCP3CONbits	set	3878
   144   000000                     _CCP4CONbits	set	3874
   145   000000                     _RC4REG	set	3811
   146   000000                     _SP4BRGL	set	3813
   147   000000                     _TX4STAbits	set	3816
   148   000000                     _BAUD4CONbits	set	3817
   149   000000                     _SSP2CON2	set	3802
   150   000000                     _SSP2STAT	set	3800
   151   000000                     _ANSELFbits	set	3764
   152   000000                     _SSP2BUF	set	3797
   153   000000                     _IPR0bits	set	3615
   154   000000                     _PIE4bits	set	3629
   155   000000                     _PIR4bits	set	3639
   156   000000                     _RC0PPS	set	3682
   157   000000                     _TMR0IE	set	29005
   158   000000                     _RD6PPS	set	3696
   159   000000                     _LATFbits	set	3966
   160   000000                     _LATHbits	set	3968
   161   000000                     _TRISAbits	set	3969
   162   000000                     _TMR0IF	set	29085
   163   000000                     _INTCONbits	set	4082
   164                           
   165                           	psect	smallconst
   166   000E00                     __psmallconst:
   167                           	callstack 0
   168   000E00  00                 	db	0
   169   000E01                     STR_4:
   170                           
   171                           ; BSR set to: 14
   172   000E01  0A                 	db	10
   173   000E02  20                 	db	32
   174   000E03  41                 	db	65	;'A'
   175   000E04  56                 	db	86	;'V'
   176   000E05  47                 	db	71	;'G'
   177   000E06  3A                 	db	58	;':'
   178   000E07  20                 	db	32
   179   000E08  52                 	db	82	;'R'
   180   000E09  20                 	db	32
   181   000E0A  25                 	db	37
   182   000E0B  64                 	db	100	;'d'
   183   000E0C  2C                 	db	44
   184   000E0D  20                 	db	32
   185   000E0E  47                 	db	71	;'G'
   186   000E0F  20                 	db	32
   187   000E10  25                 	db	37
   188   000E11  64                 	db	100	;'d'
   189   000E12  2C                 	db	44
   190   000E13  20                 	db	32
   191   000E14  42                 	db	66	;'B'
   192   000E15  20                 	db	32
   193   000E16  25                 	db	37
   194   000E17  64                 	db	100	;'d'
   195   000E18  20                 	db	32
   196   000E19  0A                 	db	10
   197   000E1A  00                 	db	0
   198   000E1B                     STR_1:
   199                           
   200                           ; BSR set to: 14
   201   000E1B  0A                 	db	10
   202   000E1C  20                 	db	32
   203   000E1D  45                 	db	69	;'E'
   204   000E1E  78                 	db	120	;'x'
   205   000E1F  70                 	db	112	;'p'
   206   000E20  65                 	db	101	;'e'
   207   000E21  63                 	db	99	;'c'
   208   000E22  74                 	db	116	;'t'
   209   000E23  65                 	db	101	;'e'
   210   000E24  64                 	db	100	;'d'
   211   000E25  20                 	db	32
   212   000E26  63                 	db	99	;'c'
   213   000E27  6C                 	db	108	;'l'
   214   000E28  65                 	db	101	;'e'
   215   000E29  61                 	db	97	;'a'
   216   000E2A  72                 	db	114	;'r'
   217   000E2B  3A                 	db	58	;':'
   218   000E2C  20                 	db	32
   219   000E2D  25                 	db	37
   220   000E2E  64                 	db	100	;'d'
   221   000E2F  20                 	db	32
   222   000E30  0A                 	db	10
   223   000E31  00                 	db	0
   224   000E32                     STR_3:
   225                           
   226                           ; BSR set to: 14
   227   000E32  52                 	db	82	;'R'
   228   000E33  61                 	db	97	;'a'
   229   000E34  77                 	db	119	;'w'
   230   000E35  20                 	db	32
   231   000E36  25                 	db	37
   232   000E37  64                 	db	100	;'d'
   233   000E38  2C                 	db	44
   234   000E39  20                 	db	32
   235   000E3A  25                 	db	37
   236   000E3B  64                 	db	100	;'d'
   237   000E3C  2C                 	db	44
   238   000E3D  20                 	db	32
   239   000E3E  25                 	db	37
   240   000E3F  64                 	db	100	;'d'
   241   000E40  2C                 	db	44
   242   000E41  20                 	db	32
   243   000E42  25                 	db	37
   244   000E43  64                 	db	100	;'d'
   245   000E44  20                 	db	32
   246   000E45  0A                 	db	10
   247   000E46  00                 	db	0
   248   000E47                     STR_2:
   249                           
   250                           ; BSR set to: 14
   251   000E47  54                 	db	84	;'T'
   252   000E48  69                 	db	105	;'i'
   253   000E49  6D                 	db	109	;'m'
   254   000E4A  65                 	db	101	;'e'
   255   000E4B  72                 	db	114	;'r'
   256   000E4C  63                 	db	99	;'c'
   257   000E4D  6F                 	db	111	;'o'
   258   000E4E  75                 	db	117	;'u'
   259   000E4F  6E                 	db	110	;'n'
   260   000E50  74                 	db	116	;'t'
   261   000E51  20                 	db	32
   262   000E52  25                 	db	37
   263   000E53  64                 	db	100	;'d'
   264   000E54  20                 	db	32
   265   000E55  0A                 	db	10
   266   000E56  00                 	db	0
   267   000E57                     STR_5:
   268                           
   269                           ; BSR set to: 14
   270   000E57  43                 	db	67	;'C'
   271   000E58  41                 	db	65	;'A'
   272   000E59  52                 	db	82	;'R'
   273   000E5A  44                 	db	68	;'D'
   274   000E5B  20                 	db	32
   275   000E5C  25                 	db	37
   276   000E5D  64                 	db	100	;'d'
   277   000E5E  20                 	db	32
   278   000E5F  0A                 	db	10
   279   000E60  00                 	db	0
   280   000E61  00                 	db	0	; dummy byte at the end
   281   000000                     
   282                           ; #config settings
   283                           
   284                           	psect	cinit
   285   00327A                     __pcinit:
   286                           	callstack 0
   287   00327A                     start_initialization:
   288                           	callstack 0
   289   00327A                     __initialization:
   290                           	callstack 0
   291                           
   292                           ; Clear objects allocated to BANK2 (112 bytes)
   293   00327A  EE02  F072         	lfsr	0,__pbssBANK2
   294   00327E  0E70               	movlw	112
   295   003280                     clear_0:
   296   003280  6AEE               	clrf	postinc0,c
   297   003282  06E8               	decf	wreg,f,c
   298   003284  E1FD               	bnz	clear_0
   299                           
   300                           ; Clear objects allocated to BANK1 (7 bytes)
   301   003286  EE01  F0F3         	lfsr	0,__pbssBANK1
   302   00328A  0E07               	movlw	7
   303   00328C                     clear_1:
   304   00328C  6AEE               	clrf	postinc0,c
   305   00328E  06E8               	decf	wreg,f,c
   306   003290  E1FD               	bnz	clear_1
   307                           
   308                           ; Clear objects allocated to BANK0 (1 bytes)
   309   003292  0100               	movlb	0
   310   003294  6BFD               	clrf	__pbssBANK0& (0+255),b
   311                           
   312                           ; Clear objects allocated to COMRAM (3 bytes)
   313   003296  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   314   003298  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   315   00329A  6A58               	clrf	__pbssCOMRAM& (0+255),c
   316   00329C                     end_of_initialization:
   317                           	callstack 0
   318   00329C                     __end_of__initialization:
   319                           	callstack 0
   320   00329C  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   321   00329E  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322   0032A0  0100               	movlb	0
   323   0032A2  EF85  F009         	goto	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMRAM
   326   000058                     __pbssCOMRAM:
   327                           	callstack 0
   328   000058                     _TxBufReadCnt:
   329                           	callstack 0
   330   000058                     	ds	1
   331   000059                     _TxBufWriteCnt:
   332                           	callstack 0
   333   000059                     	ds	1
   334   00005A                     _RxBufWriteCnt:
   335                           	callstack 0
   336   00005A                     	ds	1
   337                           
   338                           	psect	bssBANK0
   339   0000FD                     __pbssBANK0:
   340                           	callstack 0
   341   0000FD                     _RxBufReadCnt:
   342                           	callstack 0
   343   0000FD                     	ds	1
   344                           
   345                           	psect	bssBANK1
   346   0001F3                     __pbssBANK1:
   347                           	callstack 0
   348   0001F3                     _width:
   349                           	callstack 0
   350   0001F3                     	ds	2
   351   0001F5                     _prec:
   352                           	callstack 0
   353   0001F5                     	ds	2
   354   0001F7                     _TimerFlag:
   355                           	callstack 0
   356   0001F7                     	ds	2
   357   0001F9                     _flags:
   358                           	callstack 0
   359   0001F9                     	ds	1
   360                           
   361                           	psect	bssBANK2
   362   000272                     __pbssBANK2:
   363                           	callstack 0
   364   000272                     _EUSART4TXbuf:
   365                           	callstack 0
   366   000272                     	ds	60
   367   0002AE                     _EUSART4RXbuf:
   368                           	callstack 0
   369   0002AE                     	ds	20
   370   0002C2                     _dbuf:
   371                           	callstack 0
   372   0002C2                     	ds	32
   373                           
   374                           	psect	cstackBANK2
   375   000200                     __pcstackBANK2:
   376                           	callstack 0
   377   000200                     main@expected_values:
   378                           	callstack 0
   379                           
   380                           ; 54 bytes @ 0x0
   381   000200                     	ds	54
   382   000236                     main@ReturnHomeArray:
   383                           	callstack 0
   384                           
   385                           ; 60 bytes @ 0x36
   386   000236                     	ds	60
   387                           
   388                           	psect	cstackBANK1
   389   000100                     __pcstackBANK1:
   390                           	callstack 0
   391   000100                     card_response@normalised_values:
   392                           	callstack 0
   393                           
   394                           ; 54 bytes @ 0x0
   395   000100                     	ds	54
   396   000136                     card_response@master_closeness:
   397                           	callstack 0
   398                           
   399                           ; 18 bytes @ 0x36
   400   000136                     	ds	18
   401   000148                     main@buf:
   402                           	callstack 0
   403                           
   404                           ; 150 bytes @ 0x48
   405   000148                     	ds	150
   406   0001DE                     main@i:
   407                           	callstack 0
   408                           
   409                           ; 1 bytes @ 0xDE
   410   0001DE                     	ds	1
   411   0001DF                     main@clear_read:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0xDF
   415   0001DF                     	ds	2
   416   0001E1                     main@motorL:
   417                           	callstack 0
   418                           
   419                           ; 9 bytes @ 0xE1
   420   0001E1                     	ds	9
   421   0001EA                     main@motorR:
   422                           	callstack 0
   423                           
   424                           ; 9 bytes @ 0xEA
   425   0001EA                     	ds	9
   426                           
   427                           	psect	cstackBANK0
   428   000060                     __pcstackBANK0:
   429                           	callstack 0
   430   000060                     ?_vfprintf:
   431                           	callstack 0
   432   000060                     motor_response@mL:
   433                           	callstack 0
   434   000060                     vfprintf@fp:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x0
   438   000060                     	ds	2
   439   000062                     motor_response@mR:
   440                           	callstack 0
   441   000062                     vfprintf@fmt:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x2
   445   000062                     	ds	2
   446   000064                     vfprintf@ap:
   447                           	callstack 0
   448   000064                     motor_response@ReturnHomeArray:
   449                           	callstack 0
   450                           
   451                           ; 60 bytes @ 0x4
   452   000064                     	ds	2
   453   000066                     ?_sprintf:
   454                           	callstack 0
   455   000066                     sprintf@s:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x6
   459   000066                     	ds	2
   460   000068                     sprintf@fmt:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x8
   464   000068                     	ds	10
   465   000072                     sprintf@ap:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x12
   469   000072                     	ds	2
   470   000074                     sprintf@f:
   471                           	callstack 0
   472                           
   473                           ; 11 bytes @ 0x14
   474   000074                     	ds	44
   475   0000A0                     card_response@buf:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x40
   479   0000A0                     	ds	2
   480   0000A2                     card_response@red_read:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x42
   484   0000A2                     	ds	2
   485   0000A4                     card_response@green_read:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x44
   489   0000A4                     	ds	2
   490   0000A6                     card_response@blue_read:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x46
   494   0000A6                     	ds	2
   495   0000A8                     card_response@expected_values:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x48
   499   0000A8                     	ds	2
   500   0000AA                     card_response@card:
   501                           	callstack 0
   502                           
   503                           ; 1 bytes @ 0x4A
   504   0000AA                     	ds	1
   505   0000AB                     card_response@mL:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x4B
   509   0000AB                     	ds	2
   510   0000AD                     card_response@mR:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x4D
   514   0000AD                     	ds	2
   515   0000AF                     card_response@ReturnHomeArray:
   516                           	callstack 0
   517                           
   518                           ; 60 bytes @ 0x4F
   519   0000AF                     	ds	60
   520   0000EB                     main@clear_read_check:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x8B
   524   0000EB                     	ds	2
   525   0000ED                     main@PWMcycle:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0x8D
   529   0000ED                     	ds	1
   530   0000EE                     main@card:
   531                           	callstack 0
   532                           
   533                           ; 1 bytes @ 0x8E
   534   0000EE                     	ds	1
   535   0000EF                     main@i_1233:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x8F
   539   0000EF                     	ds	2
   540   0000F1                     main@i_1235:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x91
   544   0000F1                     	ds	2
   545   0000F3                     main@TimerCount:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x93
   549   0000F3                     	ds	2
   550   0000F5                     main@CardCount:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x95
   554   0000F5                     	ds	2
   555   0000F7                     main@red_read:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x97
   559   0000F7                     	ds	2
   560   0000F9                     main@green_read:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0x99
   564   0000F9                     	ds	2
   565   0000FB                     main@blue_read:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x9B
   569   0000FB                     	ds	2
   570                           
   571                           	psect	cstackCOMRAM
   572   000001                     __pcstackCOMRAM:
   573                           	callstack 0
   574   000001                     ??_LowISR:
   575   000001                     
   576                           ; 1 bytes @ 0x0
   577   000001                     	ds	3
   578   000004                     ??_I2C_2_Master_Idle:
   579   000004                     ?___wmul:
   580                           	callstack 0
   581   000004                     ?___aodiv:
   582                           	callstack 0
   583   000004                     ?___aomod:
   584                           	callstack 0
   585   000004                     sendCharSerial4@charToSend:
   586                           	callstack 0
   587   000004                     determine_card@master_closeness:
   588                           	callstack 0
   589   000004                     ___wmul@multiplier:
   590                           	callstack 0
   591   000004                     fputc@c:
   592                           	callstack 0
   593   000004                     ___aodiv@dividend:
   594                           	callstack 0
   595   000004                     ___aomod@dividend:
   596                           	callstack 0
   597                           
   598                           ; 8 bytes @ 0x3
   599   000004                     	ds	1
   600   000005                     ??_I2C_2_Master_Read:
   601   000005                     I2C_2_Master_Write@data_byte:
   602                           	callstack 0
   603   000005                     sendStringSerial4@string:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x4
   607   000005                     	ds	1
   608   000006                     ??_determine_card:
   609   000006                     color_writetoaddr@value:
   610                           	callstack 0
   611   000006                     I2C_2_Master_Read@ack:
   612                           	callstack 0
   613   000006                     ___wmul@multiplicand:
   614                           	callstack 0
   615   000006                     fputc@fp:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x5
   619   000006                     	ds	1
   620   000007                     color_writetoaddr@address:
   621                           	callstack 0
   622   000007                     I2C_2_Master_Read@tmp:
   623                           	callstack 0
   624                           
   625                           ; 1 bytes @ 0x6
   626   000007                     	ds	1
   627   000008                     ??_fputc:
   628   000008                     ??_color_click_init:
   629   000008                     ?_color_read_Red:
   630                           	callstack 0
   631   000008                     ?_color_read_Green:
   632                           	callstack 0
   633   000008                     ?_color_read_Blue:
   634                           	callstack 0
   635   000008                     ?_color_read_Clear:
   636                           	callstack 0
   637   000008                     ___wmul@product:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x7
   641   000008                     	ds	2
   642   00000A                     ??_color_read_Red:
   643   00000A                     ??_color_read_Green:
   644   00000A                     ??_color_read_Blue:
   645   00000A                     ??_color_read_Clear:
   646   00000A                     ?___lwdiv:
   647                           	callstack 0
   648   00000A                     determine_card@current_smallest:
   649                           	callstack 0
   650   00000A                     ___lwdiv@dividend:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x9
   654   00000A                     	ds	2
   655   00000C                     determine_card@predicted_colour:
   656                           	callstack 0
   657   00000C                     ___lwdiv@divisor:
   658                           	callstack 0
   659   00000C                     ___aodiv@divisor:
   660                           	callstack 0
   661   00000C                     ___aomod@divisor:
   662                           	callstack 0
   663                           
   664                           ; 8 bytes @ 0xB
   665   00000C                     	ds	1
   666   00000D                     determine_card@i:
   667                           	callstack 0
   668   00000D                     color_read_Red@tmp:
   669                           	callstack 0
   670   00000D                     color_read_Green@tmp:
   671                           	callstack 0
   672   00000D                     color_read_Blue@tmp:
   673                           	callstack 0
   674   00000D                     color_read_Clear@tmp:
   675                           	callstack 0
   676   00000D                     fputs@s:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0xC
   680   00000D                     	ds	1
   681   00000E                     ___lwdiv@quotient:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0xD
   685   00000E                     	ds	1
   686   00000F                     fputs@fp:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0xE
   690   00000F                     	ds	1
   691   000010                     ___lwdiv@counter:
   692                           	callstack 0
   693                           
   694                           ; 1 bytes @ 0xF
   695   000010                     	ds	1
   696   000011                     fputs@c:
   697                           	callstack 0
   698   000011                     setMotorPWM@m:
   699                           	callstack 0
   700   000011                     collect_avg_readings@red_read:
   701                           	callstack 0
   702   000011                     make_master_closeness@buf:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x10
   706   000011                     	ds	1
   707   000012                     fputs@i:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x11
   711   000012                     	ds	1
   712   000013                     ??_setMotorPWM:
   713   000013                     collect_avg_readings@green_read:
   714                           	callstack 0
   715   000013                     make_master_closeness@normalised_values:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x12
   719   000013                     	ds	1
   720   000014                     ___aodiv@counter:
   721                           	callstack 0
   722   000014                     ___aomod@counter:
   723                           	callstack 0
   724   000014                     pad@fp:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x13
   728   000014                     	ds	1
   729   000015                     setMotorPWM@posDuty:
   730                           	callstack 0
   731   000015                     ___aodiv@sign:
   732                           	callstack 0
   733   000015                     ___aomod@sign:
   734                           	callstack 0
   735   000015                     collect_avg_readings@blue_read:
   736                           	callstack 0
   737   000015                     make_master_closeness@master_closeness:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x14
   741   000015                     	ds	1
   742   000016                     ?_abs:
   743                           	callstack 0
   744   000016                     setMotorPWM@negDuty:
   745                           	callstack 0
   746   000016                     abs@a:
   747                           	callstack 0
   748   000016                     pad@buf:
   749                           	callstack 0
   750   000016                     ___aodiv@quotient:
   751                           	callstack 0
   752                           
   753                           ; 8 bytes @ 0x15
   754   000016                     	ds	1
   755   000017                     ??_collect_avg_readings:
   756   000017                     ??_make_master_closeness:
   757   000017                     stop@mL:
   758                           	callstack 0
   759   000017                     turnLeft45@mL:
   760                           	callstack 0
   761   000017                     turnRight45@mL:
   762                           	callstack 0
   763   000017                     fullSpeedAhead@mL:
   764                           	callstack 0
   765   000017                     reverseFullSpeed@mL:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x16
   769   000017                     	ds	1
   770   000018                     ??_abs:
   771   000018                     pad@p:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0x17
   775   000018                     	ds	1
   776   000019                     stop@mR:
   777                           	callstack 0
   778   000019                     turnLeft45@mR:
   779                           	callstack 0
   780   000019                     turnRight45@mR:
   781                           	callstack 0
   782   000019                     fullSpeedAhead@mR:
   783                           	callstack 0
   784   000019                     reverseFullSpeed@mR:
   785                           	callstack 0
   786   000019                     collect_avg_readings@i:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0x18
   790   000019                     	ds	1
   791   00001A                     ??_pad:
   792   00001A                     normalise_readings@buf:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x19
   796   00001A                     	ds	1
   797   00001B                     ??_stop:
   798   00001B                     ??_turnLeft45:
   799   00001B                     ??_turnRight45:
   800   00001B                     ??_fullSpeedAhead:
   801   00001B                     ??_reverseFullSpeed:
   802   00001B                     collect_avg_readings@i_1581:
   803                           	callstack 0
   804   00001B                     pad@i:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x1A
   808   00001B                     	ds	1
   809   00001C                     fullSpeedAhead@i:
   810                           	callstack 0
   811   00001C                     reverseFullSpeed@i:
   812                           	callstack 0
   813   00001C                     normalise_readings@red_read:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x1B
   817   00001C                     	ds	1
   818   00001D                     turnLeft45@i:
   819                           	callstack 0
   820   00001D                     turnRight45@i:
   821                           	callstack 0
   822   00001D                     collect_avg_readings@i_1582:
   823                           	callstack 0
   824   00001D                     pad@w:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x1C
   828   00001D                     	ds	1
   829   00001E                     normalise_readings@green_read:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x1D
   833   00001E                     	ds	1
   834   00001F                     collect_avg_readings@i_1583:
   835                           	callstack 0
   836   00001F                     home_response@mL:
   837                           	callstack 0
   838   00001F                     dtoa@fp:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x1E
   842   00001F                     	ds	1
   843   000020                     normalise_readings@blue_read:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0x1F
   847   000020                     	ds	1
   848   000021                     home_response@mR:
   849                           	callstack 0
   850   000021                     dtoa@d:
   851                           	callstack 0
   852                           
   853                           ; 8 bytes @ 0x20
   854   000021                     	ds	1
   855   000022                     normalise_readings@expected_values:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x21
   859   000022                     	ds	1
   860   000023                     ??_home_response:
   861                           
   862                           ; 1 bytes @ 0x22
   863   000023                     	ds	1
   864   000024                     normalise_readings@normalised_values:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x23
   868   000024                     	ds	1
   869   000025                     home_response@card:
   870                           	callstack 0
   871                           
   872                           ; 1 bytes @ 0x24
   873   000025                     	ds	1
   874   000026                     ??_normalise_readings:
   875   000026                     ??_motor_response:
   876                           
   877                           ; 1 bytes @ 0x25
   878   000026                     	ds	2
   879   000028                     motor_response@j:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x27
   883   000028                     	ds	1
   884   000029                     ??_dtoa:
   885                           
   886                           ; 1 bytes @ 0x28
   887   000029                     	ds	1
   888   00002A                     motor_response@card:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x29
   892   00002A                     	ds	1
   893   00002B                     make_master_closeness@i:
   894                           	callstack 0
   895   00002B                     motor_response@i:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x2A
   899   00002B                     	ds	3
   900   00002E                     normalise_readings@difference:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0x2D
   904   00002E                     	ds	2
   905   000030                     normalise_readings@i:
   906                           	callstack 0
   907                           
   908                           ; 1 bytes @ 0x2F
   909   000030                     	ds	1
   910   000031                     _dtoa$2493:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x30
   914   000031                     	ds	2
   915   000033                     dtoa@p:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x32
   919   000033                     	ds	2
   920   000035                     dtoa@w:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x34
   924   000035                     	ds	2
   925   000037                     dtoa@n:
   926                           	callstack 0
   927                           
   928                           ; 8 bytes @ 0x36
   929   000037                     	ds	8
   930   00003F                     dtoa@i:
   931                           	callstack 0
   932                           
   933                           ; 2 bytes @ 0x3E
   934   00003F                     	ds	2
   935   000041                     dtoa@s:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x40
   939   000041                     	ds	1
   940   000042                     vfpfcnvrt@fp:
   941                           	callstack 0
   942                           
   943                           ; 2 bytes @ 0x41
   944   000042                     	ds	2
   945   000044                     vfpfcnvrt@fmt:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x43
   949   000044                     	ds	2
   950   000046                     vfpfcnvrt@ap:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x45
   954   000046                     	ds	2
   955   000048                     ??_vfpfcnvrt:
   956                           
   957                           ; 1 bytes @ 0x47
   958   000048                     	ds	2
   959   00004A                     vfpfcnvrt@convarg:
   960                           	callstack 0
   961                           
   962                           ; 8 bytes @ 0x49
   963   00004A                     	ds	8
   964   000052                     vfpfcnvrt@cp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x51
   968   000052                     	ds	2
   969   000054                     vfprintf@cfmt:
   970                           	callstack 0
   971                           
   972                           ; 2 bytes @ 0x53
   973   000054                     	ds	2
   974   000056                     ??_main:
   975                           
   976                           ; 1 bytes @ 0x55
   977   000056                     	ds	2
   978                           
   979 ;;
   980 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   981 ;;
   982 ;; *************** function _main *****************
   983 ;; Defined at:
   984 ;;		line 21 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  i               2  145[BANK0 ] int 
   989 ;;  i               2  143[BANK0 ] int 
   990 ;;  i               1  222[BANK1 ] enum E14569
   991 ;;  buf           150   72[BANK1 ] unsigned char [150]
   992 ;;  ReturnHomeAr   60   54[BANK2 ] struct HomeStored
   993 ;;  expected_val   54    0[BANK2 ] unsigned int [9][3]
   994 ;;  motorR          9  234[BANK1 ] struct DC_motor
   995 ;;  motorL          9  225[BANK1 ] struct DC_motor
   996 ;;  clear_read      2  223[BANK1 ] unsigned int 
   997 ;;  blue_read       2  155[BANK0 ] unsigned int 
   998 ;;  green_read      2  153[BANK0 ] unsigned int 
   999 ;;  red_read        2  151[BANK0 ] unsigned int 
  1000 ;;  CardCount       2  149[BANK0 ] unsigned int 
  1001 ;;  TimerCount      2  147[BANK0 ] unsigned int 
  1002 ;;  clear_read_c    2  139[BANK0 ] unsigned int 
  1003 ;;  card            1  142[BANK0 ] enum E14569
  1004 ;;  PWMcycle        1  141[BANK0 ] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      void 
  1007 ;; Registers used:
  1008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1015 ;;      Locals:         0      18     171     114       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Totals:         2      18     171     114       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;Total ram usage:      305 bytes
  1019 ;; Hardware stack levels required when called: 10
  1020 ;; This function calls:
  1021 ;;		_I2C_2_Master_Init
  1022 ;;		_Interrupts_init
  1023 ;;		_LEDSon_init
  1024 ;;		_card_response
  1025 ;;		_collect_avg_readings
  1026 ;;		_color_click_init
  1027 ;;		_color_read_Blue
  1028 ;;		_color_read_Clear
  1029 ;;		_color_read_Green
  1030 ;;		_color_read_Red
  1031 ;;		_fullSpeedAhead
  1032 ;;		_initDCmotorsPWM
  1033 ;;		_initUSART4
  1034 ;;		_sendStringSerial4
  1035 ;;		_setMotorPWM
  1036 ;;		_sprintf
  1037 ;;		_stop
  1038 ;; This function is called by:
  1039 ;;		Startup code after reset
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text0
  1044   00130A                     __ptext0:
  1045                           	callstack 0
  1046   00130A                     _main:
  1047                           	callstack 21
  1048   00130A                     
  1049                           ;main.c: 26:     LEDSon_init();
  1050   00130A  EC68  F019         	call	_LEDSon_init	;wreg free
  1051   00130E                     
  1052                           ;main.c: 27:     I2C_2_Master_Init();
  1053   00130E  EC53  F019         	call	_I2C_2_Master_Init	;wreg free
  1054   001312                     
  1055                           ;main.c: 28:     color_click_init();
  1056   001312  EC0B  F019         	call	_color_click_init	;wreg free
  1057   001316                     
  1058                           ;main.c: 29:     initDCmotorsPWM();
  1059   001316  EC77  F016         	call	_initDCmotorsPWM	;wreg free
  1060   00131A                     
  1061                           ;main.c: 30:     initUSART4();
  1062   00131A  ECB9  F019         	call	_initUSART4	;wreg free
  1063   00131E                     
  1064                           ;main.c: 31:     Interrupts_init();
  1065   00131E  EC7D  F019         	call	_Interrupts_init	;wreg free
  1066   001322                     
  1067                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1068   001322  8486               	bsf	134,2,c	;volatile
  1069   001324                     
  1070                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1071   001324  010E               	movlb	14	; () banked
  1072   001326  95B4               	bcf	180,2,b	;volatile
  1073   001328                     
  1074                           ; BSR set to: 14
  1075                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1076   001328  CFBC F0ED          	movff	4028,main@PWMcycle	;volatile
  1077   00132C                     
  1078                           ; BSR set to: 14
  1079                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1080   00132C  0E00               	movlw	0
  1081   00132E  0101               	movlb	1	; () banked
  1082   001330  6FE1               	movwf	main@motorL& (0+255),b
  1083   001332                     
  1084                           ; BSR set to: 1
  1085                           ;main.c: 45:     motorL.direction=1;
  1086   001332  0E01               	movlw	1
  1087   001334  6FE2               	movwf	(main@motorL+1)& (0+255),b
  1088   001336                     
  1089                           ; BSR set to: 1
  1090                           ;main.c: 46:     motorL.brakemode=1;
  1091   001336  0E01               	movlw	1
  1092   001338  6FE3               	movwf	(main@motorL+2)& (0+255),b
  1093   00133A                     
  1094                           ; BSR set to: 1
  1095                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1096   00133A  0EAA               	movlw	170
  1097   00133C  6FE6               	movwf	(main@motorL+5)& (0+255),b
  1098   00133E  0E0F               	movlw	15
  1099   001340  6FE7               	movwf	(main@motorL+6)& (0+255),b
  1100   001342                     
  1101                           ; BSR set to: 1
  1102                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1103   001342  0EA6               	movlw	166
  1104   001344  6FE8               	movwf	(main@motorL+7)& (0+255),b
  1105   001346  0E0F               	movlw	15
  1106   001348  6FE9               	movwf	(main@motorL+8)& (0+255),b
  1107   00134A                     
  1108                           ; BSR set to: 1
  1109                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1110   00134A  C0ED  F1E4         	movff	main@PWMcycle,main@motorL+3
  1111   00134E  6BE5               	clrf	(main@motorL+4)& (0+255),b
  1112   001350                     
  1113                           ; BSR set to: 1
  1114                           ;main.c: 51:     motorR.power=0;
  1115   001350  0E00               	movlw	0
  1116   001352  6FEA               	movwf	main@motorR& (0+255),b
  1117   001354                     
  1118                           ; BSR set to: 1
  1119                           ;main.c: 52:     motorR.direction=1;
  1120   001354  0E01               	movlw	1
  1121   001356  6FEB               	movwf	(main@motorR+1)& (0+255),b
  1122   001358                     
  1123                           ; BSR set to: 1
  1124                           ;main.c: 53:     motorR.brakemode=1;
  1125   001358  0E01               	movlw	1
  1126   00135A  6FEC               	movwf	(main@motorR+2)& (0+255),b
  1127                           
  1128                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1129   00135C  0E25               	movlw	37
  1130   00135E  6FEF               	movwf	(main@motorR+5)& (0+255),b
  1131   001360  0E0F               	movlw	15
  1132   001362  6FF0               	movwf	(main@motorR+6)& (0+255),b
  1133                           
  1134                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1135   001364  0E21               	movlw	33
  1136   001366  6FF1               	movwf	(main@motorR+7)& (0+255),b
  1137   001368  0E0F               	movlw	15
  1138   00136A  6FF2               	movwf	(main@motorR+8)& (0+255),b
  1139   00136C                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1142   00136C  C0ED  F1ED         	movff	main@PWMcycle,main@motorR+3
  1143   001370  6BEE               	clrf	(main@motorR+4)& (0+255),b
  1144   001372                     
  1145                           ; BSR set to: 1
  1146                           ;main.c: 58:     setMotorPWM(&motorL);
  1147   001372  0EE1               	movlw	low main@motorL
  1148   001374  6E11               	movwf	setMotorPWM@m^0,c
  1149   001376  0E01               	movlw	high main@motorL
  1150   001378  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1151   00137A  ECB9  F011         	call	_setMotorPWM	;wreg free
  1152   00137E                     
  1153                           ;main.c: 59:     setMotorPWM(&motorR);
  1154   00137E  0EEA               	movlw	low main@motorR
  1155   001380  6E11               	movwf	setMotorPWM@m^0,c
  1156   001382  0E01               	movlw	high main@motorR
  1157   001384  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1158   001386  ECB9  F011         	call	_setMotorPWM	;wreg free
  1159   00138A                     
  1160                           ;main.c: 65:     colour card;;main.c: 66:     char buf[150];;main.c: 68:     unsigned in
      +                          t expected_values[3][9];;main.c: 69:     unsigned int red_read = 0;
  1161   00138A  0E00               	movlw	0
  1162   00138C  0100               	movlb	0	; () banked
  1163   00138E  6FF8               	movwf	(main@red_read+1)& (0+255),b
  1164   001390  0E00               	movlw	0
  1165   001392  6FF7               	movwf	main@red_read& (0+255),b
  1166   001394                     
  1167                           ; BSR set to: 0
  1168                           ;main.c: 70:     unsigned int green_read = 0;
  1169   001394  0E00               	movlw	0
  1170   001396  6FFA               	movwf	(main@green_read+1)& (0+255),b
  1171   001398  0E00               	movlw	0
  1172   00139A  6FF9               	movwf	main@green_read& (0+255),b
  1173   00139C                     
  1174                           ; BSR set to: 0
  1175                           ;main.c: 71:     unsigned int blue_read = 0;
  1176   00139C  0E00               	movlw	0
  1177   00139E  6FFC               	movwf	(main@blue_read+1)& (0+255),b
  1178   0013A0  0E00               	movlw	0
  1179   0013A2  6FFB               	movwf	main@blue_read& (0+255),b
  1180   0013A4                     
  1181                           ; BSR set to: 0
  1182                           ;main.c: 74:     unsigned int TimerCount = 0;
  1183   0013A4  0E00               	movlw	0
  1184   0013A6  6FF4               	movwf	(main@TimerCount+1)& (0+255),b
  1185   0013A8  0E00               	movlw	0
  1186   0013AA  6FF3               	movwf	main@TimerCount& (0+255),b
  1187   0013AC                     
  1188                           ; BSR set to: 0
  1189                           ;main.c: 75:     unsigned int CardCount = 0;
  1190   0013AC  0E00               	movlw	0
  1191   0013AE  6FF6               	movwf	(main@CardCount+1)& (0+255),b
  1192   0013B0  0E00               	movlw	0
  1193   0013B2  6FF5               	movwf	main@CardCount& (0+255),b
  1194   0013B4                     
  1195                           ; BSR set to: 0
  1196                           ;main.c: 77:     HomeStored ReturnHomeArray;;main.c: 87:     for(colour i = RED; i<= BLA
      +                          CK; i++){
  1197   0013B4  0E00               	movlw	0
  1198   0013B6  0101               	movlb	1	; () banked
  1199   0013B8  6FDE               	movwf	main@i& (0+255),b
  1200   0013BA  EFE0  F009         	goto	l240
  1201   0013BE                     l241:
  1202                           
  1203                           ;main.c: 89:             LATDbits.LATD4 = 1;
  1204   0013BE  887C               	bsf	124,4,c	;volatile
  1205   0013C0                     l240:
  1206                           
  1207                           ;main.c: 88:         while(PORTFbits.RF2){
  1208   0013C0  B48E               	btfsc	142,2,c	;volatile
  1209   0013C2  EFE5  F009         	goto	u1711
  1210   0013C6  EFE7  F009         	goto	u1710
  1211   0013CA                     u1711:
  1212   0013CA  EFDF  F009         	goto	l241
  1213   0013CE                     u1710:
  1214   0013CE                     
  1215                           ;main.c: 91:         LATDbits.LATD4 = 0;
  1216   0013CE  987C               	bcf	124,4,c	;volatile
  1217   0013D0                     
  1218                           ;main.c: 92:         collect_avg_readings(&red_read, &green_read, &blue_read);
  1219   0013D0  0EF7               	movlw	low main@red_read
  1220   0013D2  6E11               	movwf	collect_avg_readings@red_read^0,c
  1221   0013D4  0E00               	movlw	high main@red_read
  1222   0013D6  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1223   0013D8  0EF9               	movlw	low main@green_read
  1224   0013DA  6E13               	movwf	collect_avg_readings@green_read^0,c
  1225   0013DC  0E00               	movlw	high main@green_read
  1226   0013DE  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1227   0013E0  0EFB               	movlw	low main@blue_read
  1228   0013E2  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1229   0013E4  0E00               	movlw	high main@blue_read
  1230   0013E6  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1231   0013E8  EC02  F010         	call	_collect_avg_readings	;wreg free
  1232   0013EC                     
  1233                           ;main.c: 93:         expected_values[RED][i] = red_read;
  1234   0013EC  0101               	movlb	1	; () banked
  1235   0013EE  51DE               	movf	main@i& (0+255),w,b
  1236   0013F0  0D02               	mullw	2
  1237   0013F2  0E00               	movlw	low main@expected_values
  1238   0013F4  24F3               	addwf	243,w,c
  1239   0013F6  6ED9               	movwf	fsr2l,c
  1240   0013F8  0E02               	movlw	high main@expected_values
  1241   0013FA  20F4               	addwfc	prodh,w,c
  1242   0013FC  6EDA               	movwf	fsr2h,c
  1243   0013FE  C0F7  FFDE         	movff	main@red_read,postinc2
  1244   001402  C0F8  FFDD         	movff	main@red_read+1,postdec2
  1245   001406                     
  1246                           ; BSR set to: 1
  1247                           ;main.c: 94:         expected_values[GREEN][i] = green_read;
  1248   001406  51DE               	movf	main@i& (0+255),w,b
  1249   001408  0D02               	mullw	2
  1250   00140A  0E12               	movlw	18
  1251   00140C  26F3               	addwf	243,f,c
  1252   00140E  0E00               	movlw	0
  1253   001410  22F4               	addwfc	244,f,c
  1254   001412  0E00               	movlw	low main@expected_values
  1255   001414  24F3               	addwf	243,w,c
  1256   001416  6ED9               	movwf	fsr2l,c
  1257   001418  0E02               	movlw	high main@expected_values
  1258   00141A  20F4               	addwfc	prodh,w,c
  1259   00141C  6EDA               	movwf	fsr2h,c
  1260   00141E  C0F9  FFDE         	movff	main@green_read,postinc2
  1261   001422  C0FA  FFDD         	movff	main@green_read+1,postdec2
  1262   001426                     
  1263                           ; BSR set to: 1
  1264                           ;main.c: 95:         expected_values[BLUE][i] = blue_read;
  1265   001426  51DE               	movf	main@i& (0+255),w,b
  1266   001428  0D02               	mullw	2
  1267   00142A  0E24               	movlw	36
  1268   00142C  26F3               	addwf	243,f,c
  1269   00142E  0E00               	movlw	0
  1270   001430  22F4               	addwfc	244,f,c
  1271   001432  0E00               	movlw	low main@expected_values
  1272   001434  24F3               	addwf	243,w,c
  1273   001436  6ED9               	movwf	fsr2l,c
  1274   001438  0E02               	movlw	high main@expected_values
  1275   00143A  20F4               	addwfc	prodh,w,c
  1276   00143C  6EDA               	movwf	fsr2h,c
  1277   00143E  C0FB  FFDE         	movff	main@blue_read,postinc2
  1278   001442  C0FC  FFDD         	movff	main@blue_read+1,postdec2
  1279   001446                     
  1280                           ; BSR set to: 1
  1281                           ;main.c: 96:     }
  1282   001446  2BDE               	incf	main@i& (0+255),f,b
  1283   001448                     
  1284                           ; BSR set to: 1
  1285   001448  0E08               	movlw	8
  1286   00144A  65DE               	cpfsgt	main@i& (0+255),b
  1287   00144C  EF2A  F00A         	goto	u1721
  1288   001450  EF2C  F00A         	goto	u1720
  1289   001454                     u1721:
  1290   001454  EFE0  F009         	goto	l240
  1291   001458                     u1720:
  1292   001458                     
  1293                           ; BSR set to: 1
  1294                           ;main.c: 97:         for (int i = 0; i <= 500; i++){
  1295   001458  0E00               	movlw	0
  1296   00145A  0100               	movlb	0	; () banked
  1297   00145C  6FF0               	movwf	(main@i_1233+1)& (0+255),b
  1298   00145E  0E00               	movlw	0
  1299   001460  6FEF               	movwf	main@i_1233& (0+255),b
  1300   001462                     l3557:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 98:         clear_read = color_read_Clear();
  1304   001462  EC08  F018         	call	_color_read_Clear	;wreg free
  1305   001466  C008  F1DF         	movff	?_color_read_Clear,main@clear_read
  1306   00146A  C009  F1E0         	movff	?_color_read_Clear+1,main@clear_read+1
  1307   00146E                     
  1308                           ;main.c: 99:     }
  1309   00146E  0100               	movlb	0	; () banked
  1310   001470  4BEF               	infsnz	main@i_1233& (0+255),f,b
  1311   001472  2BF0               	incf	(main@i_1233+1)& (0+255),f,b
  1312   001474                     
  1313                           ; BSR set to: 0
  1314   001474  BFF0               	btfsc	(main@i_1233+1)& (0+255),7,b
  1315   001476  EF46  F00A         	goto	u1731
  1316   00147A  0EF5               	movlw	245
  1317   00147C  5DEF               	subwf	main@i_1233& (0+255),w,b
  1318   00147E  0E01               	movlw	1
  1319   001480  59F0               	subwfb	(main@i_1233+1)& (0+255),w,b
  1320   001482  A0D8               	btfss	status,0,c
  1321   001484  EF46  F00A         	goto	u1731
  1322   001488  EF48  F00A         	goto	u1730
  1323   00148C                     u1731:
  1324   00148C  EF31  F00A         	goto	l3557
  1325   001490                     u1730:
  1326   001490                     
  1327                           ; BSR set to: 0
  1328                           ;main.c: 101:     for(int i = 0; i <= 2; i++){
  1329   001490  0E00               	movlw	0
  1330   001492  6FF2               	movwf	(main@i_1235+1)& (0+255),b
  1331   001494  0E00               	movlw	0
  1332   001496  6FF1               	movwf	main@i_1235& (0+255),b
  1333   001498                     l3569:
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 102:         clear_read += color_read_Clear();
  1337   001498  EC08  F018         	call	_color_read_Clear	;wreg free
  1338   00149C  5008               	movf	?_color_read_Clear^0,w,c
  1339   00149E  0101               	movlb	1	; () banked
  1340   0014A0  27DF               	addwf	main@clear_read& (0+255),f,b
  1341   0014A2  5009               	movf	(?_color_read_Clear+1)^0,w,c
  1342   0014A4  23E0               	addwfc	(main@clear_read+1)& (0+255),f,b
  1343   0014A6                     
  1344                           ; BSR set to: 1
  1345                           ;main.c: 103:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1346   0014A6  0E11               	movlw	17
  1347   0014A8  6E57               	movwf	(??_main+1)^0,c
  1348   0014AA  0E3C               	movlw	60
  1349   0014AC  6E56               	movwf	??_main^0,c
  1350   0014AE  0ECB               	movlw	203
  1351   0014B0                     u1837:
  1352   0014B0  2EE8               	decfsz	wreg,f,c
  1353   0014B2  D7FE               	bra	u1837
  1354   0014B4  2E56               	decfsz	??_main^0,f,c
  1355   0014B6  D7FC               	bra	u1837
  1356   0014B8  2E57               	decfsz	(??_main+1)^0,f,c
  1357   0014BA  D7FA               	bra	u1837
  1358   0014BC  F000               	nop	
  1359   0014BE                     
  1360                           ;main.c: 104:     }
  1361   0014BE  0100               	movlb	0	; () banked
  1362   0014C0  4BF1               	infsnz	main@i_1235& (0+255),f,b
  1363   0014C2  2BF2               	incf	(main@i_1235+1)& (0+255),f,b
  1364   0014C4                     
  1365                           ; BSR set to: 0
  1366   0014C4  BFF2               	btfsc	(main@i_1235+1)& (0+255),7,b
  1367   0014C6  EF6E  F00A         	goto	u1741
  1368   0014CA  51F2               	movf	(main@i_1235+1)& (0+255),w,b
  1369   0014CC  E109               	bnz	u1740
  1370   0014CE  0E03               	movlw	3
  1371   0014D0  5DF1               	subwf	main@i_1235& (0+255),w,b
  1372   0014D2  A0D8               	btfss	status,0,c
  1373   0014D4  EF6E  F00A         	goto	u1741
  1374   0014D8  EF70  F00A         	goto	u1740
  1375   0014DC                     u1741:
  1376   0014DC  EF4C  F00A         	goto	l3569
  1377   0014E0                     u1740:
  1378   0014E0                     
  1379                           ; BSR set to: 0
  1380                           ;main.c: 106:     clear_read = clear_read/4;
  1381   0014E0  C1DF  F056         	movff	main@clear_read,??_main
  1382   0014E4  C1E0  F057         	movff	main@clear_read+1,??_main+1
  1383   0014E8  90D8               	bcf	status,0,c
  1384   0014EA  3257               	rrcf	(??_main+1)^0,f,c
  1385   0014EC  3256               	rrcf	??_main^0,f,c
  1386   0014EE  90D8               	bcf	status,0,c
  1387   0014F0  3257               	rrcf	(??_main+1)^0,f,c
  1388   0014F2  3256               	rrcf	??_main^0,f,c
  1389   0014F4  C056  F1DF         	movff	??_main,main@clear_read
  1390   0014F8  C057  F1E0         	movff	??_main+1,main@clear_read+1
  1391   0014FC                     
  1392                           ; BSR set to: 0
  1393                           ;main.c: 108:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1394   0014FC  0E48               	movlw	low main@buf
  1395   0014FE  6F66               	movwf	sprintf@s& (0+255),b
  1396   001500  0E01               	movlw	high main@buf
  1397   001502  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1398   001504  0E1B               	movlw	low STR_1
  1399   001506  6F68               	movwf	sprintf@fmt& (0+255),b
  1400   001508  0E0E               	movlw	high STR_1
  1401   00150A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1402   00150C  C1DF  F06A         	movff	main@clear_read,?_sprintf+4
  1403   001510  C1E0  F06B         	movff	main@clear_read+1,?_sprintf+5
  1404   001514  ECDF  F017         	call	_sprintf	;wreg free
  1405   001518                     
  1406                           ;main.c: 109:     sendStringSerial4(buf);
  1407   001518  0E48               	movlw	low main@buf
  1408   00151A  6E05               	movwf	sendStringSerial4@string^0,c
  1409   00151C  0E01               	movlw	high main@buf
  1410   00151E  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1411   001520  EC25  F019         	call	_sendStringSerial4	;wreg free
  1412   001524                     
  1413                           ;main.c: 111:     unsigned int clear_read_check = clear_read + 800;
  1414   001524  0E20               	movlw	32
  1415   001526  0101               	movlb	1	; () banked
  1416   001528  25DF               	addwf	main@clear_read& (0+255),w,b
  1417   00152A  0100               	movlb	0	; () banked
  1418   00152C  6FEB               	movwf	main@clear_read_check& (0+255),b
  1419   00152E  0E03               	movlw	3
  1420   001530  0101               	movlb	1	; () banked
  1421   001532  21E0               	addwfc	(main@clear_read+1)& (0+255),w,b
  1422   001534  0100               	movlb	0	; () banked
  1423   001536  6FEC               	movwf	(main@clear_read_check+1)& (0+255),b
  1424   001538                     
  1425                           ; BSR set to: 0
  1426                           ;main.c: 116:     fullSpeedAhead(&motorL, &motorR);
  1427   001538  0EE1               	movlw	low main@motorL
  1428   00153A  6E17               	movwf	fullSpeedAhead@mL^0,c
  1429   00153C  0E01               	movlw	high main@motorL
  1430   00153E  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1431   001540  0EEA               	movlw	low main@motorR
  1432   001542  6E19               	movwf	fullSpeedAhead@mR^0,c
  1433   001544  0E01               	movlw	high main@motorR
  1434   001546  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1435   001548  EC31  F016         	call	_fullSpeedAhead	;wreg free
  1436   00154C                     l3587:
  1437                           
  1438                           ;main.c: 119:         if (TimerFlag == 1){
  1439   00154C  0101               	movlb	1	; () banked
  1440   00154E  05F7               	decf	_TimerFlag& (0+255),w,b
  1441   001550  11F8               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1442   001552  A4D8               	btfss	status,2,c
  1443   001554  EFAE  F00A         	goto	u1751
  1444   001558  EFB0  F00A         	goto	u1750
  1445   00155C                     u1751:
  1446   00155C  EFD9  F00A         	goto	l3599
  1447   001560                     u1750:
  1448   001560                     
  1449                           ; BSR set to: 1
  1450                           ;main.c: 120:             TimerCount += 1;
  1451   001560  0100               	movlb	0	; () banked
  1452   001562  4BF3               	infsnz	main@TimerCount& (0+255),f,b
  1453   001564  2BF4               	incf	(main@TimerCount+1)& (0+255),f,b
  1454   001566                     
  1455                           ; BSR set to: 0
  1456                           ;main.c: 121:             if (TimerCount == 10){LATHbits.LATH3=!LATHbits.LATH3; TimerCou
      +                          nt = 0;}
  1457   001566  0E0A               	movlw	10
  1458   001568  19F3               	xorwf	main@TimerCount& (0+255),w,b
  1459   00156A  11F4               	iorwf	(main@TimerCount+1)& (0+255),w,b
  1460   00156C  A4D8               	btfss	status,2,c
  1461   00156E  EFBB  F00A         	goto	u1761
  1462   001572  EFBD  F00A         	goto	u1760
  1463   001576                     u1761:
  1464   001576  EFD4  F00A         	goto	l3597
  1465   00157A                     u1760:
  1466   00157A                     
  1467                           ; BSR set to: 0
  1468   00157A  A680               	btfss	128,3,c	;volatile
  1469   00157C  EFC2  F00A         	goto	u1771
  1470   001580  EFC6  F00A         	goto	u1770
  1471   001584                     u1771:
  1472   001584  6A56               	clrf	??_main^0,c
  1473   001586  2A56               	incf	??_main^0,f,c
  1474   001588  EFC7  F00A         	goto	u1788
  1475   00158C                     u1770:
  1476   00158C  6A56               	clrf	??_main^0,c
  1477   00158E                     u1788:
  1478   00158E  4656               	rlncf	??_main^0,f,c
  1479   001590  4656               	rlncf	??_main^0,f,c
  1480   001592  4656               	rlncf	??_main^0,f,c
  1481   001594  5080               	movf	128,w,c	;volatile
  1482   001596  1856               	xorwf	??_main^0,w,c
  1483   001598  0BF7               	andlw	-9
  1484   00159A  1856               	xorwf	??_main^0,w,c
  1485   00159C  6E80               	movwf	128,c	;volatile
  1486   00159E  0E00               	movlw	0
  1487   0015A0  0100               	movlb	0	; () banked
  1488   0015A2  6FF4               	movwf	(main@TimerCount+1)& (0+255),b
  1489   0015A4  0E00               	movlw	0
  1490   0015A6  6FF3               	movwf	main@TimerCount& (0+255),b
  1491   0015A8                     l3597:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 122:             TimerFlag = 0;
  1495   0015A8  0E00               	movlw	0
  1496   0015AA  0101               	movlb	1	; () banked
  1497   0015AC  6FF8               	movwf	(_TimerFlag+1)& (0+255),b
  1498   0015AE  0E00               	movlw	0
  1499   0015B0  6FF7               	movwf	_TimerFlag& (0+255),b
  1500   0015B2                     l3599:
  1501                           
  1502                           ; BSR set to: 1
  1503                           ;main.c: 124:         clear_read = color_read_Clear();
  1504   0015B2  EC08  F018         	call	_color_read_Clear	;wreg free
  1505   0015B6  C008  F1DF         	movff	?_color_read_Clear,main@clear_read
  1506   0015BA  C009  F1E0         	movff	?_color_read_Clear+1,main@clear_read+1
  1507   0015BE                     
  1508                           ;main.c: 125:         if (clear_read > clear_read_check){
  1509   0015BE  0101               	movlb	1	; () banked
  1510   0015C0  51DF               	movf	main@clear_read& (0+255),w,b
  1511   0015C2  0100               	movlb	0	; () banked
  1512   0015C4  5DEB               	subwf	main@clear_read_check& (0+255),w,b
  1513   0015C6  0101               	movlb	1	; () banked
  1514   0015C8  51E0               	movf	(main@clear_read+1)& (0+255),w,b
  1515   0015CA  0100               	movlb	0	; () banked
  1516   0015CC  59EC               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1517   0015CE  B0D8               	btfsc	status,0,c
  1518   0015D0  EFEC  F00A         	goto	u1791
  1519   0015D4  EFEE  F00A         	goto	u1790
  1520   0015D8                     u1791:
  1521   0015D8  EF7D  F00B         	goto	l3627
  1522   0015DC                     u1790:
  1523   0015DC                     
  1524                           ; BSR set to: 0
  1525                           ;main.c: 127:             ReturnHomeArray.TimerCount[CardCount] = TimerCount;
  1526   0015DC  90D8               	bcf	status,0,c
  1527   0015DE  35F5               	rlcf	main@CardCount& (0+255),w,b
  1528   0015E0  6ED9               	movwf	fsr2l,c
  1529   0015E2  35F6               	rlcf	(main@CardCount+1)& (0+255),w,b
  1530   0015E4  6EDA               	movwf	fsr2h,c
  1531   0015E6  0E36               	movlw	low main@ReturnHomeArray
  1532   0015E8  26D9               	addwf	fsr2l,f,c
  1533   0015EA  0E02               	movlw	high main@ReturnHomeArray
  1534   0015EC  22DA               	addwfc	fsr2h,f,c
  1535   0015EE  C0F3  FFDE         	movff	main@TimerCount,postinc2
  1536   0015F2  C0F4  FFDD         	movff	main@TimerCount+1,postdec2
  1537   0015F6                     
  1538                           ; BSR set to: 0
  1539                           ;main.c: 128:             stop(&motorL, &motorR);
  1540   0015F6  0EE1               	movlw	low main@motorL
  1541   0015F8  6E17               	movwf	stop@mL^0,c
  1542   0015FA  0E01               	movlw	high main@motorL
  1543   0015FC  6E18               	movwf	(stop@mL+1)^0,c
  1544   0015FE  0EEA               	movlw	low main@motorR
  1545   001600  6E19               	movwf	stop@mR^0,c
  1546   001602  0E01               	movlw	high main@motorR
  1547   001604  6E1A               	movwf	(stop@mR+1)^0,c
  1548   001606  ECBB  F016         	call	_stop	;wreg free
  1549   00160A                     
  1550                           ;main.c: 129:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1551   00160A  0E2A               	movlw	42
  1552   00160C  6E56               	movwf	??_main^0,c
  1553   00160E  0E8E               	movlw	142
  1554   001610                     u1847:
  1555   001610  2EE8               	decfsz	wreg,f,c
  1556   001612  D7FE               	bra	u1847
  1557   001614  2E56               	decfsz	??_main^0,f,c
  1558   001616  D7FC               	bra	u1847
  1559   001618                     
  1560                           ;main.c: 131:             sprintf(buf, "Timercount %d \n", ReturnHomeArray.TimerCount[Ca
      +                          rdCount]);
  1561   001618  0E48               	movlw	low main@buf
  1562   00161A  0100               	movlb	0	; () banked
  1563   00161C  6F66               	movwf	sprintf@s& (0+255),b
  1564   00161E  0E01               	movlw	high main@buf
  1565   001620  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1566   001622  0E47               	movlw	low STR_2
  1567   001624  6F68               	movwf	sprintf@fmt& (0+255),b
  1568   001626  0E0E               	movlw	high STR_2
  1569   001628  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1570   00162A  90D8               	bcf	status,0,c
  1571   00162C  35F5               	rlcf	main@CardCount& (0+255),w,b
  1572   00162E  6ED9               	movwf	fsr2l,c
  1573   001630  35F6               	rlcf	(main@CardCount+1)& (0+255),w,b
  1574   001632  6EDA               	movwf	fsr2h,c
  1575   001634  0E36               	movlw	low main@ReturnHomeArray
  1576   001636  26D9               	addwf	fsr2l,f,c
  1577   001638  0E02               	movlw	high main@ReturnHomeArray
  1578   00163A  22DA               	addwfc	fsr2h,f,c
  1579   00163C  CFDE F06A          	movff	postinc2,?_sprintf+4
  1580   001640  CFDD F06B          	movff	postdec2,?_sprintf+5
  1581   001644  ECDF  F017         	call	_sprintf	;wreg free
  1582   001648                     
  1583                           ;main.c: 132:             sendStringSerial4(buf);
  1584   001648  0E48               	movlw	low main@buf
  1585   00164A  6E05               	movwf	sendStringSerial4@string^0,c
  1586   00164C  0E01               	movlw	high main@buf
  1587   00164E  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1588   001650  EC25  F019         	call	_sendStringSerial4	;wreg free
  1589   001654                     
  1590                           ;main.c: 133:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1591   001654  0E2A               	movlw	42
  1592   001656  6E56               	movwf	??_main^0,c
  1593   001658  0E8E               	movlw	142
  1594   00165A                     u1857:
  1595   00165A  2EE8               	decfsz	wreg,f,c
  1596   00165C  D7FE               	bra	u1857
  1597   00165E  2E56               	decfsz	??_main^0,f,c
  1598   001660  D7FC               	bra	u1857
  1599   001662                     
  1600                           ;main.c: 135:             card = card_response(buf, &red_read, &green_read, &blue_read, 
      +                          expected_values, card, &motorL, &motorR, ReturnHomeArray);
  1601   001662  0E48               	movlw	low main@buf
  1602   001664  0100               	movlb	0	; () banked
  1603   001666  6FA0               	movwf	card_response@buf& (0+255),b
  1604   001668  0E01               	movlw	high main@buf
  1605   00166A  6FA1               	movwf	(card_response@buf+1)& (0+255),b
  1606   00166C  0EF7               	movlw	low main@red_read
  1607   00166E  6FA2               	movwf	card_response@red_read& (0+255),b
  1608   001670  0E00               	movlw	high main@red_read
  1609   001672  6FA3               	movwf	(card_response@red_read+1)& (0+255),b
  1610   001674  0EF9               	movlw	low main@green_read
  1611   001676  6FA4               	movwf	card_response@green_read& (0+255),b
  1612   001678  0E00               	movlw	high main@green_read
  1613   00167A  6FA5               	movwf	(card_response@green_read+1)& (0+255),b
  1614   00167C  0EFB               	movlw	low main@blue_read
  1615   00167E  6FA6               	movwf	card_response@blue_read& (0+255),b
  1616   001680  0E00               	movlw	high main@blue_read
  1617   001682  6FA7               	movwf	(card_response@blue_read+1)& (0+255),b
  1618   001684  0E00               	movlw	low main@expected_values
  1619   001686  6FA8               	movwf	card_response@expected_values& (0+255),b
  1620   001688  0E02               	movlw	high main@expected_values
  1621   00168A  6FA9               	movwf	(card_response@expected_values+1)& (0+255),b
  1622   00168C  C0EE  F0AA         	movff	main@card,card_response@card
  1623   001690  0EE1               	movlw	low main@motorL
  1624   001692  6FAB               	movwf	card_response@mL& (0+255),b
  1625   001694  0E01               	movlw	high main@motorL
  1626   001696  6FAC               	movwf	(card_response@mL+1)& (0+255),b
  1627   001698  0EEA               	movlw	low main@motorR
  1628   00169A  6FAD               	movwf	card_response@mR& (0+255),b
  1629   00169C  0E01               	movlw	high main@motorR
  1630   00169E  6FAE               	movwf	(card_response@mR+1)& (0+255),b
  1631   0016A0  EE22  F036         	lfsr	2,main@ReturnHomeArray
  1632   0016A4  EE00  F0AF         	lfsr	0,card_response@ReturnHomeArray
  1633   0016A8  0E3B               	movlw	59
  1634   0016AA                     u1801:
  1635   0016AA  CFDB FFEB          	movff	plusw2,plusw0
  1636   0016AE  06E8               	decf	wreg,f,c
  1637   0016B0  E2FC               	bc	u1801
  1638   0016B2  ECD0  F013         	call	_card_response	;wreg free
  1639   0016B6  0100               	movlb	0	; () banked
  1640   0016B8  6FEE               	movwf	main@card& (0+255),b
  1641   0016BA                     
  1642                           ; BSR set to: 0
  1643                           ;main.c: 136:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1644   0016BA  0E2A               	movlw	42
  1645   0016BC  6E56               	movwf	??_main^0,c
  1646   0016BE  0E8E               	movlw	142
  1647   0016C0                     u1867:
  1648   0016C0  2EE8               	decfsz	wreg,f,c
  1649   0016C2  D7FE               	bra	u1867
  1650   0016C4  2E56               	decfsz	??_main^0,f,c
  1651   0016C6  D7FC               	bra	u1867
  1652   0016C8                     
  1653                           ;main.c: 137:             ReturnHomeArray.card[CardCount] = card;
  1654   0016C8  0E36               	movlw	low main@ReturnHomeArray
  1655   0016CA  0100               	movlb	0	; () banked
  1656   0016CC  25F5               	addwf	main@CardCount& (0+255),w,b
  1657   0016CE  6ED9               	movwf	fsr2l,c
  1658   0016D0  0E02               	movlw	high main@ReturnHomeArray
  1659   0016D2  21F6               	addwfc	(main@CardCount+1)& (0+255),w,b
  1660   0016D4  6EDA               	movwf	fsr2h,c
  1661   0016D6  C0EE  FFDF         	movff	main@card,indf2
  1662   0016DA                     
  1663                           ; BSR set to: 0
  1664                           ;main.c: 139:             CardCount += 1;
  1665   0016DA  4BF5               	infsnz	main@CardCount& (0+255),f,b
  1666   0016DC  2BF6               	incf	(main@CardCount+1)& (0+255),f,b
  1667   0016DE                     
  1668                           ; BSR set to: 0
  1669                           ;main.c: 141:             TimerCount = 0;
  1670   0016DE  0E00               	movlw	0
  1671   0016E0  6FF4               	movwf	(main@TimerCount+1)& (0+255),b
  1672   0016E2  0E00               	movlw	0
  1673   0016E4  6FF3               	movwf	main@TimerCount& (0+255),b
  1674   0016E6                     
  1675                           ; BSR set to: 0
  1676                           ;main.c: 142:             fullSpeedAhead(&motorL, &motorR);
  1677   0016E6  0EE1               	movlw	low main@motorL
  1678   0016E8  6E17               	movwf	fullSpeedAhead@mL^0,c
  1679   0016EA  0E01               	movlw	high main@motorL
  1680   0016EC  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1681   0016EE  0EEA               	movlw	low main@motorR
  1682   0016F0  6E19               	movwf	fullSpeedAhead@mR^0,c
  1683   0016F2  0E01               	movlw	high main@motorR
  1684   0016F4  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1685   0016F6  EC31  F016         	call	_fullSpeedAhead	;wreg free
  1686   0016FA                     l3627:
  1687                           
  1688                           ;main.c: 145:         red_read = color_read_Red();
  1689   0016FA  EC30  F018         	call	_color_read_Red	;wreg free
  1690   0016FE  C008  F0F7         	movff	?_color_read_Red,main@red_read
  1691   001702  C009  F0F8         	movff	?_color_read_Red+1,main@red_read+1
  1692   001706                     
  1693                           ;main.c: 146:         blue_read = color_read_Blue();
  1694   001706  EC80  F018         	call	_color_read_Blue	;wreg free
  1695   00170A  C008  F0FB         	movff	?_color_read_Blue,main@blue_read
  1696   00170E  C009  F0FC         	movff	?_color_read_Blue+1,main@blue_read+1
  1697   001712                     
  1698                           ;main.c: 147:         green_read = color_read_Green();
  1699   001712  EC58  F018         	call	_color_read_Green	;wreg free
  1700   001716  C008  F0F9         	movff	?_color_read_Green,main@green_read
  1701   00171A  C009  F0FA         	movff	?_color_read_Green+1,main@green_read+1
  1702   00171E                     
  1703                           ;main.c: 148:         clear_read = color_read_Clear();
  1704   00171E  EC08  F018         	call	_color_read_Clear	;wreg free
  1705   001722  C008  F1DF         	movff	?_color_read_Clear,main@clear_read
  1706   001726  C009  F1E0         	movff	?_color_read_Clear+1,main@clear_read+1
  1707   00172A                     
  1708                           ;main.c: 151:         sprintf(buf, "Raw %d, %d, %d, %d \n", red_read, green_read, blue_r
      +                          ead, clear_read);
  1709   00172A  0E48               	movlw	low main@buf
  1710   00172C  0100               	movlb	0	; () banked
  1711   00172E  6F66               	movwf	sprintf@s& (0+255),b
  1712   001730  0E01               	movlw	high main@buf
  1713   001732  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1714   001734  0E32               	movlw	low STR_3
  1715   001736  6F68               	movwf	sprintf@fmt& (0+255),b
  1716   001738  0E0E               	movlw	high STR_3
  1717   00173A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1718   00173C  C0F7  F06A         	movff	main@red_read,?_sprintf+4
  1719   001740  C0F8  F06B         	movff	main@red_read+1,?_sprintf+5
  1720   001744  C0F9  F06C         	movff	main@green_read,?_sprintf+6
  1721   001748  C0FA  F06D         	movff	main@green_read+1,?_sprintf+7
  1722   00174C  C0FB  F06E         	movff	main@blue_read,?_sprintf+8
  1723   001750  C0FC  F06F         	movff	main@blue_read+1,?_sprintf+9
  1724   001754  C1DF  F070         	movff	main@clear_read,?_sprintf+10
  1725   001758  C1E0  F071         	movff	main@clear_read+1,?_sprintf+11
  1726   00175C  ECDF  F017         	call	_sprintf	;wreg free
  1727   001760                     
  1728                           ;main.c: 152:         sendStringSerial4(buf);
  1729   001760  0E48               	movlw	low main@buf
  1730   001762  6E05               	movwf	sendStringSerial4@string^0,c
  1731   001764  0E01               	movlw	high main@buf
  1732   001766  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1733   001768  EC25  F019         	call	_sendStringSerial4	;wreg free
  1734   00176C                     
  1735                           ;main.c: 153:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1736   00176C  0E29               	movlw	41
  1737   00176E  6E57               	movwf	(??_main+1)^0,c
  1738   001770  0E96               	movlw	150
  1739   001772  6E56               	movwf	??_main^0,c
  1740   001774  0E7F               	movlw	127
  1741   001776                     u1877:
  1742   001776  2EE8               	decfsz	wreg,f,c
  1743   001778  D7FE               	bra	u1877
  1744   00177A  2E56               	decfsz	??_main^0,f,c
  1745   00177C  D7FC               	bra	u1877
  1746   00177E  2E57               	decfsz	(??_main+1)^0,f,c
  1747   001780  D7FA               	bra	u1877
  1748   001782  F000               	nop	
  1749   001784                     
  1750                           ;main.c: 154:          LATHbits.LATH3=!LATHbits.LATH3;
  1751   001784  A680               	btfss	128,3,c	;volatile
  1752   001786  EFC7  F00B         	goto	u1811
  1753   00178A  EFCB  F00B         	goto	u1810
  1754   00178E                     u1811:
  1755   00178E  6A56               	clrf	??_main^0,c
  1756   001790  2A56               	incf	??_main^0,f,c
  1757   001792  EFCC  F00B         	goto	u1828
  1758   001796                     u1810:
  1759   001796  6A56               	clrf	??_main^0,c
  1760   001798                     u1828:
  1761   001798  4656               	rlncf	??_main^0,f,c
  1762   00179A  4656               	rlncf	??_main^0,f,c
  1763   00179C  4656               	rlncf	??_main^0,f,c
  1764   00179E  5080               	movf	128,w,c	;volatile
  1765   0017A0  1856               	xorwf	??_main^0,w,c
  1766   0017A2  0BF7               	andlw	-9
  1767   0017A4  1856               	xorwf	??_main^0,w,c
  1768   0017A6  6E80               	movwf	128,c	;volatile
  1769   0017A8  EFA6  F00A         	goto	l3587
  1770   0017AC  EF2E  F000         	goto	start
  1771   0017B0                     __end_of_main:
  1772                           	callstack 0
  1773                           
  1774 ;; *************** function _initUSART4 *****************
  1775 ;; Defined at:
  1776 ;;		line 6 in file "serial.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 1
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text1
  1805   003372                     __ptext1:
  1806                           	callstack 0
  1807   003372                     _initUSART4:
  1808                           	callstack 29
  1809   003372                     
  1810                           ;serial.c: 10:     RC0PPS = 0x12;
  1811   003372  0E12               	movlw	18
  1812   003374  010E               	movlb	14	; () banked
  1813   003376  6F62               	movwf	98,b	;volatile
  1814                           
  1815                           ;serial.c: 11:     RX4PPS = 0x11;
  1816   003378  0E11               	movlw	17
  1817   00337A  6F15               	movwf	21,b	;volatile
  1818   00337C                     
  1819                           ; BSR set to: 14
  1820                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1821   00337C  8283               	bsf	131,1,c	;volatile
  1822   00337E                     
  1823                           ; BSR set to: 14
  1824                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1825   00337E  97E9               	bcf	233,3,b	;volatile
  1826   003380                     
  1827                           ; BSR set to: 14
  1828                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1829   003380  95E8               	bcf	232,2,b	;volatile
  1830                           
  1831                           ;serial.c: 17:     SP4BRGL = 51;
  1832   003382  0E33               	movlw	51
  1833   003384  6FE5               	movwf	229,b	;volatile
  1834                           
  1835                           ;serial.c: 18:     SP4BRGH = 0;
  1836   003386  0E00               	movlw	0
  1837   003388  6FE6               	movwf	230,b	;volatile
  1838   00338A                     
  1839                           ; BSR set to: 14
  1840                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1841   00338A  89E7               	bsf	231,4,b	;volatile
  1842   00338C                     
  1843                           ; BSR set to: 14
  1844                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1845   00338C  8BE8               	bsf	232,5,b	;volatile
  1846   00338E                     
  1847                           ; BSR set to: 14
  1848                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1849   00338E  8FE7               	bsf	231,7,b	;volatile
  1850   003390                     
  1851                           ; BSR set to: 14
  1852   003390  0012               	return		;funcret
  1853   003392                     __end_of_initUSART4:
  1854                           	callstack 0
  1855                           
  1856 ;; *************** function _initDCmotorsPWM *****************
  1857 ;; Defined at:
  1858 ;;		line 6 in file "dc_motor.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1876 ;;Total ram usage:        0 bytes
  1877 ;; Hardware stack levels used: 1
  1878 ;; Hardware stack levels required when called: 1
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text2
  1887   002CEE                     __ptext2:
  1888                           	callstack 0
  1889   002CEE                     _initDCmotorsPWM:
  1890                           	callstack 29
  1891   002CEE                     
  1892                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1893   002CEE  9485               	bcf	133,2,c	;volatile
  1894                           
  1895                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1896   002CF0  9885               	bcf	133,4,c	;volatile
  1897                           
  1898                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1899   002CF2  9E83               	bcf	131,7,c	;volatile
  1900                           
  1901                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1902   002CF4  9C87               	bcf	135,6,c	;volatile
  1903   002CF6                     
  1904                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1905   002CF6  0E05               	movlw	5
  1906   002CF8  010E               	movlb	14	; () banked
  1907   002CFA  6F74               	movwf	116,b	;volatile
  1908                           
  1909                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1910   002CFC  0E06               	movlw	6
  1911   002CFE  6F76               	movwf	118,b	;volatile
  1912                           
  1913                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1914   002D00  0E07               	movlw	7
  1915   002D02  6F69               	movwf	105,b	;volatile
  1916                           
  1917                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1918   002D04  0E08               	movlw	8
  1919   002D06  6F88               	movwf	136,b	;volatile
  1920                           
  1921                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1922   002D08  50BD               	movf	189,w,c	;volatile
  1923   002D0A  0B8F               	andlw	-113
  1924   002D0C  0940               	iorlw	64
  1925   002D0E  6EBD               	movwf	189,c	;volatile
  1926                           
  1927                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1928   002D10  0EE0               	movlw	-32
  1929   002D12  16BE               	andwf	190,f,c	;volatile
  1930                           
  1931                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1932   002D14  50BF               	movf	191,w,c	;volatile
  1933   002D16  0BF0               	andlw	-16
  1934   002D18  0901               	iorlw	1
  1935   002D1A  6EBF               	movwf	191,c	;volatile
  1936                           
  1937                           ;dc_motor.c: 26:     T2PR=99;
  1938   002D1C  0E63               	movlw	99
  1939   002D1E  6EBC               	movwf	188,c	;volatile
  1940   002D20                     
  1941                           ; BSR set to: 14
  1942                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1943   002D20  8EBD               	bsf	189,7,c	;volatile
  1944                           
  1945                           ;dc_motor.c: 31:     CCPR1H=0;
  1946   002D22  0E00               	movlw	0
  1947   002D24  6EAA               	movwf	170,c	;volatile
  1948                           
  1949                           ;dc_motor.c: 32:     CCPR2H=0;
  1950   002D26  0E00               	movlw	0
  1951   002D28  6EA6               	movwf	166,c	;volatile
  1952                           
  1953                           ;dc_motor.c: 33:     CCPR3H=0;
  1954   002D2A  0E00               	movlw	0
  1955   002D2C  010F               	movlb	15	; () banked
  1956   002D2E  6F25               	movwf	37,b	;volatile
  1957                           
  1958                           ;dc_motor.c: 34:     CCPR4H=0;
  1959   002D30  0E00               	movlw	0
  1960   002D32  6F21               	movwf	33,b	;volatile
  1961                           
  1962                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1963   002D34  0EFC               	movlw	-4
  1964   002D36  16AD               	andwf	173,f,c	;volatile
  1965                           
  1966                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1967   002D38  0EF3               	movlw	-13
  1968   002D3A  16AD               	andwf	173,f,c	;volatile
  1969                           
  1970                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1971   002D3C  0ECF               	movlw	-49
  1972   002D3E  16AD               	andwf	173,f,c	;volatile
  1973                           
  1974                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1975   002D40  0E3F               	movlw	-193
  1976   002D42  16AD               	andwf	173,f,c	;volatile
  1977   002D44                     
  1978                           ; BSR set to: 15
  1979                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1980   002D44  88AB               	bsf	171,4,c	;volatile
  1981                           
  1982                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1983   002D46  50AB               	movf	171,w,c	;volatile
  1984   002D48  0BF0               	andlw	-16
  1985   002D4A  090C               	iorlw	12
  1986   002D4C  6EAB               	movwf	171,c	;volatile
  1987   002D4E                     
  1988                           ; BSR set to: 15
  1989                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1990   002D4E  8EAB               	bsf	171,7,c	;volatile
  1991   002D50                     
  1992                           ; BSR set to: 15
  1993                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1994   002D50  88A7               	bsf	167,4,c	;volatile
  1995                           
  1996                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1997   002D52  50A7               	movf	167,w,c	;volatile
  1998   002D54  0BF0               	andlw	-16
  1999   002D56  090C               	iorlw	12
  2000   002D58  6EA7               	movwf	167,c	;volatile
  2001   002D5A                     
  2002                           ; BSR set to: 15
  2003                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  2004   002D5A  8EA7               	bsf	167,7,c	;volatile
  2005   002D5C                     
  2006                           ; BSR set to: 15
  2007                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  2008   002D5C  8926               	bsf	38,4,b	;volatile
  2009                           
  2010                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  2011   002D5E  5126               	movf	38,w,b	;volatile
  2012   002D60  0BF0               	andlw	-16
  2013   002D62  090C               	iorlw	12
  2014   002D64  6F26               	movwf	38,b	;volatile
  2015   002D66                     
  2016                           ; BSR set to: 15
  2017                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  2018   002D66  8F26               	bsf	38,7,b	;volatile
  2019   002D68                     
  2020                           ; BSR set to: 15
  2021                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  2022   002D68  8922               	bsf	34,4,b	;volatile
  2023                           
  2024                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  2025   002D6A  5122               	movf	34,w,b	;volatile
  2026   002D6C  0BF0               	andlw	-16
  2027   002D6E  090C               	iorlw	12
  2028   002D70  6F22               	movwf	34,b	;volatile
  2029   002D72                     
  2030                           ; BSR set to: 15
  2031                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2032   002D72  8F22               	bsf	34,7,b	;volatile
  2033   002D74                     
  2034                           ; BSR set to: 15
  2035   002D74  0012               	return		;funcret
  2036   002D76                     __end_of_initDCmotorsPWM:
  2037                           	callstack 0
  2038                           
  2039 ;; *************** function _color_read_Clear *****************
  2040 ;; Defined at:
  2041 ;;		line 71 in file "color.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  tmp             2   12[COMRAM] unsigned int 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  2    7[COMRAM] unsigned int 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2055 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2057 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2058 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2059 ;;Total ram usage:        7 bytes
  2060 ;; Hardware stack levels used: 1
  2061 ;; Hardware stack levels required when called: 3
  2062 ;; This function calls:
  2063 ;;		_I2C_2_Master_Read
  2064 ;;		_I2C_2_Master_RepStart
  2065 ;;		_I2C_2_Master_Start
  2066 ;;		_I2C_2_Master_Stop
  2067 ;;		_I2C_2_Master_Write
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text3
  2074   003010                     __ptext3:
  2075                           	callstack 0
  2076   003010                     _color_read_Clear:
  2077                           	callstack 27
  2078   003010                     
  2079                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  2080   003010  ECF0  F019         	call	_I2C_2_Master_Start	;wreg free
  2081                           
  2082                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  2083   003014  0E52               	movlw	82
  2084   003016  ECE5  F019         	call	_I2C_2_Master_Write
  2085                           
  2086                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  2087   00301A  0EB4               	movlw	180
  2088   00301C  ECE5  F019         	call	_I2C_2_Master_Write
  2089                           
  2090                           ;color.c: 77:  I2C_2_Master_RepStart();
  2091   003020  ECF5  F019         	call	_I2C_2_Master_RepStart	;wreg free
  2092                           
  2093                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  2094   003024  0E53               	movlw	83
  2095   003026  ECE5  F019         	call	_I2C_2_Master_Write
  2096                           
  2097                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  2098   00302A  0E01               	movlw	1
  2099   00302C  ECCA  F018         	call	_I2C_2_Master_Read
  2100   003030  6E0A               	movwf	??_color_read_Clear^0,c
  2101   003032  500A               	movf	??_color_read_Clear^0,w,c
  2102   003034  6E0D               	movwf	color_read_Clear@tmp^0,c
  2103   003036  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  2104                           
  2105                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2106   003038  0E00               	movlw	0
  2107   00303A  ECCA  F018         	call	_I2C_2_Master_Read
  2108   00303E  6E0A               	movwf	??_color_read_Clear^0,c
  2109   003040  500A               	movf	??_color_read_Clear^0,w,c
  2110   003042  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  2111   003044  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  2112   003046  500D               	movf	color_read_Clear@tmp^0,w,c
  2113   003048  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  2114   00304A  6E0D               	movwf	color_read_Clear@tmp^0,c
  2115   00304C  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  2116   00304E  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  2117   003050  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  2118                           
  2119                           ;color.c: 81:  I2C_2_Master_Stop();
  2120   003052  ECEB  F019         	call	_I2C_2_Master_Stop	;wreg free
  2121   003056                     
  2122                           ;color.c: 82:  return tmp;
  2123   003056  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  2124   00305A  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2125   00305E  0012               	return		;funcret
  2126   003060                     __end_of_color_read_Clear:
  2127                           	callstack 0
  2128                           
  2129 ;; *************** function _color_click_init *****************
  2130 ;; Defined at:
  2131 ;;		line 5 in file "color.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2148 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2149 ;;Total ram usage:        1 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 4
  2152 ;; This function calls:
  2153 ;;		_I2C_2_Master_Init
  2154 ;;		_color_writetoaddr
  2155 ;; This function is called by:
  2156 ;;		_main
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text4
  2161   003216                     __ptext4:
  2162                           	callstack 0
  2163   003216                     _color_click_init:
  2164                           	callstack 26
  2165   003216                     
  2166                           ;color.c: 8:     I2C_2_Master_Init();
  2167   003216  EC53  F019         	call	_I2C_2_Master_Init	;wreg free
  2168   00321A                     
  2169                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2170   00321A  0E01               	movlw	1
  2171   00321C  6E06               	movwf	color_writetoaddr@value^0,c
  2172   00321E  0E00               	movlw	0
  2173   003220  ECC9  F019         	call	_color_writetoaddr
  2174   003224                     
  2175                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2176   003224  0E3F               	movlw	63
  2177   003226  6E08               	movwf	??_color_click_init^0,c
  2178   003228  0E55               	movlw	85
  2179   00322A                     u1887:
  2180   00322A  2EE8               	decfsz	wreg,f,c
  2181   00322C  D7FE               	bra	u1887
  2182   00322E  2E08               	decfsz	??_color_click_init^0,f,c
  2183   003230  D7FC               	bra	u1887
  2184   003232  F000               	nop	
  2185   003234                     
  2186                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2187   003234  0E03               	movlw	3
  2188   003236  6E06               	movwf	color_writetoaddr@value^0,c
  2189   003238  0E00               	movlw	0
  2190   00323A  ECC9  F019         	call	_color_writetoaddr
  2191   00323E                     
  2192                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2193   00323E  0ED5               	movlw	213
  2194   003240  6E06               	movwf	color_writetoaddr@value^0,c
  2195   003242  0E01               	movlw	1
  2196   003244  ECC9  F019         	call	_color_writetoaddr
  2197   003248  0012               	return		;funcret
  2198   00324A                     __end_of_color_click_init:
  2199                           	callstack 0
  2200                           
  2201 ;; *************** function _color_writetoaddr *****************
  2202 ;; Defined at:
  2203 ;;		line 21 in file "color.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  address         1    wreg     unsigned char 
  2206 ;;  value           1    5[COMRAM] unsigned char 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  address         1    6[COMRAM] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2218 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2222 ;;Total ram usage:        2 bytes
  2223 ;; Hardware stack levels used: 1
  2224 ;; Hardware stack levels required when called: 3
  2225 ;; This function calls:
  2226 ;;		_I2C_2_Master_Start
  2227 ;;		_I2C_2_Master_Stop
  2228 ;;		_I2C_2_Master_Write
  2229 ;; This function is called by:
  2230 ;;		_color_click_init
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text5
  2235   003392                     __ptext5:
  2236                           	callstack 0
  2237   003392                     _color_writetoaddr:
  2238                           	callstack 26
  2239                           
  2240                           ;incstack = 0
  2241                           ;color_writetoaddr@address stored from wreg
  2242   003392  6E07               	movwf	color_writetoaddr@address^0,c
  2243   003394                     
  2244                           ;color.c: 22:     I2C_2_Master_Start();
  2245   003394  ECF0  F019         	call	_I2C_2_Master_Start	;wreg free
  2246                           
  2247                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2248   003398  0E52               	movlw	82
  2249   00339A  ECE5  F019         	call	_I2C_2_Master_Write
  2250                           
  2251                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2252   00339E  5007               	movf	color_writetoaddr@address^0,w,c
  2253   0033A0  0980               	iorlw	128
  2254   0033A2  ECE5  F019         	call	_I2C_2_Master_Write
  2255                           
  2256                           ;color.c: 25:     I2C_2_Master_Write(value);
  2257   0033A6  5006               	movf	color_writetoaddr@value^0,w,c
  2258   0033A8  ECE5  F019         	call	_I2C_2_Master_Write
  2259                           
  2260                           ;color.c: 26:     I2C_2_Master_Stop();
  2261   0033AC  ECEB  F019         	call	_I2C_2_Master_Stop	;wreg free
  2262   0033B0  0012               	return		;funcret
  2263   0033B2                     __end_of_color_writetoaddr:
  2264                           	callstack 0
  2265                           
  2266 ;; *************** function _I2C_2_Master_Init *****************
  2267 ;; Defined at:
  2268 ;;		line 4 in file "i2c.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used: 1
  2288 ;; Hardware stack levels required when called: 1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_color_click_init
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text6
  2298   0032A6                     __ptext6:
  2299                           	callstack 0
  2300   0032A6                     _I2C_2_Master_Init:
  2301                           	callstack 28
  2302   0032A6                     
  2303                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2304   0032A6  010E               	movlb	14	; () banked
  2305   0032A8  51D9               	movf	217,w,b	;volatile
  2306   0032AA  0BF0               	andlw	-16
  2307   0032AC  0908               	iorlw	8
  2308   0032AE  6FD9               	movwf	217,b	;volatile
  2309   0032B0                     
  2310                           ; BSR set to: 14
  2311                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2312   0032B0  8BD9               	bsf	217,5,b	;volatile
  2313                           
  2314                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2315   0032B2  0E9F               	movlw	159
  2316   0032B4  6FD6               	movwf	214,b	;volatile
  2317   0032B6                     
  2318                           ; BSR set to: 14
  2319                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2320   0032B6  8A84               	bsf	132,5,c	;volatile
  2321   0032B8                     
  2322                           ; BSR set to: 14
  2323                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2324   0032B8  8C84               	bsf	132,6,c	;volatile
  2325   0032BA                     
  2326                           ; BSR set to: 14
  2327                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2328   0032BA  9BA7               	bcf	167,5,b	;volatile
  2329   0032BC                     
  2330                           ; BSR set to: 14
  2331                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2332   0032BC  9DA7               	bcf	167,6,b	;volatile
  2333                           
  2334                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2335   0032BE  0E1D               	movlw	29
  2336   0032C0  6F1D               	movwf	29,b	;volatile
  2337                           
  2338                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2339   0032C2  0E1E               	movlw	30
  2340   0032C4  6F1C               	movwf	28,b	;volatile
  2341                           
  2342                           ;i2c.c: 18:   RD5PPS=0x1C;
  2343   0032C6  0E1C               	movlw	28
  2344   0032C8  6F6F               	movwf	111,b	;volatile
  2345                           
  2346                           ;i2c.c: 19:   RD6PPS=0x1B;
  2347   0032CA  0E1B               	movlw	27
  2348   0032CC  6F70               	movwf	112,b	;volatile
  2349   0032CE                     
  2350                           ; BSR set to: 14
  2351   0032CE  0012               	return		;funcret
  2352   0032D0                     __end_of_I2C_2_Master_Init:
  2353                           	callstack 0
  2354                           
  2355 ;; *************** function _card_response *****************
  2356 ;; Defined at:
  2357 ;;		line 262 in file "colour_identify.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  buf             2   64[BANK0 ] PTR unsigned char 
  2360 ;;		 -> main@buf(150), 
  2361 ;;  red_read        2   66[BANK0 ] PTR unsigned int 
  2362 ;;		 -> main@red_read(2), 
  2363 ;;  green_read      2   68[BANK0 ] PTR unsigned int 
  2364 ;;		 -> main@green_read(2), 
  2365 ;;  blue_read       2   70[BANK0 ] PTR unsigned int 
  2366 ;;		 -> main@blue_read(2), 
  2367 ;;  expected_val    2   72[BANK0 ] PTR unsigned int [9]
  2368 ;;		 -> main@expected_values(54), 
  2369 ;;  card            1   74[BANK0 ] enum E14551
  2370 ;;  mL              2   75[BANK0 ] PTR struct DC_motor
  2371 ;;		 -> main@motorL(9), 
  2372 ;;  mR              2   77[BANK0 ] PTR struct DC_motor
  2373 ;;		 -> main@motorR(9), 
  2374 ;;  ReturnHomeAr   60   79[BANK0 ] struct HomeStored
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  normalised_v   54    0[BANK1 ] unsigned int [9][3]
  2377 ;;  master_close   18   54[BANK1 ] unsigned int [9]
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      enum E14569
  2380 ;; Registers used:
  2381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2387 ;;      Params:         0      75       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2388 ;;      Locals:         0       0      72       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;      Totals:         0      75      72       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;Total ram usage:      147 bytes
  2392 ;; Hardware stack levels used: 1
  2393 ;; Hardware stack levels required when called: 9
  2394 ;; This function calls:
  2395 ;;		_collect_avg_readings
  2396 ;;		_determine_card
  2397 ;;		_make_master_closeness
  2398 ;;		_motor_response
  2399 ;;		_normalise_readings
  2400 ;;		_sendStringSerial4
  2401 ;;		_sprintf
  2402 ;; This function is called by:
  2403 ;;		_main
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text7
  2408   0027A0                     __ptext7:
  2409                           	callstack 0
  2410   0027A0                     _card_response:
  2411                           	callstack 21
  2412   0027A0                     
  2413                           ;colour_identify.c: 266:     unsigned int normalised_values[3][9];;colour_identify.c: 26
      +                          7:     unsigned int master_closeness[9];;colour_identify.c: 269:     collect_avg_reading
      +                          s(red_read, green_read, blue_read);
  2414   0027A0  C0A2  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  2415   0027A4  C0A3  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2416   0027A8  C0A4  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  2417   0027AC  C0A5  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2418   0027B0  C0A6  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2419   0027B4  C0A7  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2420   0027B8  EC02  F010         	call	_collect_avg_readings	;wreg free
  2421   0027BC                     
  2422                           ;colour_identify.c: 270:     sprintf(buf, "\n AVG: R %d, G %d, B %d \n", *red_read, *gre
      +                          en_read, *blue_read);
  2423   0027BC  C0A0  F066         	movff	card_response@buf,sprintf@s
  2424   0027C0  C0A1  F067         	movff	card_response@buf+1,sprintf@s+1
  2425   0027C4  0E01               	movlw	low STR_4
  2426   0027C6  0100               	movlb	0	; () banked
  2427   0027C8  6F68               	movwf	sprintf@fmt& (0+255),b
  2428   0027CA  0E0E               	movlw	high STR_4
  2429   0027CC  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2430   0027CE  C0A2  FFD9         	movff	card_response@red_read,fsr2l
  2431   0027D2  C0A3  FFDA         	movff	card_response@red_read+1,fsr2h
  2432   0027D6  CFDE F06A          	movff	postinc2,?_sprintf+4
  2433   0027DA  CFDD F06B          	movff	postdec2,?_sprintf+5
  2434   0027DE  C0A4  FFD9         	movff	card_response@green_read,fsr2l
  2435   0027E2  C0A5  FFDA         	movff	card_response@green_read+1,fsr2h
  2436   0027E6  CFDE F06C          	movff	postinc2,?_sprintf+6
  2437   0027EA  CFDD F06D          	movff	postdec2,?_sprintf+7
  2438   0027EE  C0A6  FFD9         	movff	card_response@blue_read,fsr2l
  2439   0027F2  C0A7  FFDA         	movff	card_response@blue_read+1,fsr2h
  2440   0027F6  CFDE F06E          	movff	postinc2,?_sprintf+8
  2441   0027FA  CFDD F06F          	movff	postdec2,?_sprintf+9
  2442   0027FE  ECDF  F017         	call	_sprintf	;wreg free
  2443   002802                     
  2444                           ;colour_identify.c: 271:     sendStringSerial4(buf);
  2445   002802  C0A0  F005         	movff	card_response@buf,sendStringSerial4@string
  2446   002806  C0A1  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2447   00280A  EC25  F019         	call	_sendStringSerial4	;wreg free
  2448   00280E                     
  2449                           ;colour_identify.c: 273:     normalise_readings(buf, *red_read, *green_read, *blue_read,
      +                           expected_values, normalised_values);
  2450   00280E  C0A0  F01A         	movff	card_response@buf,normalise_readings@buf
  2451   002812  C0A1  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  2452   002816  C0A2  FFD9         	movff	card_response@red_read,fsr2l
  2453   00281A  C0A3  FFDA         	movff	card_response@red_read+1,fsr2h
  2454   00281E  CFDE F01C          	movff	postinc2,normalise_readings@red_read
  2455   002822  CFDD F01D          	movff	postdec2,normalise_readings@red_read+1
  2456   002826  C0A4  FFD9         	movff	card_response@green_read,fsr2l
  2457   00282A  C0A5  FFDA         	movff	card_response@green_read+1,fsr2h
  2458   00282E  CFDE F01E          	movff	postinc2,normalise_readings@green_read
  2459   002832  CFDD F01F          	movff	postdec2,normalise_readings@green_read+1
  2460   002836  C0A6  FFD9         	movff	card_response@blue_read,fsr2l
  2461   00283A  C0A7  FFDA         	movff	card_response@blue_read+1,fsr2h
  2462   00283E  CFDE F020          	movff	postinc2,normalise_readings@blue_read
  2463   002842  CFDD F021          	movff	postdec2,normalise_readings@blue_read+1
  2464   002846  C0A8  F022         	movff	card_response@expected_values,normalise_readings@expected_values
  2465   00284A  C0A9  F023         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2466   00284E  0E00               	movlw	low card_response@normalised_values
  2467   002850  6E24               	movwf	normalise_readings@normalised_values^0,c
  2468   002852  0E01               	movlw	high card_response@normalised_values
  2469   002854  6E25               	movwf	(normalise_readings@normalised_values+1)^0,c
  2470   002856  ECEE  F00E         	call	_normalise_readings	;wreg free
  2471   00285A                     
  2472                           ;colour_identify.c: 275:     make_master_closeness(buf, normalised_values,master_closene
      +                          ss);
  2473   00285A  C0A0  F011         	movff	card_response@buf,make_master_closeness@buf
  2474   00285E  C0A1  F012         	movff	card_response@buf+1,make_master_closeness@buf+1
  2475   002862  0E00               	movlw	low card_response@normalised_values
  2476   002864  6E13               	movwf	make_master_closeness@normalised_values^0,c
  2477   002866  0E01               	movlw	high card_response@normalised_values
  2478   002868  6E14               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2479   00286A  0E36               	movlw	low card_response@master_closeness
  2480   00286C  6E15               	movwf	make_master_closeness@master_closeness^0,c
  2481   00286E  0E01               	movlw	high card_response@master_closeness
  2482   002870  6E16               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2483   002872  EC6E  F014         	call	_make_master_closeness	;wreg free
  2484   002876                     
  2485                           ;colour_identify.c: 277:     card = determine_card(master_closeness);
  2486   002876  0E36               	movlw	low card_response@master_closeness
  2487   002878  6E04               	movwf	determine_card@master_closeness^0,c
  2488   00287A  0E01               	movlw	high card_response@master_closeness
  2489   00287C  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  2490   00287E  ECFE  F016         	call	_determine_card	;wreg free
  2491   002882  0100               	movlb	0	; () banked
  2492   002884  6FAA               	movwf	card_response@card& (0+255),b
  2493   002886                     
  2494                           ; BSR set to: 0
  2495                           ;colour_identify.c: 278:     sprintf(buf, "CARD %d \n", card);
  2496   002886  C0A0  F066         	movff	card_response@buf,sprintf@s
  2497   00288A  C0A1  F067         	movff	card_response@buf+1,sprintf@s+1
  2498   00288E  0E57               	movlw	low STR_5
  2499   002890  6F68               	movwf	sprintf@fmt& (0+255),b
  2500   002892  0E0E               	movlw	high STR_5
  2501   002894  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2502   002896  C0AA  F06A         	movff	card_response@card,?_sprintf+4
  2503   00289A  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2504   00289C  ECDF  F017         	call	_sprintf	;wreg free
  2505   0028A0                     
  2506                           ;colour_identify.c: 279:     sendStringSerial4(buf);
  2507   0028A0  C0A0  F005         	movff	card_response@buf,sendStringSerial4@string
  2508   0028A4  C0A1  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2509   0028A8  EC25  F019         	call	_sendStringSerial4	;wreg free
  2510   0028AC                     
  2511                           ;colour_identify.c: 281:     motor_response(card, mL, mR, ReturnHomeArray);
  2512   0028AC  C0AB  F060         	movff	card_response@mL,motor_response@mL
  2513   0028B0  C0AC  F061         	movff	card_response@mL+1,motor_response@mL+1
  2514   0028B4  C0AD  F062         	movff	card_response@mR,motor_response@mR
  2515   0028B8  C0AE  F063         	movff	card_response@mR+1,motor_response@mR+1
  2516   0028BC  EE20  F0AF         	lfsr	2,card_response@ReturnHomeArray
  2517   0028C0  EE00  F064         	lfsr	0,motor_response@ReturnHomeArray
  2518   0028C4  0E3B               	movlw	59
  2519   0028C6                     u1701:
  2520   0028C6  CFDB FFEB          	movff	plusw2,plusw0
  2521   0028CA  06E8               	decf	wreg,f,c
  2522   0028CC  E2FC               	bc	u1701
  2523   0028CE  0100               	movlb	0	; () banked
  2524   0028D0  51AA               	movf	card_response@card& (0+255),w,b
  2525   0028D2  EC31  F007         	call	_motor_response
  2526   0028D6                     
  2527                           ;colour_identify.c: 283:     return card;
  2528   0028D6  0100               	movlb	0	; () banked
  2529   0028D8  51AA               	movf	card_response@card& (0+255),w,b
  2530   0028DA                     
  2531                           ; BSR set to: 0
  2532   0028DA  0012               	return		;funcret
  2533   0028DC                     __end_of_card_response:
  2534                           	callstack 0
  2535                           
  2536 ;; *************** function _sprintf *****************
  2537 ;; Defined at:
  2538 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2541 ;;		 -> main@buf(150), 
  2542 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2543 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2544 ;;		 -> STR_1(23), 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2547 ;;  ap              2   18[BANK0 ] PTR void [1]
  2548 ;;		 -> ?_sprintf(2), 
  2549 ;;  ret             2    0        int 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  2    6[BANK0 ] int 
  2552 ;; Registers used:
  2553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2559 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;Total ram usage:       25 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; Hardware stack levels required when called: 8
  2566 ;; This function calls:
  2567 ;;		_vfprintf
  2568 ;; This function is called by:
  2569 ;;		_main
  2570 ;;		_card_response
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text8
  2575   002FBE                     __ptext8:
  2576                           	callstack 0
  2577   002FBE                     _sprintf:
  2578                           	callstack 22
  2579   002FBE  0E6A               	movlw	low (?_sprintf+4)
  2580   002FC0  0100               	movlb	0	; () banked
  2581   002FC2  6F72               	movwf	sprintf@ap& (0+255),b
  2582   002FC4  0E00               	movlw	high (?_sprintf+4)
  2583   002FC6  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2584   002FC8  C066  F074         	movff	sprintf@s,sprintf@f
  2585   002FCC  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2586   002FD0                     
  2587                           ; BSR set to: 0
  2588   002FD0  0E00               	movlw	0
  2589   002FD2  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2590   002FD4  0E00               	movlw	0
  2591   002FD6  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2592   002FD8                     
  2593                           ; BSR set to: 0
  2594   002FD8  0E00               	movlw	0
  2595   002FDA  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2596   002FDC  0E00               	movlw	0
  2597   002FDE  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2598   002FE0                     
  2599                           ; BSR set to: 0
  2600   002FE0  0E74               	movlw	low sprintf@f
  2601   002FE2  6F60               	movwf	vfprintf@fp& (0+255),b
  2602   002FE4  0E00               	movlw	high sprintf@f
  2603   002FE6  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2604   002FE8  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2605   002FEC  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2606   002FF0  0E72               	movlw	low sprintf@ap
  2607   002FF2  6F64               	movwf	vfprintf@ap& (0+255),b
  2608   002FF4  0E00               	movlw	high sprintf@ap
  2609   002FF6  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2610   002FF8  ECB5  F017         	call	_vfprintf	;wreg free
  2611   002FFC  0100               	movlb	0	; () banked
  2612   002FFE  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2613   003000  2566               	addwf	sprintf@s& (0+255),w,b
  2614   003002  6ED9               	movwf	fsr2l,c
  2615   003004  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2616   003006  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2617   003008  6EDA               	movwf	fsr2h,c
  2618   00300A  0E00               	movlw	0
  2619   00300C  6EDF               	movwf	indf2,c
  2620   00300E                     
  2621                           ; BSR set to: 0
  2622   00300E  0012               	return		;funcret
  2623   003010                     __end_of_sprintf:
  2624                           	callstack 0
  2625                           
  2626 ;; *************** function _vfprintf *****************
  2627 ;; Defined at:
  2628 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2631 ;;		 -> sprintf@f(11), 
  2632 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2633 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2634 ;;		 -> STR_1(23), 
  2635 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2636 ;;		 -> sprintf@ap(2), 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  2639 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2640 ;;		 -> STR_1(23), 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  2    0[BANK0 ] int 
  2643 ;; Registers used:
  2644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2650 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;Total ram usage:        8 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; Hardware stack levels required when called: 7
  2657 ;; This function calls:
  2658 ;;		_vfpfcnvrt
  2659 ;; This function is called by:
  2660 ;;		_sprintf
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text9
  2665   002F6A                     __ptext9:
  2666                           	callstack 0
  2667   002F6A                     _vfprintf:
  2668                           	callstack 22
  2669   002F6A                     
  2670                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2671   002F6A  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  2672   002F6E  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2673                           
  2674                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2675   002F72  EFC9  F017         	goto	l3437
  2676   002F76                     l3435:
  2677                           
  2678                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2679   002F76  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  2680   002F7A  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2681   002F7E  0E54               	movlw	low vfprintf@cfmt
  2682   002F80  6E44               	movwf	vfpfcnvrt@fmt^0,c
  2683   002F82  0E00               	movlw	high vfprintf@cfmt
  2684   002F84  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2685   002F86  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  2686   002F8A  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2687   002F8E  EC21  F013         	call	_vfpfcnvrt	;wreg free
  2688   002F92                     l3437:
  2689                           
  2690                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2691   002F92  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  2692   002F96  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2693   002F9A                     	if	0	;tblptru may be non-zero
  2694   002F9A                     	endif
  2695   002F9A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2696   002F9A  0E00               	movlw	low (__mediumconst shr (0+16))
  2697   002F9C  6EF8               	movwf	tblptru,c
  2698   002F9E                     	endif
  2699   002F9E  0008               	tblrd		*
  2700   002FA0  50F5               	movf	tablat,w,c
  2701   002FA2  0900               	iorlw	0
  2702   002FA4  A4D8               	btfss	status,2,c
  2703   002FA6  EFD7  F017         	goto	u1691
  2704   002FAA  EFD9  F017         	goto	u1690
  2705   002FAE                     u1691:
  2706   002FAE  EFBB  F017         	goto	l3435
  2707   002FB2                     u1690:
  2708   002FB2                     
  2709                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2710   002FB2  0E00               	movlw	0
  2711   002FB4  0100               	movlb	0	; () banked
  2712   002FB6  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2713   002FB8  0E00               	movlw	0
  2714   002FBA  6F60               	movwf	?_vfprintf& (0+255),b
  2715   002FBC                     
  2716                           ; BSR set to: 0
  2717   002FBC  0012               	return		;funcret
  2718   002FBE                     __end_of_vfprintf:
  2719                           	callstack 0
  2720                           
  2721 ;; *************** function _vfpfcnvrt *****************
  2722 ;; Defined at:
  2723 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  2726 ;;		 -> sprintf@f(11), 
  2727 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  2728 ;;		 -> vfprintf@cfmt(2), 
  2729 ;;  ap              2   69[COMRAM] PTR PTR void 
  2730 ;;		 -> sprintf@ap(2), 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  convarg         8   73[COMRAM] struct .
  2733 ;;  cp              2   81[COMRAM] PTR unsigned char 
  2734 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2735 ;;		 -> STR_1(23), 
  2736 ;;  i               2    0        int 
  2737 ;;  done            2    0        int 
  2738 ;;  c               1    0        unsigned char 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2748 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2751 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2752 ;;Total ram usage:       18 bytes
  2753 ;; Hardware stack levels used: 1
  2754 ;; Hardware stack levels required when called: 6
  2755 ;; This function calls:
  2756 ;;		_dtoa
  2757 ;;		_fputc
  2758 ;; This function is called by:
  2759 ;;		_vfprintf
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text10
  2764   002642                     __ptext10:
  2765                           	callstack 0
  2766   002642                     _vfpfcnvrt:
  2767                           	callstack 22
  2768   002642                     
  2769                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2770   002642  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2771   002646  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2772   00264A  CFDE FFF6          	movff	postinc2,tblptrl
  2773   00264E  CFDD FFF7          	movff	postdec2,tblptrh
  2774   002652                     	if	0	;tblptru may be non-zero
  2775   002652                     	endif
  2776   002652                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2777   002652  0E00               	movlw	low (__mediumconst shr (0+16))
  2778   002654  6EF8               	movwf	tblptru,c
  2779   002656                     	endif
  2780   002656  0008               	tblrd		*
  2781   002658  50F5               	movf	tablat,w,c
  2782   00265A  0A25               	xorlw	37
  2783   00265C  A4D8               	btfss	status,2,c
  2784   00265E  EF33  F013         	goto	u1321
  2785   002662  EF35  F013         	goto	u1320
  2786   002666                     u1321:
  2787   002666  EFB9  F013         	goto	l2713
  2788   00266A                     u1320:
  2789   00266A                     
  2790                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2791   00266A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2792   00266E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2793   002672  2ADE               	incf	postinc2,f,c
  2794   002674  0E00               	movlw	0
  2795   002676  22DD               	addwfc	postdec2,f,c
  2796   002678                     
  2797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2798   002678  0E00               	movlw	0
  2799   00267A  0101               	movlb	1	; () banked
  2800   00267C  6FF4               	movwf	(_width+1)& (0+255),b
  2801   00267E  0E00               	movlw	0
  2802   002680  6FF3               	movwf	_width& (0+255),b
  2803   002682  C1F3  F1F9         	movff	_width,_flags
  2804   002686                     
  2805                           ; BSR set to: 1
  2806                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2807   002686  69F5               	setf	_prec& (0+255),b
  2808   002688  69F6               	setf	(_prec+1)& (0+255),b
  2809   00268A                     
  2810                           ; BSR set to: 1
  2811                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2812   00268A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2813   00268E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2814   002692  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  2815   002696  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  2816   00269A                     
  2817                           ; BSR set to: 1
  2818                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2819   00269A  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2820   00269E  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2821   0026A2                     	if	0	;tblptru may be non-zero
  2822   0026A2                     	endif
  2823   0026A2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2824   0026A2  0E00               	movlw	low (__mediumconst shr (0+16))
  2825   0026A4  6EF8               	movwf	tblptru,c
  2826   0026A6                     	endif
  2827   0026A6  0008               	tblrd		*
  2828   0026A8  50F5               	movf	tablat,w,c
  2829   0026AA  0A64               	xorlw	100
  2830   0026AC  B4D8               	btfsc	status,2,c
  2831   0026AE  EF5B  F013         	goto	u1331
  2832   0026B2  EF5D  F013         	goto	u1330
  2833   0026B6                     u1331:
  2834   0026B6  EF6D  F013         	goto	l2703
  2835   0026BA                     u1330:
  2836   0026BA                     
  2837                           ; BSR set to: 1
  2838   0026BA  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2839   0026BE  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2840   0026C2                     	if	0	;tblptru may be non-zero
  2841   0026C2                     	endif
  2842   0026C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2843   0026C2  0E00               	movlw	low (__mediumconst shr (0+16))
  2844   0026C4  6EF8               	movwf	tblptru,c
  2845   0026C6                     	endif
  2846   0026C6  0008               	tblrd		*
  2847   0026C8  50F5               	movf	tablat,w,c
  2848   0026CA  0A69               	xorlw	105
  2849   0026CC  A4D8               	btfss	status,2,c
  2850   0026CE  EF6B  F013         	goto	u1341
  2851   0026D2  EF6D  F013         	goto	u1340
  2852   0026D6                     u1341:
  2853   0026D6  EFB0  F013         	goto	l2709
  2854   0026DA                     u1340:
  2855   0026DA                     l2703:
  2856                           
  2857                           ; BSR set to: 1
  2858                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2859   0026DA  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2860   0026DE  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2861   0026E2  CFDF F048          	movff	indf2,??_vfpfcnvrt
  2862   0026E6  0E02               	movlw	2
  2863   0026E8  26DE               	addwf	postinc2,f,c
  2864   0026EA  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  2865   0026EE  0E00               	movlw	0
  2866   0026F0  22DD               	addwfc	postdec2,f,c
  2867   0026F2  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2868   0026F6  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2869   0026FA  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  2870   0026FE  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  2871   002702  0E00               	movlw	0
  2872   002704  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2873   002706  0EFF               	movlw	-1
  2874   002708  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2875   00270A  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2876   00270C  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2877   00270E  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2878   002710  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2879   002712  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2880                           
  2881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2882   002714  0E01               	movlw	1
  2883   002716  2452               	addwf	vfpfcnvrt@cp^0,w,c
  2884   002718  6E48               	movwf	??_vfpfcnvrt^0,c
  2885   00271A  0E00               	movlw	0
  2886   00271C  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2887   00271E  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  2888   002720  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2889   002724  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2890   002728  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  2891   00272C  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2892   002730                     
  2893                           ; BSR set to: 1
  2894                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2895   002730  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  2896   002734  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2897   002738  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  2898   00273C  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2899   002740  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2900   002744  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2901   002748  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2902   00274C  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2903   002750  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2904   002754  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2905   002758  ECAF  F00D         	call	_dtoa	;wreg free
  2906   00275C  EFCF  F013         	goto	l1234
  2907   002760                     l2709:
  2908                           
  2909                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2910   002760  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2911   002764  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2912   002768  2ADE               	incf	postinc2,f,c
  2913   00276A  0E00               	movlw	0
  2914   00276C  22DD               	addwfc	postdec2,f,c
  2915   00276E  EFCF  F013         	goto	l1234
  2916   002772                     l2713:
  2917                           
  2918                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2919   002772  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2920   002776  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2921   00277A  CFDE FFF6          	movff	postinc2,tblptrl
  2922   00277E  CFDD FFF7          	movff	postdec2,tblptrh
  2923   002782                     	if	0	;tblptru may be non-zero
  2924   002782                     	endif
  2925   002782                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2926   002782  0E00               	movlw	low (__mediumconst shr (0+16))
  2927   002784  6EF8               	movwf	tblptru,c
  2928   002786                     	endif
  2929   002786  0008               	tblrd		*
  2930   002788  50F5               	movf	tablat,w,c
  2931   00278A  6E04               	movwf	fputc@c^0,c
  2932   00278C  6A05               	clrf	(fputc@c+1)^0,c
  2933   00278E  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  2934   002792  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2935   002796  ECD8  F014         	call	_fputc	;wreg free
  2936   00279A  EFB0  F013         	goto	l2709
  2937   00279E                     l1234:
  2938   00279E  0012               	return		;funcret
  2939   0027A0                     __end_of_vfpfcnvrt:
  2940                           	callstack 0
  2941                           
  2942 ;; *************** function _dtoa *****************
  2943 ;; Defined at:
  2944 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  2947 ;;		 -> sprintf@f(11), 
  2948 ;;  d               8   32[COMRAM] long long 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  n               8   54[COMRAM] long long 
  2951 ;;  i               2   62[COMRAM] int 
  2952 ;;  w               2   52[COMRAM] int 
  2953 ;;  p               2   50[COMRAM] int 
  2954 ;;  s               1   64[COMRAM] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2964 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2965 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2966 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2967 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2968 ;;Total ram usage:       35 bytes
  2969 ;; Hardware stack levels used: 1
  2970 ;; Hardware stack levels required when called: 5
  2971 ;; This function calls:
  2972 ;;		___aodiv
  2973 ;;		___aomod
  2974 ;;		_abs
  2975 ;;		_pad
  2976 ;; This function is called by:
  2977 ;;		_vfpfcnvrt
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text11
  2982   001B5E                     __ptext11:
  2983                           	callstack 0
  2984   001B5E                     _dtoa:
  2985                           	callstack 22
  2986   001B5E                     
  2987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2988   001B5E  C021  F037         	movff	dtoa@d,dtoa@n
  2989   001B62  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  2990   001B66  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  2991   001B6A  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  2992   001B6E  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  2993   001B72  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  2994   001B76  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  2995   001B7A  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  2996   001B7E                     
  2997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2998   001B7E  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  2999   001B80  EFC4  F00D         	goto	u1151
  3000   001B84  EFC7  F00D         	goto	u1150
  3001   001B88                     u1151:
  3002   001B88  0E01               	movlw	1
  3003   001B8A  EFC8  F00D         	goto	u1160
  3004   001B8E                     u1150:
  3005   001B8E  0E00               	movlw	0
  3006   001B90                     u1160:
  3007   001B90  6E41               	movwf	dtoa@s^0,c
  3008   001B92                     
  3009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  3010   001B92  5041               	movf	dtoa@s^0,w,c
  3011   001B94  B4D8               	btfsc	status,2,c
  3012   001B96  EFCF  F00D         	goto	u1171
  3013   001B9A  EFD1  F00D         	goto	u1170
  3014   001B9E                     u1171:
  3015   001B9E  EFE1  F00D         	goto	l2533
  3016   001BA2                     u1170:
  3017   001BA2                     
  3018                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  3019   001BA2  1E3E               	comf	(dtoa@n+7)^0,f,c
  3020   001BA4  1E3D               	comf	(dtoa@n+6)^0,f,c
  3021   001BA6  1E3C               	comf	(dtoa@n+5)^0,f,c
  3022   001BA8  1E3B               	comf	(dtoa@n+4)^0,f,c
  3023   001BAA  1E3A               	comf	(dtoa@n+3)^0,f,c
  3024   001BAC  1E39               	comf	(dtoa@n+2)^0,f,c
  3025   001BAE  1E38               	comf	(dtoa@n+1)^0,f,c
  3026   001BB0  6C37               	negf	dtoa@n^0,c
  3027   001BB2  0E00               	movlw	0
  3028   001BB4  2238               	addwfc	(dtoa@n+1)^0,f,c
  3029   001BB6  2239               	addwfc	(dtoa@n+2)^0,f,c
  3030   001BB8  223A               	addwfc	(dtoa@n+3)^0,f,c
  3031   001BBA  223B               	addwfc	(dtoa@n+4)^0,f,c
  3032   001BBC  223C               	addwfc	(dtoa@n+5)^0,f,c
  3033   001BBE  223D               	addwfc	(dtoa@n+6)^0,f,c
  3034   001BC0  223E               	addwfc	(dtoa@n+7)^0,f,c
  3035   001BC2                     l2533:
  3036                           
  3037                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  3038   001BC2  0101               	movlb	1	; () banked
  3039   001BC4  BFF6               	btfsc	(_prec+1)& (0+255),7,b
  3040   001BC6  EFEF  F00D         	goto	u1180
  3041   001BCA  51F6               	movf	(_prec+1)& (0+255),w,b
  3042   001BCC  E106               	bnz	u1181
  3043   001BCE  05F5               	decf	_prec& (0+255),w,b
  3044   001BD0  B0D8               	btfsc	status,0,c
  3045   001BD2  EFED  F00D         	goto	u1181
  3046   001BD6  EFEF  F00D         	goto	u1180
  3047   001BDA                     u1181:
  3048   001BDA  EFF5  F00D         	goto	l1213
  3049   001BDE                     u1180:
  3050   001BDE                     
  3051                           ; BSR set to: 1
  3052   001BDE  0E00               	movlw	0
  3053   001BE0  6E34               	movwf	(dtoa@p+1)^0,c
  3054   001BE2  0E01               	movlw	1
  3055   001BE4  6E33               	movwf	dtoa@p^0,c
  3056   001BE6  EFF9  F00D         	goto	l1215
  3057   001BEA                     l1213:
  3058                           
  3059                           ; BSR set to: 1
  3060   001BEA  C1F5  F033         	movff	_prec,dtoa@p
  3061   001BEE  C1F6  F034         	movff	_prec+1,dtoa@p+1
  3062   001BF2                     l1215:
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  3066   001BF2  C1F3  F035         	movff	_width,dtoa@w
  3067   001BF6  C1F4  F036         	movff	_width+1,dtoa@w+1
  3068   001BFA                     
  3069                           ; BSR set to: 1
  3070                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  3071   001BFA  5041               	movf	dtoa@s^0,w,c
  3072   001BFC  B4D8               	btfsc	status,2,c
  3073   001BFE  EF03  F00E         	goto	u1191
  3074   001C02  EF05  F00E         	goto	u1190
  3075   001C06                     u1191:
  3076   001C06  EF1C  F00E         	goto	l1216
  3077   001C0A                     u1190:
  3078   001C0A                     
  3079                           ; BSR set to: 1
  3080                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  3081   001C0A  0635               	decf	dtoa@w^0,f,c
  3082   001C0C  A0D8               	btfss	status,0,c
  3083   001C0E  0636               	decf	(dtoa@w+1)^0,f,c
  3084   001C10                     
  3085                           ; BSR set to: 1
  3086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  3087   001C10  5041               	movf	dtoa@s^0,w,c
  3088   001C12  A4D8               	btfss	status,2,c
  3089   001C14  EF0E  F00E         	goto	u1201
  3090   001C18  EF10  F00E         	goto	u1200
  3091   001C1C                     u1201:
  3092   001C1C  EF16  F00E         	goto	l2545
  3093   001C20                     u1200:
  3094   001C20                     
  3095                           ; BSR set to: 1
  3096   001C20  0E00               	movlw	0
  3097   001C22  6E32               	movwf	(_dtoa$2493+1)^0,c
  3098   001C24  0E2B               	movlw	43
  3099   001C26  6E31               	movwf	_dtoa$2493^0,c
  3100   001C28  EF1A  F00E         	goto	l2547
  3101   001C2C                     l2545:
  3102                           
  3103                           ; BSR set to: 1
  3104   001C2C  0E00               	movlw	0
  3105   001C2E  6E32               	movwf	(_dtoa$2493+1)^0,c
  3106   001C30  0E2D               	movlw	45
  3107   001C32  6E31               	movwf	_dtoa$2493^0,c
  3108   001C34                     l2547:
  3109                           
  3110                           ; BSR set to: 1
  3111   001C34  C031  F041         	movff	_dtoa$2493,dtoa@s
  3112   001C38                     l1216:
  3113                           
  3114                           ; BSR set to: 1
  3115                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  3116   001C38  0E00               	movlw	0
  3117   001C3A  6E40               	movwf	(dtoa@i+1)^0,c
  3118   001C3C  0E1F               	movlw	31
  3119   001C3E  6E3F               	movwf	dtoa@i^0,c
  3120   001C40                     
  3121                           ; BSR set to: 1
  3122                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  3123   001C40  0E00               	movlw	0
  3124   001C42  0102               	movlb	2	; () banked
  3125   001C44  6FE1               	movwf	(_dbuf+31)& (0+255),b
  3126                           
  3127                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3128   001C46  EFA1  F00E         	goto	l2561
  3129   001C4A                     l2551:
  3130                           
  3131                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3132   001C4A  063F               	decf	dtoa@i^0,f,c
  3133   001C4C  A0D8               	btfss	status,0,c
  3134   001C4E  0640               	decf	(dtoa@i+1)^0,f,c
  3135   001C50                     
  3136                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3137   001C50  0EC2               	movlw	low _dbuf
  3138   001C52  243F               	addwf	dtoa@i^0,w,c
  3139   001C54  6ED9               	movwf	fsr2l,c
  3140   001C56  0E02               	movlw	high _dbuf
  3141   001C58  2040               	addwfc	(dtoa@i+1)^0,w,c
  3142   001C5A  6EDA               	movwf	fsr2h,c
  3143   001C5C  C037  F004         	movff	dtoa@n,___aomod@dividend
  3144   001C60  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  3145   001C64  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  3146   001C68  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  3147   001C6C  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  3148   001C70  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  3149   001C74  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  3150   001C78  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  3151   001C7C  0E0A               	movlw	10
  3152   001C7E  6E0C               	movwf	___aomod@divisor^0,c
  3153   001C80  0E00               	movlw	0
  3154   001C82  6E0D               	movwf	(___aomod@divisor+1)^0,c
  3155   001C84  0E00               	movlw	0
  3156   001C86  6E0E               	movwf	(___aomod@divisor+2)^0,c
  3157   001C88  0E00               	movlw	0
  3158   001C8A  6E0F               	movwf	(___aomod@divisor+3)^0,c
  3159   001C8C  0E00               	movlw	0
  3160   001C8E  6E10               	movwf	(___aomod@divisor+4)^0,c
  3161   001C90  0E00               	movlw	0
  3162   001C92  6E11               	movwf	(___aomod@divisor+5)^0,c
  3163   001C94  0E00               	movlw	0
  3164   001C96  6E12               	movwf	(___aomod@divisor+6)^0,c
  3165   001C98  0E00               	movlw	0
  3166   001C9A  6E13               	movwf	(___aomod@divisor+7)^0,c
  3167   001C9C  EC6F  F012         	call	___aomod	;wreg free
  3168   001CA0  C004  F029         	movff	?___aomod,??_dtoa
  3169   001CA4  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  3170   001CA8  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  3171   001CAC  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  3172   001CB0  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  3173   001CB4  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  3174   001CB8  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  3175   001CBC  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  3176   001CC0  C029  F016         	movff	??_dtoa,abs@a
  3177   001CC4  C02A  F017         	movff	??_dtoa+1,abs@a+1
  3178   001CC8  ECEB  F018         	call	_abs	;wreg free
  3179   001CCC  5016               	movf	?_abs^0,w,c
  3180   001CCE  0F30               	addlw	48
  3181   001CD0  6EDF               	movwf	indf2,c
  3182   001CD2                     
  3183                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3184   001CD2  0633               	decf	dtoa@p^0,f,c
  3185   001CD4  A0D8               	btfss	status,0,c
  3186   001CD6  0634               	decf	(dtoa@p+1)^0,f,c
  3187   001CD8                     
  3188                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3189   001CD8  0635               	decf	dtoa@w^0,f,c
  3190   001CDA  A0D8               	btfss	status,0,c
  3191   001CDC  0636               	decf	(dtoa@w+1)^0,f,c
  3192   001CDE                     
  3193                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3194   001CDE  C037  F004         	movff	dtoa@n,___aodiv@dividend
  3195   001CE2  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  3196   001CE6  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  3197   001CEA  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  3198   001CEE  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  3199   001CF2  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  3200   001CF6  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  3201   001CFA  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  3202   001CFE  0E0A               	movlw	10
  3203   001D00  6E0C               	movwf	___aodiv@divisor^0,c
  3204   001D02  0E00               	movlw	0
  3205   001D04  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  3206   001D06  0E00               	movlw	0
  3207   001D08  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  3208   001D0A  0E00               	movlw	0
  3209   001D0C  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  3210   001D0E  0E00               	movlw	0
  3211   001D10  6E10               	movwf	(___aodiv@divisor+4)^0,c
  3212   001D12  0E00               	movlw	0
  3213   001D14  6E11               	movwf	(___aodiv@divisor+5)^0,c
  3214   001D16  0E00               	movlw	0
  3215   001D18  6E12               	movwf	(___aodiv@divisor+6)^0,c
  3216   001D1A  0E00               	movlw	0
  3217   001D1C  6E13               	movwf	(___aodiv@divisor+7)^0,c
  3218   001D1E  ECF5  F010         	call	___aodiv	;wreg free
  3219   001D22  C004  F037         	movff	?___aodiv,dtoa@n
  3220   001D26  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  3221   001D2A  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  3222   001D2E  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  3223   001D32  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  3224   001D36  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  3225   001D3A  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  3226   001D3E  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  3227   001D42                     l2561:
  3228                           
  3229                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3230   001D42  BE40               	btfsc	(dtoa@i+1)^0,7,c
  3231   001D44  EFAC  F00E         	goto	u1211
  3232   001D48  5040               	movf	(dtoa@i+1)^0,w,c
  3233   001D4A  E108               	bnz	u1210
  3234   001D4C  043F               	decf	dtoa@i^0,w,c
  3235   001D4E  A0D8               	btfss	status,0,c
  3236   001D50  EFAC  F00E         	goto	u1211
  3237   001D54  EFAE  F00E         	goto	u1210
  3238   001D58                     u1211:
  3239   001D58  EFCA  F00E         	goto	l2567
  3240   001D5C                     u1210:
  3241   001D5C  5037               	movf	dtoa@n^0,w,c
  3242   001D5E  1038               	iorwf	(dtoa@n+1)^0,w,c
  3243   001D60  1039               	iorwf	(dtoa@n+2)^0,w,c
  3244   001D62  103A               	iorwf	(dtoa@n+3)^0,w,c
  3245   001D64  103B               	iorwf	(dtoa@n+4)^0,w,c
  3246   001D66  103C               	iorwf	(dtoa@n+5)^0,w,c
  3247   001D68  103D               	iorwf	(dtoa@n+6)^0,w,c
  3248   001D6A  103E               	iorwf	(dtoa@n+7)^0,w,c
  3249   001D6C  A4D8               	btfss	status,2,c
  3250   001D6E  EFBB  F00E         	goto	u1221
  3251   001D72  EFBD  F00E         	goto	u1220
  3252   001D76                     u1221:
  3253   001D76  EF25  F00E         	goto	l2551
  3254   001D7A                     u1220:
  3255   001D7A  BE34               	btfsc	(dtoa@p+1)^0,7,c
  3256   001D7C  EFCA  F00E         	goto	u1230
  3257   001D80  5034               	movf	(dtoa@p+1)^0,w,c
  3258   001D82  E106               	bnz	u1231
  3259   001D84  0433               	decf	dtoa@p^0,w,c
  3260   001D86  B0D8               	btfsc	status,0,c
  3261   001D88  EFC8  F00E         	goto	u1231
  3262   001D8C  EFCA  F00E         	goto	u1230
  3263   001D90                     u1231:
  3264   001D90  EF25  F00E         	goto	l2551
  3265   001D94                     u1230:
  3266   001D94                     l2567:
  3267                           
  3268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3269   001D94  5041               	movf	dtoa@s^0,w,c
  3270   001D96  B4D8               	btfsc	status,2,c
  3271   001D98  EFD0  F00E         	goto	u1241
  3272   001D9C  EFD2  F00E         	goto	u1240
  3273   001DA0                     u1241:
  3274   001DA0  EFDD  F00E         	goto	l2573
  3275   001DA4                     u1240:
  3276   001DA4                     
  3277                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3278   001DA4  063F               	decf	dtoa@i^0,f,c
  3279   001DA6  A0D8               	btfss	status,0,c
  3280   001DA8  0640               	decf	(dtoa@i+1)^0,f,c
  3281   001DAA                     
  3282                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3283   001DAA  0EC2               	movlw	low _dbuf
  3284   001DAC  243F               	addwf	dtoa@i^0,w,c
  3285   001DAE  6ED9               	movwf	fsr2l,c
  3286   001DB0  0E02               	movlw	high _dbuf
  3287   001DB2  2040               	addwfc	(dtoa@i+1)^0,w,c
  3288   001DB4  6EDA               	movwf	fsr2h,c
  3289   001DB6  C041  FFDF         	movff	dtoa@s,indf2
  3290   001DBA                     l2573:
  3291                           
  3292                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3293   001DBA  C01F  F014         	movff	dtoa@fp,pad@fp
  3294   001DBE  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  3295   001DC2  0EC2               	movlw	low _dbuf
  3296   001DC4  243F               	addwf	dtoa@i^0,w,c
  3297   001DC6  6E16               	movwf	pad@buf^0,c
  3298   001DC8  0E02               	movlw	high _dbuf
  3299   001DCA  2040               	addwfc	(dtoa@i+1)^0,w,c
  3300   001DCC  6E17               	movwf	(pad@buf+1)^0,c
  3301   001DCE  C035  F018         	movff	dtoa@w,pad@p
  3302   001DD2  C036  F019         	movff	dtoa@w+1,pad@p+1
  3303   001DD6  EC3E  F017         	call	_pad	;wreg free
  3304   001DDA  0012               	return		;funcret
  3305   001DDC                     __end_of_dtoa:
  3306                           	callstack 0
  3307                           
  3308 ;; *************** function _pad *****************
  3309 ;; Defined at:
  3310 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  3313 ;;		 -> sprintf@f(11), 
  3314 ;;  buf             2   21[COMRAM] PTR unsigned char 
  3315 ;;		 -> dbuf(32), 
  3316 ;;  p               2   23[COMRAM] int 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  w               2   28[COMRAM] int 
  3319 ;;  i               2   26[COMRAM] int 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3329 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3332 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3333 ;;Total ram usage:       11 bytes
  3334 ;; Hardware stack levels used: 1
  3335 ;; Hardware stack levels required when called: 4
  3336 ;; This function calls:
  3337 ;;		_fputc
  3338 ;;		_fputs
  3339 ;; This function is called by:
  3340 ;;		_dtoa
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text12
  3345   002E7C                     __ptext12:
  3346                           	callstack 0
  3347   002E7C                     _pad:
  3348                           	callstack 22
  3349   002E7C                     
  3350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3351   002E7C  BE19               	btfsc	(pad@p+1)^0,7,c
  3352   002E7E  EF43  F017         	goto	u1091
  3353   002E82  EF45  F017         	goto	u1090
  3354   002E86                     u1091:
  3355   002E86  EF4B  F017         	goto	l2495
  3356   002E8A                     u1090:
  3357   002E8A  C018  F01D         	movff	pad@p,pad@w
  3358   002E8E  C019  F01E         	movff	pad@p+1,pad@w+1
  3359   002E92  EF4F  F017         	goto	l1204
  3360   002E96                     l2495:
  3361   002E96  0E00               	movlw	0
  3362   002E98  6E1E               	movwf	(pad@w+1)^0,c
  3363   002E9A  0E00               	movlw	0
  3364   002E9C  6E1D               	movwf	pad@w^0,c
  3365   002E9E                     l1204:
  3366                           
  3367                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3368   002E9E  0E00               	movlw	0
  3369   002EA0  6E1C               	movwf	(pad@i+1)^0,c
  3370   002EA2  0E00               	movlw	0
  3371   002EA4  6E1B               	movwf	pad@i^0,c
  3372                           
  3373                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3374   002EA6  EF61  F017         	goto	l2501
  3375   002EAA                     l2497:
  3376                           
  3377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3378   002EAA  0E00               	movlw	0
  3379   002EAC  6E05               	movwf	(fputc@c+1)^0,c
  3380   002EAE  0E20               	movlw	32
  3381   002EB0  6E04               	movwf	fputc@c^0,c
  3382   002EB2  C014  F006         	movff	pad@fp,fputc@fp
  3383   002EB6  C015  F007         	movff	pad@fp+1,fputc@fp+1
  3384   002EBA  ECD8  F014         	call	_fputc	;wreg free
  3385   002EBE                     
  3386                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3387   002EBE  4A1B               	infsnz	pad@i^0,f,c
  3388   002EC0  2A1C               	incf	(pad@i+1)^0,f,c
  3389   002EC2                     l2501:
  3390                           
  3391                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3392   002EC2  501D               	movf	pad@w^0,w,c
  3393   002EC4  5C1B               	subwf	pad@i^0,w,c
  3394   002EC6  501C               	movf	(pad@i+1)^0,w,c
  3395   002EC8  0A80               	xorlw	128
  3396   002ECA  6E1A               	movwf	??_pad^0,c
  3397   002ECC  501E               	movf	(pad@w+1)^0,w,c
  3398   002ECE  0A80               	xorlw	128
  3399   002ED0  581A               	subwfb	??_pad^0,w,c
  3400   002ED2  A0D8               	btfss	status,0,c
  3401   002ED4  EF6E  F017         	goto	u1101
  3402   002ED8  EF70  F017         	goto	u1100
  3403   002EDC                     u1101:
  3404   002EDC  EF55  F017         	goto	l2497
  3405   002EE0                     u1100:
  3406   002EE0                     
  3407                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3408   002EE0  C016  F00D         	movff	pad@buf,fputs@s
  3409   002EE4  C017  F00E         	movff	pad@buf+1,fputs@s+1
  3410   002EE8  C014  F00F         	movff	pad@fp,fputs@fp
  3411   002EEC  C015  F010         	movff	pad@fp+1,fputs@fp+1
  3412   002EF0  ECA8  F018         	call	_fputs	;wreg free
  3413   002EF4  0012               	return		;funcret
  3414   002EF6                     __end_of_pad:
  3415                           	callstack 0
  3416                           
  3417 ;; *************** function _fputs *****************
  3418 ;; Defined at:
  3419 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  s               2   12[COMRAM] PTR const unsigned char 
  3422 ;;		 -> dbuf(32), 
  3423 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  3424 ;;		 -> sprintf@f(11), 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  i               2   17[COMRAM] int 
  3427 ;;  c               1   16[COMRAM] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  2   12[COMRAM] int 
  3430 ;; Registers used:
  3431 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3437 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3438 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3440 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3441 ;;Total ram usage:        7 bytes
  3442 ;; Hardware stack levels used: 1
  3443 ;; Hardware stack levels required when called: 3
  3444 ;; This function calls:
  3445 ;;		_fputc
  3446 ;; This function is called by:
  3447 ;;		_pad
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text13
  3452   003150                     __ptext13:
  3453                           	callstack 0
  3454   003150                     _fputs:
  3455                           	callstack 22
  3456   003150  0E00               	movlw	0
  3457   003152  6E13               	movwf	(fputs@i+1)^0,c
  3458   003154  0E00               	movlw	0
  3459   003156  6E12               	movwf	fputs@i^0,c
  3460   003158  EFB9  F018         	goto	l2377
  3461   00315C                     l2373:
  3462   00315C  C011  F004         	movff	fputs@c,fputc@c
  3463   003160  6A05               	clrf	(fputc@c+1)^0,c
  3464   003162  C00F  F006         	movff	fputs@fp,fputc@fp
  3465   003166  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  3466   00316A  ECD8  F014         	call	_fputc	;wreg free
  3467   00316E  4A12               	infsnz	fputs@i^0,f,c
  3468   003170  2A13               	incf	(fputs@i+1)^0,f,c
  3469   003172                     l2377:
  3470   003172  5012               	movf	fputs@i^0,w,c
  3471   003174  240D               	addwf	fputs@s^0,w,c
  3472   003176  6ED9               	movwf	fsr2l,c
  3473   003178  5013               	movf	(fputs@i+1)^0,w,c
  3474   00317A  200E               	addwfc	(fputs@s+1)^0,w,c
  3475   00317C  6EDA               	movwf	fsr2h,c
  3476   00317E  50DF               	movf	indf2,w,c
  3477   003180  6E11               	movwf	fputs@c^0,c
  3478   003182  5011               	movf	fputs@c^0,w,c
  3479   003184  A4D8               	btfss	status,2,c
  3480   003186  EFC7  F018         	goto	u911
  3481   00318A  EFC9  F018         	goto	u910
  3482   00318E                     u911:
  3483   00318E  EFAE  F018         	goto	l2373
  3484   003192                     u910:
  3485   003192  0012               	return		;funcret
  3486   003194                     __end_of_fputs:
  3487                           	callstack 0
  3488                           
  3489 ;; *************** function _fputc *****************
  3490 ;; Defined at:
  3491 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  c               2    3[COMRAM] int 
  3494 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  3495 ;;		 -> sprintf@f(11), 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  2    3[COMRAM] int 
  3500 ;; Registers used:
  3501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3509 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3510 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3511 ;;Total ram usage:        9 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; Hardware stack levels required when called: 2
  3514 ;; This function calls:
  3515 ;;		_putch
  3516 ;; This function is called by:
  3517 ;;		_pad
  3518 ;;		_vfpfcnvrt
  3519 ;;		_fputs
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text14
  3524   0029B0                     __ptext14:
  3525                           	callstack 0
  3526   0029B0                     _fputc:
  3527                           	callstack 25
  3528   0029B0  5006               	movf	fputc@fp^0,w,c
  3529   0029B2  1007               	iorwf	(fputc@fp+1)^0,w,c
  3530   0029B4  B4D8               	btfsc	status,2,c
  3531   0029B6  EFDF  F014         	goto	u871
  3532   0029BA  EFE1  F014         	goto	u870
  3533   0029BE                     u871:
  3534   0029BE  EFEA  F014         	goto	l2361
  3535   0029C2                     u870:
  3536   0029C2  5006               	movf	fputc@fp^0,w,c
  3537   0029C4  1007               	iorwf	(fputc@fp+1)^0,w,c
  3538   0029C6  A4D8               	btfss	status,2,c
  3539   0029C8  EFE8  F014         	goto	u881
  3540   0029CC  EFEA  F014         	goto	u880
  3541   0029D0                     u881:
  3542   0029D0  EFEF  F014         	goto	l2363
  3543   0029D4                     u880:
  3544   0029D4                     l2361:
  3545   0029D4  5004               	movf	fputc@c^0,w,c
  3546   0029D6  ECFA  F019         	call	_putch
  3547   0029DA  EF3C  F015         	goto	l1252
  3548   0029DE                     l2363:
  3549   0029DE  EE20 F009          	lfsr	2,9
  3550   0029E2  5006               	movf	fputc@fp^0,w,c
  3551   0029E4  26D9               	addwf	fsr2l,f,c
  3552   0029E6  5007               	movf	(fputc@fp+1)^0,w,c
  3553   0029E8  22DA               	addwfc	fsr2h,f,c
  3554   0029EA  50DE               	movf	postinc2,w,c
  3555   0029EC  10DE               	iorwf	postinc2,w,c
  3556   0029EE  B4D8               	btfsc	status,2,c
  3557   0029F0  EFFC  F014         	goto	u891
  3558   0029F4  EFFE  F014         	goto	u890
  3559   0029F8                     u891:
  3560   0029F8  EF19  F015         	goto	l2367
  3561   0029FC                     u890:
  3562   0029FC  EE20 F009          	lfsr	2,9
  3563   002A00  5006               	movf	fputc@fp^0,w,c
  3564   002A02  26D9               	addwf	fsr2l,f,c
  3565   002A04  5007               	movf	(fputc@fp+1)^0,w,c
  3566   002A06  22DA               	addwfc	fsr2h,f,c
  3567   002A08  EE10 F003          	lfsr	1,3
  3568   002A0C  5006               	movf	fputc@fp^0,w,c
  3569   002A0E  26E1               	addwf	fsr1l,f,c
  3570   002A10  5007               	movf	(fputc@fp+1)^0,w,c
  3571   002A12  22E2               	addwfc	fsr1h,f,c
  3572   002A14  50DE               	movf	postinc2,w,c
  3573   002A16  5CE6               	subwf	postinc1,w,c
  3574   002A18  50E6               	movf	postinc1,w,c
  3575   002A1A  0A80               	xorlw	128
  3576   002A1C  6E0C               	movwf	(??_fputc+4)^0,c
  3577   002A1E  50DE               	movf	postinc2,w,c
  3578   002A20  0A80               	xorlw	128
  3579   002A22  580C               	subwfb	(??_fputc+4)^0,w,c
  3580   002A24  B0D8               	btfsc	status,0,c
  3581   002A26  EF17  F015         	goto	u901
  3582   002A2A  EF19  F015         	goto	u900
  3583   002A2E                     u901:
  3584   002A2E  EF3C  F015         	goto	l1252
  3585   002A32                     u900:
  3586   002A32                     l2367:
  3587   002A32  EE20 F003          	lfsr	2,3
  3588   002A36  5006               	movf	fputc@fp^0,w,c
  3589   002A38  26D9               	addwf	fsr2l,f,c
  3590   002A3A  5007               	movf	(fputc@fp+1)^0,w,c
  3591   002A3C  22DA               	addwfc	fsr2h,f,c
  3592   002A3E  CFDE F008          	movff	postinc2,??_fputc
  3593   002A42  CFDD F009          	movff	postdec2,??_fputc+1
  3594   002A46  C006  FFD9         	movff	fputc@fp,fsr2l
  3595   002A4A  C007  FFDA         	movff	fputc@fp+1,fsr2h
  3596   002A4E  CFDE F00A          	movff	postinc2,??_fputc+2
  3597   002A52  CFDD F00B          	movff	postdec2,??_fputc+3
  3598   002A56  5008               	movf	??_fputc^0,w,c
  3599   002A58  240A               	addwf	(??_fputc+2)^0,w,c
  3600   002A5A  6ED9               	movwf	fsr2l,c
  3601   002A5C  5009               	movf	(??_fputc+1)^0,w,c
  3602   002A5E  200B               	addwfc	(??_fputc+3)^0,w,c
  3603   002A60  6EDA               	movwf	fsr2h,c
  3604   002A62  C004  FFDF         	movff	fputc@c,indf2
  3605   002A66  EE20 F003          	lfsr	2,3
  3606   002A6A  5006               	movf	fputc@fp^0,w,c
  3607   002A6C  26D9               	addwf	fsr2l,f,c
  3608   002A6E  5007               	movf	(fputc@fp+1)^0,w,c
  3609   002A70  22DA               	addwfc	fsr2h,f,c
  3610   002A72  2ADE               	incf	postinc2,f,c
  3611   002A74  0E00               	movlw	0
  3612   002A76  22DD               	addwfc	postdec2,f,c
  3613   002A78                     l1252:
  3614   002A78  0012               	return		;funcret
  3615   002A7A                     __end_of_fputc:
  3616                           	callstack 0
  3617                           
  3618 ;; *************** function _putch *****************
  3619 ;; Defined at:
  3620 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  c               1    wreg     unsigned char 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  c               1    0[COMRAM] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  1    wreg      void 
  3627 ;; Registers used:
  3628 ;;		wreg
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;Total ram usage:        0 bytes
  3639 ;; Hardware stack levels used: 1
  3640 ;; Hardware stack levels required when called: 1
  3641 ;; This function calls:
  3642 ;;		Nothing
  3643 ;; This function is called by:
  3644 ;;		_fputc
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text15
  3649   0033F4                     __ptext15:
  3650                           	callstack 0
  3651   0033F4                     _putch:
  3652                           	callstack 25
  3653   0033F4  0012               	return		;funcret
  3654   0033F6                     __end_of_putch:
  3655                           	callstack 0
  3656                           
  3657 ;; *************** function ___aomod *****************
  3658 ;; Defined at:
  3659 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  dividend        8    3[COMRAM] long long 
  3662 ;;  divisor         8   11[COMRAM] long long 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  sign            1   20[COMRAM] unsigned char 
  3665 ;;  counter         1   19[COMRAM] unsigned char 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  8    3[COMRAM] long long 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3675 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3678 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3679 ;;Total ram usage:       18 bytes
  3680 ;; Hardware stack levels used: 1
  3681 ;; Hardware stack levels required when called: 1
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_dtoa
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text16
  3690   0024DE                     __ptext16:
  3691                           	callstack 0
  3692   0024DE                     ___aomod:
  3693                           	callstack 25
  3694   0024DE  0E00               	movlw	0
  3695   0024E0  6E15               	movwf	___aomod@sign^0,c
  3696   0024E2  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  3697   0024E4  EF78  F012         	goto	u1000
  3698   0024E8  EF76  F012         	goto	u1001
  3699   0024EC                     u1001:
  3700   0024EC  EF8A  F012         	goto	l2441
  3701   0024F0                     u1000:
  3702   0024F0  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  3703   0024F2  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  3704   0024F4  1E09               	comf	(___aomod@dividend+5)^0,f,c
  3705   0024F6  1E08               	comf	(___aomod@dividend+4)^0,f,c
  3706   0024F8  1E07               	comf	(___aomod@dividend+3)^0,f,c
  3707   0024FA  1E06               	comf	(___aomod@dividend+2)^0,f,c
  3708   0024FC  1E05               	comf	(___aomod@dividend+1)^0,f,c
  3709   0024FE  6C04               	negf	___aomod@dividend^0,c
  3710   002500  0E00               	movlw	0
  3711   002502  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  3712   002504  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  3713   002506  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  3714   002508  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  3715   00250A  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  3716   00250C  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  3717   00250E  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  3718   002510  0E01               	movlw	1
  3719   002512  6E15               	movwf	___aomod@sign^0,c
  3720   002514                     l2441:
  3721   002514  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  3722   002516  EF91  F012         	goto	u1010
  3723   00251A  EF8F  F012         	goto	u1011
  3724   00251E                     u1011:
  3725   00251E  EFA1  F012         	goto	l2445
  3726   002522                     u1010:
  3727   002522  1E13               	comf	(___aomod@divisor+7)^0,f,c
  3728   002524  1E12               	comf	(___aomod@divisor+6)^0,f,c
  3729   002526  1E11               	comf	(___aomod@divisor+5)^0,f,c
  3730   002528  1E10               	comf	(___aomod@divisor+4)^0,f,c
  3731   00252A  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  3732   00252C  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  3733   00252E  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  3734   002530  6C0C               	negf	___aomod@divisor^0,c
  3735   002532  0E00               	movlw	0
  3736   002534  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  3737   002536  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  3738   002538  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  3739   00253A  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  3740   00253C  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  3741   00253E  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  3742   002540  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  3743   002542                     l2445:
  3744   002542  500C               	movf	___aomod@divisor^0,w,c
  3745   002544  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  3746   002546  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  3747   002548  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  3748   00254A  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  3749   00254C  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  3750   00254E  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  3751   002550  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  3752   002552  B4D8               	btfsc	status,2,c
  3753   002554  EFAE  F012         	goto	u1021
  3754   002558  EFB0  F012         	goto	u1020
  3755   00255C                     u1021:
  3756   00255C  EFF8  F012         	goto	l2461
  3757   002560                     u1020:
  3758   002560  0E01               	movlw	1
  3759   002562  6E14               	movwf	___aomod@counter^0,c
  3760   002564  EFBE  F012         	goto	l2451
  3761   002568                     l2449:
  3762   002568  90D8               	bcf	status,0,c
  3763   00256A  360C               	rlcf	___aomod@divisor^0,f,c
  3764   00256C  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  3765   00256E  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  3766   002570  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  3767   002572  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  3768   002574  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  3769   002576  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  3770   002578  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  3771   00257A  2A14               	incf	___aomod@counter^0,f,c
  3772   00257C                     l2451:
  3773   00257C  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  3774   00257E  EFC3  F012         	goto	u1031
  3775   002582  EFC5  F012         	goto	u1030
  3776   002586                     u1031:
  3777   002586  EFB4  F012         	goto	l2449
  3778   00258A                     u1030:
  3779   00258A                     l2453:
  3780   00258A  500C               	movf	___aomod@divisor^0,w,c
  3781   00258C  5C04               	subwf	___aomod@dividend^0,w,c
  3782   00258E  500D               	movf	(___aomod@divisor+1)^0,w,c
  3783   002590  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  3784   002592  500E               	movf	(___aomod@divisor+2)^0,w,c
  3785   002594  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  3786   002596  500F               	movf	(___aomod@divisor+3)^0,w,c
  3787   002598  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  3788   00259A  5010               	movf	(___aomod@divisor+4)^0,w,c
  3789   00259C  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  3790   00259E  5011               	movf	(___aomod@divisor+5)^0,w,c
  3791   0025A0  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  3792   0025A2  5012               	movf	(___aomod@divisor+6)^0,w,c
  3793   0025A4  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  3794   0025A6  5013               	movf	(___aomod@divisor+7)^0,w,c
  3795   0025A8  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  3796   0025AA  A0D8               	btfss	status,0,c
  3797   0025AC  EFDA  F012         	goto	u1041
  3798   0025B0  EFDC  F012         	goto	u1040
  3799   0025B4                     u1041:
  3800   0025B4  EFEC  F012         	goto	l2457
  3801   0025B8                     u1040:
  3802   0025B8  500C               	movf	___aomod@divisor^0,w,c
  3803   0025BA  5E04               	subwf	___aomod@dividend^0,f,c
  3804   0025BC  500D               	movf	(___aomod@divisor+1)^0,w,c
  3805   0025BE  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  3806   0025C0  500E               	movf	(___aomod@divisor+2)^0,w,c
  3807   0025C2  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  3808   0025C4  500F               	movf	(___aomod@divisor+3)^0,w,c
  3809   0025C6  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  3810   0025C8  5010               	movf	(___aomod@divisor+4)^0,w,c
  3811   0025CA  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  3812   0025CC  5011               	movf	(___aomod@divisor+5)^0,w,c
  3813   0025CE  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  3814   0025D0  5012               	movf	(___aomod@divisor+6)^0,w,c
  3815   0025D2  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  3816   0025D4  5013               	movf	(___aomod@divisor+7)^0,w,c
  3817   0025D6  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  3818   0025D8                     l2457:
  3819   0025D8  90D8               	bcf	status,0,c
  3820   0025DA  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  3821   0025DC  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  3822   0025DE  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  3823   0025E0  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  3824   0025E2  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  3825   0025E4  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  3826   0025E6  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  3827   0025E8  320C               	rrcf	___aomod@divisor^0,f,c
  3828   0025EA  2E14               	decfsz	___aomod@counter^0,f,c
  3829   0025EC  EFC5  F012         	goto	l2453
  3830   0025F0                     l2461:
  3831   0025F0  5015               	movf	___aomod@sign^0,w,c
  3832   0025F2  B4D8               	btfsc	status,2,c
  3833   0025F4  EFFE  F012         	goto	u1051
  3834   0025F8  EF00  F013         	goto	u1050
  3835   0025FC                     u1051:
  3836   0025FC  EF10  F013         	goto	l2465
  3837   002600                     u1050:
  3838   002600  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  3839   002602  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  3840   002604  1E09               	comf	(___aomod@dividend+5)^0,f,c
  3841   002606  1E08               	comf	(___aomod@dividend+4)^0,f,c
  3842   002608  1E07               	comf	(___aomod@dividend+3)^0,f,c
  3843   00260A  1E06               	comf	(___aomod@dividend+2)^0,f,c
  3844   00260C  1E05               	comf	(___aomod@dividend+1)^0,f,c
  3845   00260E  6C04               	negf	___aomod@dividend^0,c
  3846   002610  0E00               	movlw	0
  3847   002612  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  3848   002614  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  3849   002616  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  3850   002618  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  3851   00261A  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  3852   00261C  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  3853   00261E  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  3854   002620                     l2465:
  3855   002620  C004  F004         	movff	___aomod@dividend,?___aomod
  3856   002624  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  3857   002628  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  3858   00262C  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  3859   002630  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  3860   002634  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  3861   002638  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  3862   00263C  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  3863   002640  0012               	return		;funcret
  3864   002642                     __end_of___aomod:
  3865                           	callstack 0
  3866                           
  3867 ;; *************** function ___aodiv *****************
  3868 ;; Defined at:
  3869 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  dividend        8    3[COMRAM] long long 
  3872 ;;  divisor         8   11[COMRAM] long long 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  quotient        8   21[COMRAM] long long 
  3875 ;;  sign            1   20[COMRAM] unsigned char 
  3876 ;;  counter         1   19[COMRAM] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  8    3[COMRAM] long long 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3886 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3889 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3890 ;;Total ram usage:       26 bytes
  3891 ;; Hardware stack levels used: 1
  3892 ;; Hardware stack levels required when called: 1
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_dtoa
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text17
  3901   0021EA                     __ptext17:
  3902                           	callstack 0
  3903   0021EA                     ___aodiv:
  3904                           	callstack 25
  3905   0021EA  0E00               	movlw	0
  3906   0021EC  6E15               	movwf	___aodiv@sign^0,c
  3907   0021EE  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  3908   0021F0  EFFE  F010         	goto	u930
  3909   0021F4  EFFC  F010         	goto	u931
  3910   0021F8                     u931:
  3911   0021F8  EF10  F011         	goto	l2397
  3912   0021FC                     u930:
  3913   0021FC  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  3914   0021FE  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  3915   002200  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  3916   002202  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  3917   002204  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  3918   002206  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  3919   002208  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  3920   00220A  6C0C               	negf	___aodiv@divisor^0,c
  3921   00220C  0E00               	movlw	0
  3922   00220E  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  3923   002210  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  3924   002212  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  3925   002214  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  3926   002216  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  3927   002218  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  3928   00221A  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  3929   00221C  0E01               	movlw	1
  3930   00221E  6E15               	movwf	___aodiv@sign^0,c
  3931   002220                     l2397:
  3932   002220  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  3933   002222  EF17  F011         	goto	u940
  3934   002226  EF15  F011         	goto	u941
  3935   00222A                     u941:
  3936   00222A  EF29  F011         	goto	l2403
  3937   00222E                     u940:
  3938   00222E  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  3939   002230  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  3940   002232  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  3941   002234  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  3942   002236  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  3943   002238  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  3944   00223A  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  3945   00223C  6C04               	negf	___aodiv@dividend^0,c
  3946   00223E  0E00               	movlw	0
  3947   002240  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  3948   002242  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  3949   002244  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  3950   002246  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  3951   002248  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  3952   00224A  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  3953   00224C  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  3954   00224E  0E01               	movlw	1
  3955   002250  1A15               	xorwf	___aodiv@sign^0,f,c
  3956   002252                     l2403:
  3957   002252  EE20  F016         	lfsr	2,___aodiv@quotient
  3958   002256  0E07               	movlw	7
  3959   002258                     u951:
  3960   002258  6ADE               	clrf	postinc2,c
  3961   00225A  06E8               	decf	wreg,f,c
  3962   00225C  E2FD               	bc	u951
  3963   00225E  500C               	movf	___aodiv@divisor^0,w,c
  3964   002260  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  3965   002262  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  3966   002264  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  3967   002266  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  3968   002268  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  3969   00226A  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  3970   00226C  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  3971   00226E  B4D8               	btfsc	status,2,c
  3972   002270  EF3C  F011         	goto	u961
  3973   002274  EF3E  F011         	goto	u960
  3974   002278                     u961:
  3975   002278  EF90  F011         	goto	l2425
  3976   00227C                     u960:
  3977   00227C  0E01               	movlw	1
  3978   00227E  6E14               	movwf	___aodiv@counter^0,c
  3979   002280  EF4C  F011         	goto	l2411
  3980   002284                     l2409:
  3981   002284  90D8               	bcf	status,0,c
  3982   002286  360C               	rlcf	___aodiv@divisor^0,f,c
  3983   002288  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  3984   00228A  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  3985   00228C  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  3986   00228E  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  3987   002290  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  3988   002292  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  3989   002294  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  3990   002296  2A14               	incf	___aodiv@counter^0,f,c
  3991   002298                     l2411:
  3992   002298  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  3993   00229A  EF51  F011         	goto	u971
  3994   00229E  EF53  F011         	goto	u970
  3995   0022A2                     u971:
  3996   0022A2  EF42  F011         	goto	l2409
  3997   0022A6                     u970:
  3998   0022A6                     l2413:
  3999   0022A6  90D8               	bcf	status,0,c
  4000   0022A8  3616               	rlcf	___aodiv@quotient^0,f,c
  4001   0022AA  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  4002   0022AC  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  4003   0022AE  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  4004   0022B0  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  4005   0022B2  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  4006   0022B4  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  4007   0022B6  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  4008   0022B8  500C               	movf	___aodiv@divisor^0,w,c
  4009   0022BA  5C04               	subwf	___aodiv@dividend^0,w,c
  4010   0022BC  500D               	movf	(___aodiv@divisor+1)^0,w,c
  4011   0022BE  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  4012   0022C0  500E               	movf	(___aodiv@divisor+2)^0,w,c
  4013   0022C2  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  4014   0022C4  500F               	movf	(___aodiv@divisor+3)^0,w,c
  4015   0022C6  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  4016   0022C8  5010               	movf	(___aodiv@divisor+4)^0,w,c
  4017   0022CA  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  4018   0022CC  5011               	movf	(___aodiv@divisor+5)^0,w,c
  4019   0022CE  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  4020   0022D0  5012               	movf	(___aodiv@divisor+6)^0,w,c
  4021   0022D2  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  4022   0022D4  5013               	movf	(___aodiv@divisor+7)^0,w,c
  4023   0022D6  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  4024   0022D8  A0D8               	btfss	status,0,c
  4025   0022DA  EF71  F011         	goto	u981
  4026   0022DE  EF73  F011         	goto	u980
  4027   0022E2                     u981:
  4028   0022E2  EF84  F011         	goto	l2421
  4029   0022E6                     u980:
  4030   0022E6  500C               	movf	___aodiv@divisor^0,w,c
  4031   0022E8  5E04               	subwf	___aodiv@dividend^0,f,c
  4032   0022EA  500D               	movf	(___aodiv@divisor+1)^0,w,c
  4033   0022EC  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  4034   0022EE  500E               	movf	(___aodiv@divisor+2)^0,w,c
  4035   0022F0  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  4036   0022F2  500F               	movf	(___aodiv@divisor+3)^0,w,c
  4037   0022F4  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  4038   0022F6  5010               	movf	(___aodiv@divisor+4)^0,w,c
  4039   0022F8  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  4040   0022FA  5011               	movf	(___aodiv@divisor+5)^0,w,c
  4041   0022FC  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  4042   0022FE  5012               	movf	(___aodiv@divisor+6)^0,w,c
  4043   002300  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  4044   002302  5013               	movf	(___aodiv@divisor+7)^0,w,c
  4045   002304  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  4046   002306  8016               	bsf	___aodiv@quotient^0,0,c
  4047   002308                     l2421:
  4048   002308  90D8               	bcf	status,0,c
  4049   00230A  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  4050   00230C  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  4051   00230E  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  4052   002310  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  4053   002312  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  4054   002314  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  4055   002316  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  4056   002318  320C               	rrcf	___aodiv@divisor^0,f,c
  4057   00231A  2E14               	decfsz	___aodiv@counter^0,f,c
  4058   00231C  EF53  F011         	goto	l2413
  4059   002320                     l2425:
  4060   002320  5015               	movf	___aodiv@sign^0,w,c
  4061   002322  B4D8               	btfsc	status,2,c
  4062   002324  EF96  F011         	goto	u991
  4063   002328  EF98  F011         	goto	u990
  4064   00232C                     u991:
  4065   00232C  EFA8  F011         	goto	l2429
  4066   002330                     u990:
  4067   002330  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  4068   002332  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  4069   002334  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  4070   002336  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  4071   002338  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  4072   00233A  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  4073   00233C  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  4074   00233E  6C16               	negf	___aodiv@quotient^0,c
  4075   002340  0E00               	movlw	0
  4076   002342  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  4077   002344  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  4078   002346  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  4079   002348  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  4080   00234A  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  4081   00234C  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  4082   00234E  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  4083   002350                     l2429:
  4084   002350  C016  F004         	movff	___aodiv@quotient,?___aodiv
  4085   002354  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  4086   002358  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  4087   00235C  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  4088   002360  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  4089   002364  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  4090   002368  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  4091   00236C  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  4092   002370  0012               	return		;funcret
  4093   002372                     __end_of___aodiv:
  4094                           	callstack 0
  4095                           
  4096 ;; *************** function _sendStringSerial4 *****************
  4097 ;; Defined at:
  4098 ;;		line 39 in file "serial.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  string          2    4[COMRAM] PTR unsigned char 
  4101 ;;		 -> main@buf(150), 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4113 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4117 ;;Total ram usage:        2 bytes
  4118 ;; Hardware stack levels used: 1
  4119 ;; Hardware stack levels required when called: 2
  4120 ;; This function calls:
  4121 ;;		_sendCharSerial4
  4122 ;; This function is called by:
  4123 ;;		_main
  4124 ;;		_card_response
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text18
  4129   00324A                     __ptext18:
  4130                           	callstack 0
  4131   00324A                     _sendStringSerial4:
  4132                           	callstack 28
  4133   00324A                     
  4134                           ;serial.c: 40:  while(*string != 0) {
  4135   00324A  EF30  F019         	goto	l2891
  4136   00324E                     l2887:
  4137                           
  4138                           ;serial.c: 41:         sendCharSerial4(*string++);
  4139   00324E  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  4140   003252  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4141   003256  50DF               	movf	indf2,w,c
  4142   003258  ECD9  F019         	call	_sendCharSerial4
  4143   00325C  4A05               	infsnz	sendStringSerial4@string^0,f,c
  4144   00325E  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  4145   003260                     l2891:
  4146                           
  4147                           ;serial.c: 40:  while(*string != 0) {
  4148   003260  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  4149   003264  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4150   003268  50DF               	movf	indf2,w,c
  4151   00326A  A4D8               	btfss	status,2,c
  4152   00326C  EF3A  F019         	goto	u1421
  4153   003270  EF3C  F019         	goto	u1420
  4154   003274                     u1421:
  4155   003274  EF27  F019         	goto	l2887
  4156   003278                     u1420:
  4157   003278  0012               	return		;funcret
  4158   00327A                     __end_of_sendStringSerial4:
  4159                           	callstack 0
  4160                           
  4161 ;; *************** function _sendCharSerial4 *****************
  4162 ;; Defined at:
  4163 ;;		line 32 in file "serial.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  charToSend      1    wreg     unsigned char 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  charToSend      1    3[COMRAM] unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4181 ;;Total ram usage:        1 bytes
  4182 ;; Hardware stack levels used: 1
  4183 ;; Hardware stack levels required when called: 1
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_sendStringSerial4
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text19
  4192   0033B2                     __ptext19:
  4193                           	callstack 0
  4194   0033B2                     _sendCharSerial4:
  4195                           	callstack 28
  4196                           
  4197                           ;incstack = 0
  4198                           ;sendCharSerial4@charToSend stored from wreg
  4199   0033B2  6E04               	movwf	sendCharSerial4@charToSend^0,c
  4200   0033B4                     l426:
  4201   0033B4  010E               	movlb	14	; () banked
  4202   0033B6  A537               	btfss	55,2,b	;volatile
  4203   0033B8  EFE0  F019         	goto	u1361
  4204   0033BC  EFE2  F019         	goto	u1360
  4205   0033C0                     u1361:
  4206   0033C0  EFDA  F019         	goto	l426
  4207   0033C4                     u1360:
  4208   0033C4                     
  4209                           ; BSR set to: 14
  4210                           ;serial.c: 34:     TX4REG = charToSend;
  4211   0033C4  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4212   0033C8                     
  4213                           ; BSR set to: 14
  4214   0033C8  0012               	return		;funcret
  4215   0033CA                     __end_of_sendCharSerial4:
  4216                           	callstack 0
  4217                           
  4218 ;; *************** function _normalise_readings *****************
  4219 ;; Defined at:
  4220 ;;		line 42 in file "colour_identify.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  buf             2   25[COMRAM] PTR unsigned char 
  4223 ;;		 -> main@buf(150), 
  4224 ;;  red_read        2   27[COMRAM] unsigned int 
  4225 ;;  green_read      2   29[COMRAM] unsigned int 
  4226 ;;  blue_read       2   31[COMRAM] unsigned int 
  4227 ;;  expected_val    2   33[COMRAM] PTR unsigned int [9]
  4228 ;;		 -> main@expected_values(54), 
  4229 ;;  normalised_v    2   35[COMRAM] PTR unsigned int [9]
  4230 ;;		 -> card_response@normalised_values(54), 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  difference      2   45[COMRAM] unsigned int 
  4233 ;;  i               1   47[COMRAM] enum E14551
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4243 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4247 ;;Total ram usage:       23 bytes
  4248 ;; Hardware stack levels used: 1
  4249 ;; Hardware stack levels required when called: 2
  4250 ;; This function calls:
  4251 ;;		___lwdiv
  4252 ;;		___wmul
  4253 ;;		_abs
  4254 ;; This function is called by:
  4255 ;;		_card_response
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text20
  4260   001DDC                     __ptext20:
  4261                           	callstack 0
  4262   001DDC                     _normalise_readings:
  4263                           	callstack 27
  4264   001DDC                     
  4265                           ;colour_identify.c: 49:     for(colour i = RED; i<= BLACK; i++){
  4266   001DDC  0E00               	movlw	0
  4267   001DDE  6E30               	movwf	normalise_readings@i^0,c
  4268   001DE0                     l2899:
  4269                           
  4270                           ;colour_identify.c: 53:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  4271   001DE0  5030               	movf	normalise_readings@i^0,w,c
  4272   001DE2  0D02               	mullw	2
  4273   001DE4  CFF3 F026          	movff	prodl,??_normalise_readings
  4274   001DE8  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4275   001DEC  5026               	movf	??_normalise_readings^0,w,c
  4276   001DEE  2422               	addwf	normalise_readings@expected_values^0,w,c
  4277   001DF0  6ED9               	movwf	fsr2l,c
  4278   001DF2  5027               	movf	(??_normalise_readings+1)^0,w,c
  4279   001DF4  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4280   001DF6  6EDA               	movwf	fsr2h,c
  4281   001DF8  CFDE F028          	movff	postinc2,??_normalise_readings+2
  4282   001DFC  CFDD F029          	movff	postdec2,??_normalise_readings+3
  4283   001E00  5028               	movf	(??_normalise_readings+2)^0,w,c
  4284   001E02  5C1C               	subwf	normalise_readings@red_read^0,w,c
  4285   001E04  6E16               	movwf	abs@a^0,c
  4286   001E06  5029               	movf	(??_normalise_readings+3)^0,w,c
  4287   001E08  581D               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4288   001E0A  6E17               	movwf	(abs@a+1)^0,c
  4289   001E0C  ECEB  F018         	call	_abs	;wreg free
  4290   001E10  C016  F02E         	movff	?_abs,normalise_readings@difference
  4291   001E14  C017  F02F         	movff	?_abs+1,normalise_readings@difference+1
  4292                           
  4293                           ;colour_identify.c: 54:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  4294   001E18  C02E  F004         	movff	normalise_readings@difference,___wmul@multiplier
  4295   001E1C  C02F  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4296   001E20  0E00               	movlw	0
  4297   001E22  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  4298   001E24  0E64               	movlw	100
  4299   001E26  6E06               	movwf	___wmul@multiplicand^0,c
  4300   001E28  ECA6  F019         	call	___wmul	;wreg free
  4301   001E2C  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  4302   001E30  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  4303   001E34  5030               	movf	normalise_readings@i^0,w,c
  4304   001E36  0D02               	mullw	2
  4305   001E38  CFF3 F026          	movff	prodl,??_normalise_readings
  4306   001E3C  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4307   001E40  5026               	movf	??_normalise_readings^0,w,c
  4308   001E42  2422               	addwf	normalise_readings@expected_values^0,w,c
  4309   001E44  6ED9               	movwf	fsr2l,c
  4310   001E46  5027               	movf	(??_normalise_readings+1)^0,w,c
  4311   001E48  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4312   001E4A  6EDA               	movwf	fsr2h,c
  4313   001E4C  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  4314   001E50  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  4315   001E54  EC7B  F017         	call	___lwdiv	;wreg free
  4316   001E58  5030               	movf	normalise_readings@i^0,w,c
  4317   001E5A  0D02               	mullw	2
  4318   001E5C  CFF3 F028          	movff	prodl,??_normalise_readings+2
  4319   001E60  CFF4 F029          	movff	prodh,??_normalise_readings+3
  4320   001E64  5028               	movf	(??_normalise_readings+2)^0,w,c
  4321   001E66  2424               	addwf	normalise_readings@normalised_values^0,w,c
  4322   001E68  6ED9               	movwf	fsr2l,c
  4323   001E6A  5029               	movf	(??_normalise_readings+3)^0,w,c
  4324   001E6C  2025               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4325   001E6E  6EDA               	movwf	fsr2h,c
  4326   001E70  C00A  FFDE         	movff	?___lwdiv,postinc2
  4327   001E74  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  4328                           
  4329                           ;colour_identify.c: 57:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  4330   001E78  5030               	movf	normalise_readings@i^0,w,c
  4331   001E7A  0D02               	mullw	2
  4332   001E7C  CFF3 F026          	movff	prodl,??_normalise_readings
  4333   001E80  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4334   001E84  5026               	movf	??_normalise_readings^0,w,c
  4335   001E86  2422               	addwf	normalise_readings@expected_values^0,w,c
  4336   001E88  6E28               	movwf	(??_normalise_readings+2)^0,c
  4337   001E8A  5027               	movf	(??_normalise_readings+1)^0,w,c
  4338   001E8C  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4339   001E8E  6E29               	movwf	(??_normalise_readings+3)^0,c
  4340   001E90  0E12               	movlw	18
  4341   001E92  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4342   001E94  6ED9               	movwf	fsr2l,c
  4343   001E96  0E00               	movlw	0
  4344   001E98  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4345   001E9A  6EDA               	movwf	fsr2h,c
  4346   001E9C  CFDE F02A          	movff	postinc2,??_normalise_readings+4
  4347   001EA0  CFDD F02B          	movff	postdec2,??_normalise_readings+5
  4348   001EA4  502A               	movf	(??_normalise_readings+4)^0,w,c
  4349   001EA6  5C1E               	subwf	normalise_readings@green_read^0,w,c
  4350   001EA8  6E16               	movwf	abs@a^0,c
  4351   001EAA  502B               	movf	(??_normalise_readings+5)^0,w,c
  4352   001EAC  581F               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4353   001EAE  6E17               	movwf	(abs@a+1)^0,c
  4354   001EB0  ECEB  F018         	call	_abs	;wreg free
  4355   001EB4  C016  F02E         	movff	?_abs,normalise_readings@difference
  4356   001EB8  C017  F02F         	movff	?_abs+1,normalise_readings@difference+1
  4357                           
  4358                           ;colour_identify.c: 58:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  4359   001EBC  C02E  F004         	movff	normalise_readings@difference,___wmul@multiplier
  4360   001EC0  C02F  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4361   001EC4  0E00               	movlw	0
  4362   001EC6  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  4363   001EC8  0E64               	movlw	100
  4364   001ECA  6E06               	movwf	___wmul@multiplicand^0,c
  4365   001ECC  ECA6  F019         	call	___wmul	;wreg free
  4366   001ED0  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  4367   001ED4  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  4368   001ED8  5030               	movf	normalise_readings@i^0,w,c
  4369   001EDA  0D02               	mullw	2
  4370   001EDC  CFF3 F026          	movff	prodl,??_normalise_readings
  4371   001EE0  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4372   001EE4  5026               	movf	??_normalise_readings^0,w,c
  4373   001EE6  2422               	addwf	normalise_readings@expected_values^0,w,c
  4374   001EE8  6E28               	movwf	(??_normalise_readings+2)^0,c
  4375   001EEA  5027               	movf	(??_normalise_readings+1)^0,w,c
  4376   001EEC  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4377   001EEE  6E29               	movwf	(??_normalise_readings+3)^0,c
  4378   001EF0  0E12               	movlw	18
  4379   001EF2  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4380   001EF4  6ED9               	movwf	fsr2l,c
  4381   001EF6  0E00               	movlw	0
  4382   001EF8  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4383   001EFA  6EDA               	movwf	fsr2h,c
  4384   001EFC  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  4385   001F00  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  4386   001F04  EC7B  F017         	call	___lwdiv	;wreg free
  4387   001F08  5030               	movf	normalise_readings@i^0,w,c
  4388   001F0A  0D02               	mullw	2
  4389   001F0C  CFF3 F02A          	movff	prodl,??_normalise_readings+4
  4390   001F10  CFF4 F02B          	movff	prodh,??_normalise_readings+5
  4391   001F14  502A               	movf	(??_normalise_readings+4)^0,w,c
  4392   001F16  2424               	addwf	normalise_readings@normalised_values^0,w,c
  4393   001F18  6E2C               	movwf	(??_normalise_readings+6)^0,c
  4394   001F1A  502B               	movf	(??_normalise_readings+5)^0,w,c
  4395   001F1C  2025               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4396   001F1E  6E2D               	movwf	(??_normalise_readings+7)^0,c
  4397   001F20  0E12               	movlw	18
  4398   001F22  242C               	addwf	(??_normalise_readings+6)^0,w,c
  4399   001F24  6ED9               	movwf	fsr2l,c
  4400   001F26  0E00               	movlw	0
  4401   001F28  202D               	addwfc	(??_normalise_readings+7)^0,w,c
  4402   001F2A  6EDA               	movwf	fsr2h,c
  4403   001F2C  C00A  FFDE         	movff	?___lwdiv,postinc2
  4404   001F30  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  4405                           
  4406                           ;colour_identify.c: 61:         difference = abs(blue_read - expected_values[BLUE][i]);
  4407   001F34  5030               	movf	normalise_readings@i^0,w,c
  4408   001F36  0D02               	mullw	2
  4409   001F38  CFF3 F026          	movff	prodl,??_normalise_readings
  4410   001F3C  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4411   001F40  5026               	movf	??_normalise_readings^0,w,c
  4412   001F42  2422               	addwf	normalise_readings@expected_values^0,w,c
  4413   001F44  6E28               	movwf	(??_normalise_readings+2)^0,c
  4414   001F46  5027               	movf	(??_normalise_readings+1)^0,w,c
  4415   001F48  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4416   001F4A  6E29               	movwf	(??_normalise_readings+3)^0,c
  4417   001F4C  0E24               	movlw	36
  4418   001F4E  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4419   001F50  6ED9               	movwf	fsr2l,c
  4420   001F52  0E00               	movlw	0
  4421   001F54  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4422   001F56  6EDA               	movwf	fsr2h,c
  4423   001F58  CFDE F02A          	movff	postinc2,??_normalise_readings+4
  4424   001F5C  CFDD F02B          	movff	postdec2,??_normalise_readings+5
  4425   001F60  502A               	movf	(??_normalise_readings+4)^0,w,c
  4426   001F62  5C20               	subwf	normalise_readings@blue_read^0,w,c
  4427   001F64  6E16               	movwf	abs@a^0,c
  4428   001F66  502B               	movf	(??_normalise_readings+5)^0,w,c
  4429   001F68  5821               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4430   001F6A  6E17               	movwf	(abs@a+1)^0,c
  4431   001F6C  ECEB  F018         	call	_abs	;wreg free
  4432   001F70  C016  F02E         	movff	?_abs,normalise_readings@difference
  4433   001F74  C017  F02F         	movff	?_abs+1,normalise_readings@difference+1
  4434                           
  4435                           ;colour_identify.c: 62:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4436   001F78  C02E  F004         	movff	normalise_readings@difference,___wmul@multiplier
  4437   001F7C  C02F  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4438   001F80  0E00               	movlw	0
  4439   001F82  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  4440   001F84  0E64               	movlw	100
  4441   001F86  6E06               	movwf	___wmul@multiplicand^0,c
  4442   001F88  ECA6  F019         	call	___wmul	;wreg free
  4443   001F8C  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  4444   001F90  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  4445   001F94  5030               	movf	normalise_readings@i^0,w,c
  4446   001F96  0D02               	mullw	2
  4447   001F98  CFF3 F026          	movff	prodl,??_normalise_readings
  4448   001F9C  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4449   001FA0  5026               	movf	??_normalise_readings^0,w,c
  4450   001FA2  2422               	addwf	normalise_readings@expected_values^0,w,c
  4451   001FA4  6E28               	movwf	(??_normalise_readings+2)^0,c
  4452   001FA6  5027               	movf	(??_normalise_readings+1)^0,w,c
  4453   001FA8  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4454   001FAA  6E29               	movwf	(??_normalise_readings+3)^0,c
  4455   001FAC  0E24               	movlw	36
  4456   001FAE  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4457   001FB0  6ED9               	movwf	fsr2l,c
  4458   001FB2  0E00               	movlw	0
  4459   001FB4  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4460   001FB6  6EDA               	movwf	fsr2h,c
  4461   001FB8  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  4462   001FBC  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  4463   001FC0  EC7B  F017         	call	___lwdiv	;wreg free
  4464   001FC4  5030               	movf	normalise_readings@i^0,w,c
  4465   001FC6  0D02               	mullw	2
  4466   001FC8  CFF3 F02A          	movff	prodl,??_normalise_readings+4
  4467   001FCC  CFF4 F02B          	movff	prodh,??_normalise_readings+5
  4468   001FD0  502A               	movf	(??_normalise_readings+4)^0,w,c
  4469   001FD2  2424               	addwf	normalise_readings@normalised_values^0,w,c
  4470   001FD4  6E2C               	movwf	(??_normalise_readings+6)^0,c
  4471   001FD6  502B               	movf	(??_normalise_readings+5)^0,w,c
  4472   001FD8  2025               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4473   001FDA  6E2D               	movwf	(??_normalise_readings+7)^0,c
  4474   001FDC  0E24               	movlw	36
  4475   001FDE  242C               	addwf	(??_normalise_readings+6)^0,w,c
  4476   001FE0  6ED9               	movwf	fsr2l,c
  4477   001FE2  0E00               	movlw	0
  4478   001FE4  202D               	addwfc	(??_normalise_readings+7)^0,w,c
  4479   001FE6  6EDA               	movwf	fsr2h,c
  4480   001FE8  C00A  FFDE         	movff	?___lwdiv,postinc2
  4481   001FEC  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  4482   001FF0                     
  4483                           ;colour_identify.c: 63:     }
  4484   001FF0  2A30               	incf	normalise_readings@i^0,f,c
  4485   001FF2  0E08               	movlw	8
  4486   001FF4  6430               	cpfsgt	normalise_readings@i^0,c
  4487   001FF6  EFFF  F00F         	goto	u1431
  4488   001FFA  EF01  F010         	goto	u1430
  4489   001FFE                     u1431:
  4490   001FFE  EFF0  F00E         	goto	l2899
  4491   002002                     u1430:
  4492   002002  0012               	return		;funcret
  4493   002004                     __end_of_normalise_readings:
  4494                           	callstack 0
  4495                           
  4496 ;; *************** function _abs *****************
  4497 ;; Defined at:
  4498 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  a               2   21[COMRAM] int 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  2   21[COMRAM] int 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4515 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4516 ;;Total ram usage:        4 bytes
  4517 ;; Hardware stack levels used: 1
  4518 ;; Hardware stack levels required when called: 1
  4519 ;; This function calls:
  4520 ;;		Nothing
  4521 ;; This function is called by:
  4522 ;;		_normalise_readings
  4523 ;;		_dtoa
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text21
  4528   0031D6                     __ptext21:
  4529                           	callstack 0
  4530   0031D6                     _abs:
  4531                           	callstack 25
  4532   0031D6  BE17               	btfsc	(abs@a+1)^0,7,c
  4533   0031D8  EFF8  F018         	goto	u920
  4534   0031DC  5017               	movf	(abs@a+1)^0,w,c
  4535   0031DE  E106               	bnz	u921
  4536   0031E0  0416               	decf	abs@a^0,w,c
  4537   0031E2  B0D8               	btfsc	status,0,c
  4538   0031E4  EFF6  F018         	goto	u921
  4539   0031E8  EFF8  F018         	goto	u920
  4540   0031EC                     u921:
  4541   0031EC  EF06  F019         	goto	l1172
  4542   0031F0                     u920:
  4543   0031F0  C016  F018         	movff	abs@a,??_abs
  4544   0031F4  C017  F019         	movff	abs@a+1,??_abs+1
  4545   0031F8  1E18               	comf	??_abs^0,f,c
  4546   0031FA  1E19               	comf	(??_abs+1)^0,f,c
  4547   0031FC  4A18               	infsnz	??_abs^0,f,c
  4548   0031FE  2A19               	incf	(??_abs+1)^0,f,c
  4549   003200  C018  F016         	movff	??_abs,?_abs
  4550   003204  C019  F017         	movff	??_abs+1,?_abs+1
  4551   003208  EF0A  F019         	goto	l1175
  4552   00320C                     l1172:
  4553   00320C  C016  F016         	movff	abs@a,?_abs
  4554   003210  C017  F017         	movff	abs@a+1,?_abs+1
  4555   003214                     l1175:
  4556   003214  0012               	return		;funcret
  4557   003216                     __end_of_abs:
  4558                           	callstack 0
  4559                           
  4560 ;; *************** function _motor_response *****************
  4561 ;; Defined at:
  4562 ;;		line 91 in file "colour_identify.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  card            1    wreg     enum E14551
  4565 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  4566 ;;		 -> main@motorL(9), 
  4567 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  4568 ;;		 -> main@motorR(9), 
  4569 ;;  ReturnHomeAr   60    4[BANK0 ] struct HomeStored
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  card            1   41[COMRAM] enum E14551
  4572 ;;  j               2   39[COMRAM] int 
  4573 ;;  i               2   42[COMRAM] int 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4583 ;;      Params:         0      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4584 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4585 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4586 ;;      Totals:         7      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4587 ;;Total ram usage:       71 bytes
  4588 ;; Hardware stack levels used: 1
  4589 ;; Hardware stack levels required when called: 5
  4590 ;; This function calls:
  4591 ;;		_fullSpeedAhead
  4592 ;;		_home_response
  4593 ;;		_reverseFullSpeed
  4594 ;;		_stop
  4595 ;;		_turnLeft45
  4596 ;;		_turnRight45
  4597 ;; This function is called by:
  4598 ;;		_card_response
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text22
  4603   000E62                     __ptext22:
  4604                           	callstack 0
  4605   000E62                     _motor_response:
  4606                           	callstack 24
  4607                           
  4608                           ;incstack = 0
  4609                           ;motor_response@card stored from wreg
  4610   000E62  6E2A               	movwf	motor_response@card^0,c
  4611   000E64                     
  4612                           ;colour_identify.c: 96:     switch (card){
  4613   000E64  EF53  F009         	goto	l3079
  4614   000E68                     l2943:
  4615                           
  4616                           ;colour_identify.c: 98:             reverseFullSpeed(mL,mR);
  4617   000E68  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4618   000E6C  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4619   000E70  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4620   000E74  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4621   000E78  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4622   000E7C                     
  4623                           ;colour_identify.c: 99:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4624   000E7C  0E05               	movlw	5
  4625   000E7E  6E27               	movwf	(??_motor_response+1)^0,c
  4626   000E80  0E0F               	movlw	15
  4627   000E82  6E26               	movwf	??_motor_response^0,c
  4628   000E84  0EF1               	movlw	241
  4629   000E86                     u1897:
  4630   000E86  2EE8               	decfsz	wreg,f,c
  4631   000E88  D7FE               	bra	u1897
  4632   000E8A  2E26               	decfsz	??_motor_response^0,f,c
  4633   000E8C  D7FC               	bra	u1897
  4634   000E8E  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4635   000E90  D7FA               	bra	u1897
  4636   000E92  F000               	nop	
  4637   000E94                     l2947:
  4638                           
  4639                           ;colour_identify.c: 100:             turnRight45(mL,mR);
  4640   000E94  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4641   000E98  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4642   000E9C  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4643   000EA0  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4644   000EA4  EC3D  F015         	call	_turnRight45	;wreg free
  4645   000EA8                     
  4646                           ;colour_identify.c: 101:             stop(mL,mR);
  4647   000EA8  C060  F017         	movff	motor_response@mL,stop@mL
  4648   000EAC  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4649   000EB0  C062  F019         	movff	motor_response@mR,stop@mR
  4650   000EB4  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4651   000EB8  ECBB  F016         	call	_stop	;wreg free
  4652   000EBC                     
  4653                           ;colour_identify.c: 102:             turnRight45(mL,mR);
  4654   000EBC  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4655   000EC0  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4656   000EC4  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4657   000EC8  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4658   000ECC  EC3D  F015         	call	_turnRight45	;wreg free
  4659   000ED0                     l2953:
  4660                           
  4661                           ;colour_identify.c: 103:             stop(mL,mR);
  4662   000ED0  C060  F017         	movff	motor_response@mL,stop@mL
  4663   000ED4  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4664   000ED8  C062  F019         	movff	motor_response@mR,stop@mR
  4665   000EDC  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4666   000EE0  ECBB  F016         	call	_stop	;wreg free
  4667                           
  4668                           ;colour_identify.c: 104:             break;
  4669   000EE4  EF84  F009         	goto	l362
  4670   000EE8                     l2955:
  4671                           
  4672                           ;colour_identify.c: 106:             reverseFullSpeed(mL,mR);
  4673   000EE8  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4674   000EEC  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4675   000EF0  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4676   000EF4  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4677   000EF8  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4678   000EFC                     
  4679                           ;colour_identify.c: 107:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4680   000EFC  0E05               	movlw	5
  4681   000EFE  6E27               	movwf	(??_motor_response+1)^0,c
  4682   000F00  0E0F               	movlw	15
  4683   000F02  6E26               	movwf	??_motor_response^0,c
  4684   000F04  0EF1               	movlw	241
  4685   000F06                     u1907:
  4686   000F06  2EE8               	decfsz	wreg,f,c
  4687   000F08  D7FE               	bra	u1907
  4688   000F0A  2E26               	decfsz	??_motor_response^0,f,c
  4689   000F0C  D7FC               	bra	u1907
  4690   000F0E  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4691   000F10  D7FA               	bra	u1907
  4692   000F12  F000               	nop	
  4693   000F14                     l2959:
  4694                           
  4695                           ;colour_identify.c: 108:             turnLeft45(mL,mR);
  4696   000F14  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4697   000F18  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4698   000F1C  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4699   000F20  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4700   000F24  EC94  F015         	call	_turnLeft45	;wreg free
  4701   000F28                     
  4702                           ;colour_identify.c: 109:             stop(mL,mR);
  4703   000F28  C060  F017         	movff	motor_response@mL,stop@mL
  4704   000F2C  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4705   000F30  C062  F019         	movff	motor_response@mR,stop@mR
  4706   000F34  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4707   000F38  ECBB  F016         	call	_stop	;wreg free
  4708   000F3C                     
  4709                           ;colour_identify.c: 110:             turnLeft45(mL,mR);
  4710   000F3C  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4711   000F40  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4712   000F44  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4713   000F48  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4714   000F4C  EC94  F015         	call	_turnLeft45	;wreg free
  4715   000F50  EF68  F007         	goto	l2953
  4716   000F54                     l2967:
  4717                           
  4718                           ;colour_identify.c: 114:             reverseFullSpeed(mL,mR);
  4719   000F54  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4720   000F58  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4721   000F5C  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4722   000F60  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4723   000F64  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4724   000F68                     
  4725                           ;colour_identify.c: 115:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4726   000F68  0E05               	movlw	5
  4727   000F6A  6E27               	movwf	(??_motor_response+1)^0,c
  4728   000F6C  0E0F               	movlw	15
  4729   000F6E  6E26               	movwf	??_motor_response^0,c
  4730   000F70  0EF1               	movlw	241
  4731   000F72                     u1917:
  4732   000F72  2EE8               	decfsz	wreg,f,c
  4733   000F74  D7FE               	bra	u1917
  4734   000F76  2E26               	decfsz	??_motor_response^0,f,c
  4735   000F78  D7FC               	bra	u1917
  4736   000F7A  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4737   000F7C  D7FA               	bra	u1917
  4738   000F7E  F000               	nop	
  4739   000F80                     
  4740                           ;colour_identify.c: 116:             turnRight45(mL,mR);
  4741   000F80  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4742   000F84  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4743   000F88  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4744   000F8C  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4745   000F90  EC3D  F015         	call	_turnRight45	;wreg free
  4746   000F94                     
  4747                           ;colour_identify.c: 117:             stop(mL,mR);
  4748   000F94  C060  F017         	movff	motor_response@mL,stop@mL
  4749   000F98  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4750   000F9C  C062  F019         	movff	motor_response@mR,stop@mR
  4751   000FA0  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4752   000FA4  ECBB  F016         	call	_stop	;wreg free
  4753   000FA8                     l2975:
  4754                           
  4755                           ;colour_identify.c: 118:             turnRight45(mL,mR);
  4756   000FA8  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4757   000FAC  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4758   000FB0  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4759   000FB4  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4760   000FB8  EC3D  F015         	call	_turnRight45	;wreg free
  4761   000FBC                     l2977:
  4762                           
  4763                           ;colour_identify.c: 119:             stop(mL,mR);
  4764   000FBC  C060  F017         	movff	motor_response@mL,stop@mL
  4765   000FC0  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4766   000FC4  C062  F019         	movff	motor_response@mR,stop@mR
  4767   000FC8  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4768   000FCC  ECBB  F016         	call	_stop	;wreg free
  4769   000FD0  EF4A  F007         	goto	l2947
  4770   000FD4                     l2987:
  4771                           
  4772                           ;colour_identify.c: 126:             reverseFullSpeed(mL,mR);
  4773   000FD4  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4774   000FD8  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4775   000FDC  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4776   000FE0  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4777   000FE4  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4778   000FE8                     
  4779                           ;colour_identify.c: 127:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4780   000FE8  0E05               	movlw	5
  4781   000FEA  6E27               	movwf	(??_motor_response+1)^0,c
  4782   000FEC  0E0F               	movlw	15
  4783   000FEE  6E26               	movwf	??_motor_response^0,c
  4784   000FF0  0EF1               	movlw	241
  4785   000FF2                     u1927:
  4786   000FF2  2EE8               	decfsz	wreg,f,c
  4787   000FF4  D7FE               	bra	u1927
  4788   000FF6  2E26               	decfsz	??_motor_response^0,f,c
  4789   000FF8  D7FC               	bra	u1927
  4790   000FFA  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4791   000FFC  D7FA               	bra	u1927
  4792   000FFE  F000               	nop	
  4793   001000                     
  4794                           ;colour_identify.c: 128:             reverseFullSpeed(mL,mR);
  4795   001000  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4796   001004  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4797   001008  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4798   00100C  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4799   001010  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4800                           
  4801                           ;colour_identify.c: 129:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4802   001014  0E29               	movlw	41
  4803   001016  6E27               	movwf	(??_motor_response+1)^0,c
  4804   001018  0E96               	movlw	150
  4805   00101A  6E26               	movwf	??_motor_response^0,c
  4806   00101C  0E7F               	movlw	127
  4807   00101E                     u1937:
  4808   00101E  2EE8               	decfsz	wreg,f,c
  4809   001020  D7FE               	bra	u1937
  4810   001022  2E26               	decfsz	??_motor_response^0,f,c
  4811   001024  D7FC               	bra	u1937
  4812   001026  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4813   001028  D7FA               	bra	u1937
  4814   00102A  F000               	nop	
  4815   00102C  EFDE  F007         	goto	l2977
  4816   001030                     l3003:
  4817                           
  4818                           ;colour_identify.c: 137:             reverseFullSpeed(mL,mR);
  4819   001030  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4820   001034  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4821   001038  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4822   00103C  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4823   001040  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4824   001044                     
  4825                           ;colour_identify.c: 138:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4826   001044  0E05               	movlw	5
  4827   001046  6E27               	movwf	(??_motor_response+1)^0,c
  4828   001048  0E0F               	movlw	15
  4829   00104A  6E26               	movwf	??_motor_response^0,c
  4830   00104C  0EF1               	movlw	241
  4831   00104E                     u1947:
  4832   00104E  2EE8               	decfsz	wreg,f,c
  4833   001050  D7FE               	bra	u1947
  4834   001052  2E26               	decfsz	??_motor_response^0,f,c
  4835   001054  D7FC               	bra	u1947
  4836   001056  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4837   001058  D7FA               	bra	u1947
  4838   00105A  F000               	nop	
  4839   00105C                     
  4840                           ;colour_identify.c: 139:             reverseFullSpeed(mL,mR);
  4841   00105C  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4842   001060  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4843   001064  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4844   001068  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4845   00106C  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4846                           
  4847                           ;colour_identify.c: 140:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4848   001070  0E29               	movlw	41
  4849   001072  6E27               	movwf	(??_motor_response+1)^0,c
  4850   001074  0E96               	movlw	150
  4851   001076  6E26               	movwf	??_motor_response^0,c
  4852   001078  0E7F               	movlw	127
  4853   00107A                     u1957:
  4854   00107A  2EE8               	decfsz	wreg,f,c
  4855   00107C  D7FE               	bra	u1957
  4856   00107E  2E26               	decfsz	??_motor_response^0,f,c
  4857   001080  D7FC               	bra	u1957
  4858   001082  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4859   001084  D7FA               	bra	u1957
  4860   001086  F000               	nop	
  4861   001088                     l3009:
  4862                           
  4863                           ;colour_identify.c: 141:             stop(mL,mR);
  4864   001088  C060  F017         	movff	motor_response@mL,stop@mL
  4865   00108C  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4866   001090  C062  F019         	movff	motor_response@mR,stop@mR
  4867   001094  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4868   001098  ECBB  F016         	call	_stop	;wreg free
  4869   00109C  EF8A  F007         	goto	l2959
  4870   0010A0                     l3019:
  4871                           
  4872                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  4873   0010A0  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4874   0010A4  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4875   0010A8  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4876   0010AC  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4877   0010B0  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4878   0010B4                     
  4879                           ;colour_identify.c: 149:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4880   0010B4  0E05               	movlw	5
  4881   0010B6  6E27               	movwf	(??_motor_response+1)^0,c
  4882   0010B8  0E0F               	movlw	15
  4883   0010BA  6E26               	movwf	??_motor_response^0,c
  4884   0010BC  0EF1               	movlw	241
  4885   0010BE                     u1967:
  4886   0010BE  2EE8               	decfsz	wreg,f,c
  4887   0010C0  D7FE               	bra	u1967
  4888   0010C2  2E26               	decfsz	??_motor_response^0,f,c
  4889   0010C4  D7FC               	bra	u1967
  4890   0010C6  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4891   0010C8  D7FA               	bra	u1967
  4892   0010CA  F000               	nop	
  4893   0010CC  EFD4  F007         	goto	l2975
  4894   0010D0                     l3035:
  4895                           
  4896                           ;colour_identify.c: 158:             reverseFullSpeed(mL,mR);
  4897   0010D0  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4898   0010D4  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4899   0010D8  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4900   0010DC  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4901   0010E0  ECEB  F015         	call	_reverseFullSpeed	;wreg free
  4902   0010E4                     
  4903                           ;colour_identify.c: 159:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4904   0010E4  0E05               	movlw	5
  4905   0010E6  6E27               	movwf	(??_motor_response+1)^0,c
  4906   0010E8  0E0F               	movlw	15
  4907   0010EA  6E26               	movwf	??_motor_response^0,c
  4908   0010EC  0EF1               	movlw	241
  4909   0010EE                     u1977:
  4910   0010EE  2EE8               	decfsz	wreg,f,c
  4911   0010F0  D7FE               	bra	u1977
  4912   0010F2  2E26               	decfsz	??_motor_response^0,f,c
  4913   0010F4  D7FC               	bra	u1977
  4914   0010F6  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4915   0010F8  D7FA               	bra	u1977
  4916   0010FA  F000               	nop	
  4917   0010FC                     
  4918                           ;colour_identify.c: 160:             turnLeft45(mL,mR);
  4919   0010FC  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4920   001100  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4921   001104  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4922   001108  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4923   00110C  EC94  F015         	call	_turnLeft45	;wreg free
  4924   001110  EF44  F008         	goto	l3009
  4925   001114                     l3051:
  4926                           
  4927                           ;colour_identify.c: 169:             stop(mL,mR);
  4928   001114  C060  F017         	movff	motor_response@mL,stop@mL
  4929   001118  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4930   00111C  C062  F019         	movff	motor_response@mR,stop@mR
  4931   001120  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4932   001124  ECBB  F016         	call	_stop	;wreg free
  4933                           
  4934                           ;colour_identify.c: 170:             turnLeft45(mL,mR);
  4935   001128  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4936   00112C  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4937   001130  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4938   001134  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4939   001138  EC94  F015         	call	_turnLeft45	;wreg free
  4940                           
  4941                           ;colour_identify.c: 171:             stop(mL,mR);
  4942   00113C  C060  F017         	movff	motor_response@mL,stop@mL
  4943   001140  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4944   001144  C062  F019         	movff	motor_response@mR,stop@mR
  4945   001148  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4946   00114C  ECBB  F016         	call	_stop	;wreg free
  4947                           
  4948                           ;colour_identify.c: 172:             turnLeft45(mL,mR);
  4949   001150  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4950   001154  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4951   001158  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4952   00115C  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4953   001160  EC94  F015         	call	_turnLeft45	;wreg free
  4954                           
  4955                           ;colour_identify.c: 173:             stop(mL,mR);
  4956   001164  C060  F017         	movff	motor_response@mL,stop@mL
  4957   001168  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4958   00116C  C062  F019         	movff	motor_response@mR,stop@mR
  4959   001170  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4960   001174  ECBB  F016         	call	_stop	;wreg free
  4961                           
  4962                           ;colour_identify.c: 174:             turnLeft45(mL,mR);
  4963   001178  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4964   00117C  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4965   001180  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4966   001184  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4967   001188  EC94  F015         	call	_turnLeft45	;wreg free
  4968                           
  4969                           ;colour_identify.c: 175:             stop(mL,mR);
  4970   00118C  C060  F017         	movff	motor_response@mL,stop@mL
  4971   001190  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4972   001194  C062  F019         	movff	motor_response@mR,stop@mR
  4973   001198  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4974   00119C  ECBB  F016         	call	_stop	;wreg free
  4975                           
  4976                           ;colour_identify.c: 176:             turnLeft45(mL,mR);
  4977   0011A0  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4978   0011A4  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4979   0011A8  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4980   0011AC  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4981   0011B0  EC94  F015         	call	_turnLeft45	;wreg free
  4982                           
  4983                           ;colour_identify.c: 177:             stop(mL,mR);
  4984   0011B4  C060  F017         	movff	motor_response@mL,stop@mL
  4985   0011B8  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4986   0011BC  C062  F019         	movff	motor_response@mR,stop@mR
  4987   0011C0  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4988   0011C4  ECBB  F016         	call	_stop	;wreg free
  4989   0011C8                     
  4990                           ;colour_identify.c: 178:             for(int i = 29; i >= 0; i--){
  4991   0011C8  0E00               	movlw	0
  4992   0011CA  6E2C               	movwf	(motor_response@i+1)^0,c
  4993   0011CC  0E1D               	movlw	29
  4994   0011CE  6E2B               	movwf	motor_response@i^0,c
  4995   0011D0                     l3059:
  4996                           
  4997                           ;colour_identify.c: 179:                 if (ReturnHomeArray.TimerCount[i] != 0){
  4998   0011D0  90D8               	bcf	status,0,c
  4999   0011D2  342B               	rlcf	motor_response@i^0,w,c
  5000   0011D4  6ED9               	movwf	fsr2l,c
  5001   0011D6  342C               	rlcf	(motor_response@i+1)^0,w,c
  5002   0011D8  6EDA               	movwf	fsr2h,c
  5003   0011DA  0E64               	movlw	low motor_response@ReturnHomeArray
  5004   0011DC  26D9               	addwf	fsr2l,f,c
  5005   0011DE  0E00               	movlw	high motor_response@ReturnHomeArray
  5006   0011E0  22DA               	addwfc	fsr2h,f,c
  5007   0011E2  50DE               	movf	postinc2,w,c
  5008   0011E4  10DE               	iorwf	postinc2,w,c
  5009   0011E6  B4D8               	btfsc	status,2,c
  5010   0011E8  EFF8  F008         	goto	u1471
  5011   0011EC  EFFA  F008         	goto	u1470
  5012   0011F0                     u1471:
  5013   0011F0  EF47  F009         	goto	l3073
  5014   0011F4                     u1470:
  5015   0011F4                     
  5016                           ;colour_identify.c: 180:                     fullSpeedAhead(mL,mR);
  5017   0011F4  C060  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  5018   0011F8  C061  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  5019   0011FC  C062  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  5020   001200  C063  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  5021   001204  EC31  F016         	call	_fullSpeedAhead	;wreg free
  5022   001208                     
  5023                           ;colour_identify.c: 181:                     for (int j=0; j<= ReturnHomeArray.TimerCoun
      +                          t[i]; i++){
  5024   001208  0E00               	movlw	0
  5025   00120A  6E29               	movwf	(motor_response@j+1)^0,c
  5026   00120C  0E00               	movlw	0
  5027   00120E  6E28               	movwf	motor_response@j^0,c
  5028   001210  EF18  F009         	goto	l3069
  5029   001214                     l3065:
  5030                           
  5031                           ;colour_identify.c: 182:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  5032   001214  0E09               	movlw	9
  5033   001216  6E27               	movwf	(??_motor_response+1)^0,c
  5034   001218  0E1E               	movlw	30
  5035   00121A  6E26               	movwf	??_motor_response^0,c
  5036   00121C  0EE4               	movlw	228
  5037   00121E                     u1987:
  5038   00121E  2EE8               	decfsz	wreg,f,c
  5039   001220  D7FE               	bra	u1987
  5040   001222  2E26               	decfsz	??_motor_response^0,f,c
  5041   001224  D7FC               	bra	u1987
  5042   001226  2E27               	decfsz	(??_motor_response+1)^0,f,c
  5043   001228  D7FA               	bra	u1987
  5044   00122A  D000               	nop2	
  5045   00122C                     
  5046                           ;colour_identify.c: 183:                     }
  5047   00122C  4A2B               	infsnz	motor_response@i^0,f,c
  5048   00122E  2A2C               	incf	(motor_response@i+1)^0,f,c
  5049   001230                     l3069:
  5050   001230  90D8               	bcf	status,0,c
  5051   001232  342B               	rlcf	motor_response@i^0,w,c
  5052   001234  6ED9               	movwf	fsr2l,c
  5053   001236  342C               	rlcf	(motor_response@i+1)^0,w,c
  5054   001238  6EDA               	movwf	fsr2h,c
  5055   00123A  0E64               	movlw	low motor_response@ReturnHomeArray
  5056   00123C  26D9               	addwf	fsr2l,f,c
  5057   00123E  0E00               	movlw	high motor_response@ReturnHomeArray
  5058   001240  22DA               	addwfc	fsr2h,f,c
  5059   001242  5028               	movf	motor_response@j^0,w,c
  5060   001244  5CDE               	subwf	postinc2,w,c
  5061   001246  5029               	movf	(motor_response@j+1)^0,w,c
  5062   001248  58DE               	subwfb	postinc2,w,c
  5063   00124A  B0D8               	btfsc	status,0,c
  5064   00124C  EF2A  F009         	goto	u1481
  5065   001250  EF2C  F009         	goto	u1480
  5066   001254                     u1481:
  5067   001254  EF0A  F009         	goto	l3065
  5068   001258                     u1480:
  5069   001258                     
  5070                           ;colour_identify.c: 184:                     stop(mL,mR);
  5071   001258  C060  F017         	movff	motor_response@mL,stop@mL
  5072   00125C  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  5073   001260  C062  F019         	movff	motor_response@mR,stop@mR
  5074   001264  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  5075   001268  ECBB  F016         	call	_stop	;wreg free
  5076                           
  5077                           ;colour_identify.c: 185:                     home_response(ReturnHomeArray.card[i], mL, 
      +                          mR);
  5078   00126C  C060  F01F         	movff	motor_response@mL,home_response@mL
  5079   001270  C061  F020         	movff	motor_response@mL+1,home_response@mL+1
  5080   001274  C062  F021         	movff	motor_response@mR,home_response@mR
  5081   001278  C063  F022         	movff	motor_response@mR+1,home_response@mR+1
  5082   00127C  0E64               	movlw	low motor_response@ReturnHomeArray
  5083   00127E  242B               	addwf	motor_response@i^0,w,c
  5084   001280  6ED9               	movwf	fsr2l,c
  5085   001282  0E00               	movlw	high motor_response@ReturnHomeArray
  5086   001284  202C               	addwfc	(motor_response@i+1)^0,w,c
  5087   001286  6EDA               	movwf	fsr2h,c
  5088   001288  50DF               	movf	indf2,w,c
  5089   00128A  ECD8  F00B         	call	_home_response
  5090   00128E                     l3073:
  5091                           
  5092                           ;colour_identify.c: 187:             }
  5093   00128E  062B               	decf	motor_response@i^0,f,c
  5094   001290  A0D8               	btfss	status,0,c
  5095   001292  062C               	decf	(motor_response@i+1)^0,f,c
  5096   001294  BE2C               	btfsc	(motor_response@i+1)^0,7,c
  5097   001296  EF51  F009         	goto	u1490
  5098   00129A  EF4F  F009         	goto	u1491
  5099   00129E                     u1491:
  5100   00129E  EFE8  F008         	goto	l3059
  5101   0012A2                     u1490:
  5102   0012A2  EF84  F009         	goto	l362
  5103   0012A6                     l3079:
  5104   0012A6  502A               	movf	motor_response@card^0,w,c
  5105   0012A8  6E26               	movwf	??_motor_response^0,c
  5106   0012AA  6A27               	clrf	(??_motor_response+1)^0,c
  5107                           
  5108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5109                           ; Switch size 1, requested type "simple"
  5110                           ; Number of cases is 1, Range of values is 0 to 0
  5111                           ; switch strategies available:
  5112                           ; Name         Instructions Cycles
  5113                           ; simple_byte            4     3 (average)
  5114                           ;	Chosen strategy is simple_byte
  5115   0012AC  5027               	movf	(??_motor_response+1)^0,w,c
  5116   0012AE  0A00               	xorlw	0	; case 0
  5117   0012B0  B4D8               	btfsc	status,2,c
  5118   0012B2  EF5D  F009         	goto	l3683
  5119   0012B6  EF84  F009         	goto	l362
  5120   0012BA                     l3683:
  5121                           
  5122                           ; Switch size 1, requested type "simple"
  5123                           ; Number of cases is 9, Range of values is 0 to 8
  5124                           ; switch strategies available:
  5125                           ; Name         Instructions Cycles
  5126                           ; simple_byte           28    15 (average)
  5127                           ;	Chosen strategy is simple_byte
  5128   0012BA  5026               	movf	??_motor_response^0,w,c
  5129   0012BC  0A00               	xorlw	0	; case 0
  5130   0012BE  B4D8               	btfsc	status,2,c
  5131   0012C0  EF34  F007         	goto	l2943
  5132   0012C4  0A01               	xorlw	1	; case 1
  5133   0012C6  B4D8               	btfsc	status,2,c
  5134   0012C8  EF74  F007         	goto	l2955
  5135   0012CC  0A03               	xorlw	3	; case 2
  5136   0012CE  B4D8               	btfsc	status,2,c
  5137   0012D0  EFAA  F007         	goto	l2967
  5138   0012D4  0A01               	xorlw	1	; case 3
  5139   0012D6  B4D8               	btfsc	status,2,c
  5140   0012D8  EFEA  F007         	goto	l2987
  5141   0012DC  0A07               	xorlw	7	; case 4
  5142   0012DE  B4D8               	btfsc	status,2,c
  5143   0012E0  EF18  F008         	goto	l3003
  5144   0012E4  0A01               	xorlw	1	; case 5
  5145   0012E6  B4D8               	btfsc	status,2,c
  5146   0012E8  EF50  F008         	goto	l3019
  5147   0012EC  0A03               	xorlw	3	; case 6
  5148   0012EE  B4D8               	btfsc	status,2,c
  5149   0012F0  EF68  F008         	goto	l3035
  5150   0012F4  0A01               	xorlw	1	; case 7
  5151   0012F6  B4D8               	btfsc	status,2,c
  5152   0012F8  EF8A  F008         	goto	l3051
  5153   0012FC  0A0F               	xorlw	15	; case 8
  5154   0012FE  B4D8               	btfsc	status,2,c
  5155   001300  EF84  F009         	goto	l362
  5156   001304  EF84  F009         	goto	l362
  5157   001308                     l362:
  5158   001308  0012               	return		;funcret
  5159   00130A                     __end_of_motor_response:
  5160                           	callstack 0
  5161                           
  5162 ;; *************** function _reverseFullSpeed *****************
  5163 ;; Defined at:
  5164 ;;		line 145 in file "dc_motor.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5167 ;;		 -> main@motorL(9), 
  5168 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5169 ;;		 -> main@motorR(9), 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  i               2   27[COMRAM] int 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      void 
  5174 ;; Registers used:
  5175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5184 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5185 ;;Total ram usage:        7 bytes
  5186 ;; Hardware stack levels used: 1
  5187 ;; Hardware stack levels required when called: 3
  5188 ;; This function calls:
  5189 ;;		_setMotorPWM
  5190 ;; This function is called by:
  5191 ;;		_motor_response
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text23
  5196   002BD6                     __ptext23:
  5197                           	callstack 0
  5198   002BD6                     _reverseFullSpeed:
  5199                           	callstack 25
  5200   002BD6                     
  5201                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5202   002BD6  EE20 F001          	lfsr	2,1
  5203   002BDA  5017               	movf	reverseFullSpeed@mL^0,w,c
  5204   002BDC  26D9               	addwf	fsr2l,f,c
  5205   002BDE  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5206   002BE0  22DA               	addwfc	fsr2h,f,c
  5207   002BE2  0E00               	movlw	0
  5208   002BE4  6EDF               	movwf	indf2,c
  5209                           
  5210                           ;dc_motor.c: 148:     mR->direction=0;
  5211   002BE6  EE20 F001          	lfsr	2,1
  5212   002BEA  5019               	movf	reverseFullSpeed@mR^0,w,c
  5213   002BEC  26D9               	addwf	fsr2l,f,c
  5214   002BEE  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5215   002BF0  22DA               	addwfc	fsr2h,f,c
  5216   002BF2  0E00               	movlw	0
  5217   002BF4  6EDF               	movwf	indf2,c
  5218   002BF6                     
  5219                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5220   002BF6  0E00               	movlw	0
  5221   002BF8  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  5222   002BFA  0E00               	movlw	0
  5223   002BFC  6E1C               	movwf	reverseFullSpeed@i^0,c
  5224   002BFE                     l2745:
  5225                           
  5226                           ;dc_motor.c: 150:         mL->power=i;
  5227   002BFE  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5228   002C02  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5229   002C06  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  5230                           
  5231                           ;dc_motor.c: 151:         mR->power=i;
  5232   002C0A  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5233   002C0E  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5234   002C12  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  5235   002C16                     
  5236                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5237   002C16  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5238   002C1A  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5239   002C1E  ECB9  F011         	call	_setMotorPWM	;wreg free
  5240   002C22                     
  5241                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5242   002C22  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5243   002C26  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5244   002C2A  ECB9  F011         	call	_setMotorPWM	;wreg free
  5245   002C2E                     
  5246                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5247   002C2E  0ED0               	movlw	208
  5248   002C30  6E1B               	movwf	??_reverseFullSpeed^0,c
  5249   002C32  0ECA               	movlw	202
  5250   002C34                     u1997:
  5251   002C34  2EE8               	decfsz	wreg,f,c
  5252   002C36  D7FE               	bra	u1997
  5253   002C38  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  5254   002C3A  D7FC               	bra	u1997
  5255   002C3C                     
  5256                           ;dc_motor.c: 155:     }
  5257   002C3C  0E0A               	movlw	10
  5258   002C3E  261C               	addwf	reverseFullSpeed@i^0,f,c
  5259   002C40  0E00               	movlw	0
  5260   002C42  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5261   002C44  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5262   002C46  EF2E  F016         	goto	u1351
  5263   002C4A  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  5264   002C4C  E109               	bnz	u1350
  5265   002C4E  0E3C               	movlw	60
  5266   002C50  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  5267   002C52  A0D8               	btfss	status,0,c
  5268   002C54  EF2E  F016         	goto	u1351
  5269   002C58  EF30  F016         	goto	u1350
  5270   002C5C                     u1351:
  5271   002C5C  EFFF  F015         	goto	l2745
  5272   002C60                     u1350:
  5273   002C60  0012               	return		;funcret
  5274   002C62                     __end_of_reverseFullSpeed:
  5275                           	callstack 0
  5276                           
  5277 ;; *************** function _home_response *****************
  5278 ;; Defined at:
  5279 ;;		line 198 in file "colour_identify.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  card            1    wreg     enum E14551
  5282 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  5283 ;;		 -> main@motorL(9), 
  5284 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  5285 ;;		 -> main@motorR(9), 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  card            1   36[COMRAM] enum E14551
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;Total ram usage:        7 bytes
  5302 ;; Hardware stack levels used: 1
  5303 ;; Hardware stack levels required when called: 4
  5304 ;; This function calls:
  5305 ;;		_fullSpeedAhead
  5306 ;;		_stop
  5307 ;;		_turnLeft45
  5308 ;;		_turnRight45
  5309 ;; This function is called by:
  5310 ;;		_motor_response
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text24
  5315   0017B0                     __ptext24:
  5316                           	callstack 0
  5317   0017B0                     _home_response:
  5318                           	callstack 24
  5319                           
  5320                           ;incstack = 0
  5321                           ;home_response@card stored from wreg
  5322   0017B0  6E25               	movwf	home_response@card^0,c
  5323   0017B2                     
  5324                           ;colour_identify.c: 199:     switch(card){
  5325   0017B2  EF85  F00D         	goto	l2779
  5326   0017B6                     l2759:
  5327                           
  5328                           ;colour_identify.c: 201:             turnLeft45(mL,mR);
  5329   0017B6  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5330   0017BA  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5331   0017BE  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5332   0017C2  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5333   0017C6  EC94  F015         	call	_turnLeft45	;wreg free
  5334                           
  5335                           ;colour_identify.c: 202:             stop(mL,mR);
  5336   0017CA  C01F  F017         	movff	home_response@mL,stop@mL
  5337   0017CE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5338   0017D2  C021  F019         	movff	home_response@mR,stop@mR
  5339   0017D6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5340   0017DA  ECBB  F016         	call	_stop	;wreg free
  5341                           
  5342                           ;colour_identify.c: 203:             turnLeft45(mL,mR);
  5343   0017DE  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5344   0017E2  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5345   0017E6  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5346   0017EA  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5347   0017EE  EC94  F015         	call	_turnLeft45	;wreg free
  5348                           
  5349                           ;colour_identify.c: 204:             stop(mL,mR);
  5350   0017F2  C01F  F017         	movff	home_response@mL,stop@mL
  5351   0017F6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5352   0017FA  C021  F019         	movff	home_response@mR,stop@mR
  5353   0017FE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5354   001802  ECBB  F016         	call	_stop	;wreg free
  5355                           
  5356                           ;colour_identify.c: 205:             break;
  5357   001806  EFAE  F00D         	goto	l375
  5358   00180A                     l2761:
  5359                           
  5360                           ;colour_identify.c: 207:             turnRight45(mL,mR);
  5361   00180A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5362   00180E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5363   001812  C021  F019         	movff	home_response@mR,turnRight45@mR
  5364   001816  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5365   00181A  EC3D  F015         	call	_turnRight45	;wreg free
  5366                           
  5367                           ;colour_identify.c: 208:             stop(mL,mR);
  5368   00181E  C01F  F017         	movff	home_response@mL,stop@mL
  5369   001822  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5370   001826  C021  F019         	movff	home_response@mR,stop@mR
  5371   00182A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5372   00182E  ECBB  F016         	call	_stop	;wreg free
  5373                           
  5374                           ;colour_identify.c: 209:             turnRight45(mL,mR);
  5375   001832  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5376   001836  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5377   00183A  C021  F019         	movff	home_response@mR,turnRight45@mR
  5378   00183E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5379   001842  EC3D  F015         	call	_turnRight45	;wreg free
  5380                           
  5381                           ;colour_identify.c: 210:             stop(mL,mR);
  5382   001846  C01F  F017         	movff	home_response@mL,stop@mL
  5383   00184A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5384   00184E  C021  F019         	movff	home_response@mR,stop@mR
  5385   001852  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5386   001856  ECBB  F016         	call	_stop	;wreg free
  5387                           
  5388                           ;colour_identify.c: 211:             break;
  5389   00185A  EFAE  F00D         	goto	l375
  5390   00185E                     l2763:
  5391                           
  5392                           ;colour_identify.c: 213:             turnRight45(mL,mR);
  5393   00185E  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5394   001862  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5395   001866  C021  F019         	movff	home_response@mR,turnRight45@mR
  5396   00186A  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5397   00186E  EC3D  F015         	call	_turnRight45	;wreg free
  5398                           
  5399                           ;colour_identify.c: 214:             stop(mL,mR);
  5400   001872  C01F  F017         	movff	home_response@mL,stop@mL
  5401   001876  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5402   00187A  C021  F019         	movff	home_response@mR,stop@mR
  5403   00187E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5404   001882  ECBB  F016         	call	_stop	;wreg free
  5405                           
  5406                           ;colour_identify.c: 215:             turnRight45(mL,mR);
  5407   001886  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5408   00188A  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5409   00188E  C021  F019         	movff	home_response@mR,turnRight45@mR
  5410   001892  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5411   001896  EC3D  F015         	call	_turnRight45	;wreg free
  5412                           
  5413                           ;colour_identify.c: 216:             stop(mL,mR);
  5414   00189A  C01F  F017         	movff	home_response@mL,stop@mL
  5415   00189E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5416   0018A2  C021  F019         	movff	home_response@mR,stop@mR
  5417   0018A6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5418   0018AA  ECBB  F016         	call	_stop	;wreg free
  5419                           
  5420                           ;colour_identify.c: 217:             turnRight45(mL,mR);
  5421   0018AE  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5422   0018B2  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5423   0018B6  C021  F019         	movff	home_response@mR,turnRight45@mR
  5424   0018BA  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5425   0018BE  EC3D  F015         	call	_turnRight45	;wreg free
  5426                           
  5427                           ;colour_identify.c: 218:             stop(mL,mR);
  5428   0018C2  C01F  F017         	movff	home_response@mL,stop@mL
  5429   0018C6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5430   0018CA  C021  F019         	movff	home_response@mR,stop@mR
  5431   0018CE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5432   0018D2  ECBB  F016         	call	_stop	;wreg free
  5433                           
  5434                           ;colour_identify.c: 219:             turnRight45(mL,mR);
  5435   0018D6  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5436   0018DA  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5437   0018DE  C021  F019         	movff	home_response@mR,turnRight45@mR
  5438   0018E2  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5439   0018E6  EC3D  F015         	call	_turnRight45	;wreg free
  5440                           
  5441                           ;colour_identify.c: 220:             stop(mL,mR);
  5442   0018EA  C01F  F017         	movff	home_response@mL,stop@mL
  5443   0018EE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5444   0018F2  C021  F019         	movff	home_response@mR,stop@mR
  5445   0018F6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5446   0018FA  ECBB  F016         	call	_stop	;wreg free
  5447                           
  5448                           ;colour_identify.c: 221:             break;
  5449   0018FE  EFAE  F00D         	goto	l375
  5450   001902                     l2765:
  5451                           
  5452                           ;colour_identify.c: 223:             stop(mL,mR);
  5453   001902  C01F  F017         	movff	home_response@mL,stop@mL
  5454   001906  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5455   00190A  C021  F019         	movff	home_response@mR,stop@mR
  5456   00190E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5457   001912  ECBB  F016         	call	_stop	;wreg free
  5458                           
  5459                           ;colour_identify.c: 224:             turnLeft45(mL,mR);
  5460   001916  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5461   00191A  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5462   00191E  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5463   001922  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5464   001926  EC94  F015         	call	_turnLeft45	;wreg free
  5465                           
  5466                           ;colour_identify.c: 225:             stop(mL,mR);
  5467   00192A  C01F  F017         	movff	home_response@mL,stop@mL
  5468   00192E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5469   001932  C021  F019         	movff	home_response@mR,stop@mR
  5470   001936  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5471   00193A  ECBB  F016         	call	_stop	;wreg free
  5472                           
  5473                           ;colour_identify.c: 226:             turnLeft45(mL,mR);
  5474   00193E  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5475   001942  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5476   001946  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5477   00194A  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5478   00194E  EC94  F015         	call	_turnLeft45	;wreg free
  5479                           
  5480                           ;colour_identify.c: 227:             stop(mL,mR);
  5481   001952  C01F  F017         	movff	home_response@mL,stop@mL
  5482   001956  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5483   00195A  C021  F019         	movff	home_response@mR,stop@mR
  5484   00195E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5485   001962  ECBB  F016         	call	_stop	;wreg free
  5486                           
  5487                           ;colour_identify.c: 228:             fullSpeedAhead(mL,mR);
  5488   001966  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  5489   00196A  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  5490   00196E  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  5491   001972  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  5492   001976  EC31  F016         	call	_fullSpeedAhead	;wreg free
  5493   00197A                     l2767:
  5494                           
  5495                           ;colour_identify.c: 229:             _delay((unsigned long)((500)*(64000000/4000.0)));
  5496   00197A  0E29               	movlw	41
  5497   00197C  6E24               	movwf	(??_home_response+1)^0,c
  5498   00197E  0E96               	movlw	150
  5499   001980  6E23               	movwf	??_home_response^0,c
  5500   001982  0E7F               	movlw	127
  5501   001984                     u2007:
  5502   001984  2EE8               	decfsz	wreg,f,c
  5503   001986  D7FE               	bra	u2007
  5504   001988  2E23               	decfsz	??_home_response^0,f,c
  5505   00198A  D7FC               	bra	u2007
  5506   00198C  2E24               	decfsz	(??_home_response+1)^0,f,c
  5507   00198E  D7FA               	bra	u2007
  5508   001990  F000               	nop	
  5509                           
  5510                           ;colour_identify.c: 230:             break;
  5511   001992  EFAE  F00D         	goto	l375
  5512   001996                     l2769:
  5513                           
  5514                           ;colour_identify.c: 232:             stop(mL,mR);
  5515   001996  C01F  F017         	movff	home_response@mL,stop@mL
  5516   00199A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5517   00199E  C021  F019         	movff	home_response@mR,stop@mR
  5518   0019A2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5519   0019A6  ECBB  F016         	call	_stop	;wreg free
  5520                           
  5521                           ;colour_identify.c: 233:             turnRight45(mL,mR);
  5522   0019AA  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5523   0019AE  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5524   0019B2  C021  F019         	movff	home_response@mR,turnRight45@mR
  5525   0019B6  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5526   0019BA  EC3D  F015         	call	_turnRight45	;wreg free
  5527                           
  5528                           ;colour_identify.c: 234:             stop(mL,mR);
  5529   0019BE  C01F  F017         	movff	home_response@mL,stop@mL
  5530   0019C2  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5531   0019C6  C021  F019         	movff	home_response@mR,stop@mR
  5532   0019CA  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5533   0019CE  ECBB  F016         	call	_stop	;wreg free
  5534                           
  5535                           ;colour_identify.c: 235:             turnRight45(mL,mR);
  5536   0019D2  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5537   0019D6  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5538   0019DA  C021  F019         	movff	home_response@mR,turnRight45@mR
  5539   0019DE  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5540   0019E2  EC3D  F015         	call	_turnRight45	;wreg free
  5541                           
  5542                           ;colour_identify.c: 236:             stop(mL,mR);
  5543   0019E6  C01F  F017         	movff	home_response@mL,stop@mL
  5544   0019EA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5545   0019EE  C021  F019         	movff	home_response@mR,stop@mR
  5546   0019F2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5547   0019F6  ECBB  F016         	call	_stop	;wreg free
  5548                           
  5549                           ;colour_identify.c: 237:             fullSpeedAhead(mL,mR);
  5550   0019FA  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  5551   0019FE  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  5552   001A02  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  5553   001A06  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  5554   001A0A  EC31  F016         	call	_fullSpeedAhead	;wreg free
  5555   001A0E  EFBD  F00C         	goto	l2767
  5556   001A12                     l2773:
  5557                           
  5558                           ;colour_identify.c: 241:             turnLeft45(mL,mR);
  5559   001A12  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5560   001A16  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5561   001A1A  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5562   001A1E  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5563   001A22  EC94  F015         	call	_turnLeft45	;wreg free
  5564                           
  5565                           ;colour_identify.c: 242:             stop(mL,mR);
  5566   001A26  C01F  F017         	movff	home_response@mL,stop@mL
  5567   001A2A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5568   001A2E  C021  F019         	movff	home_response@mR,stop@mR
  5569   001A32  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5570   001A36  ECBB  F016         	call	_stop	;wreg free
  5571                           
  5572                           ;colour_identify.c: 243:             turnLeft45(mL,mR);
  5573   001A3A  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5574   001A3E  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5575   001A42  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5576   001A46  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5577   001A4A  EC94  F015         	call	_turnLeft45	;wreg free
  5578                           
  5579                           ;colour_identify.c: 244:             stop(mL,mR);
  5580   001A4E  C01F  F017         	movff	home_response@mL,stop@mL
  5581   001A52  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5582   001A56  C021  F019         	movff	home_response@mR,stop@mR
  5583   001A5A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5584   001A5E  ECBB  F016         	call	_stop	;wreg free
  5585                           
  5586                           ;colour_identify.c: 245:             turnLeft45(mL,mR);
  5587   001A62  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5588   001A66  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5589   001A6A  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5590   001A6E  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5591   001A72  EC94  F015         	call	_turnLeft45	;wreg free
  5592                           
  5593                           ;colour_identify.c: 246:             stop(mL,mR);
  5594   001A76  C01F  F017         	movff	home_response@mL,stop@mL
  5595   001A7A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5596   001A7E  C021  F019         	movff	home_response@mR,stop@mR
  5597   001A82  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5598   001A86  ECBB  F016         	call	_stop	;wreg free
  5599                           
  5600                           ;colour_identify.c: 247:             break;
  5601   001A8A  EFAE  F00D         	goto	l375
  5602   001A8E                     l2775:
  5603                           
  5604                           ;colour_identify.c: 249:             turnRight45(mL,mR);
  5605   001A8E  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5606   001A92  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5607   001A96  C021  F019         	movff	home_response@mR,turnRight45@mR
  5608   001A9A  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5609   001A9E  EC3D  F015         	call	_turnRight45	;wreg free
  5610                           
  5611                           ;colour_identify.c: 250:             stop(mL,mR);
  5612   001AA2  C01F  F017         	movff	home_response@mL,stop@mL
  5613   001AA6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5614   001AAA  C021  F019         	movff	home_response@mR,stop@mR
  5615   001AAE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5616   001AB2  ECBB  F016         	call	_stop	;wreg free
  5617                           
  5618                           ;colour_identify.c: 251:             turnRight45(mL,mR);
  5619   001AB6  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5620   001ABA  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5621   001ABE  C021  F019         	movff	home_response@mR,turnRight45@mR
  5622   001AC2  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5623   001AC6  EC3D  F015         	call	_turnRight45	;wreg free
  5624                           
  5625                           ;colour_identify.c: 252:             stop(mL,mR);
  5626   001ACA  C01F  F017         	movff	home_response@mL,stop@mL
  5627   001ACE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5628   001AD2  C021  F019         	movff	home_response@mR,stop@mR
  5629   001AD6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5630   001ADA  ECBB  F016         	call	_stop	;wreg free
  5631                           
  5632                           ;colour_identify.c: 253:             turnRight45(mL,mR);
  5633   001ADE  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5634   001AE2  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5635   001AE6  C021  F019         	movff	home_response@mR,turnRight45@mR
  5636   001AEA  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5637   001AEE  EC3D  F015         	call	_turnRight45	;wreg free
  5638                           
  5639                           ;colour_identify.c: 254:             stop(mL,mR);
  5640   001AF2  C01F  F017         	movff	home_response@mL,stop@mL
  5641   001AF6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5642   001AFA  C021  F019         	movff	home_response@mR,stop@mR
  5643   001AFE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5644   001B02  ECBB  F016         	call	_stop	;wreg free
  5645                           
  5646                           ;colour_identify.c: 255:             break;
  5647   001B06  EFAE  F00D         	goto	l375
  5648   001B0A                     l2779:
  5649   001B0A  5025               	movf	home_response@card^0,w,c
  5650   001B0C  6E23               	movwf	??_home_response^0,c
  5651   001B0E  6A24               	clrf	(??_home_response+1)^0,c
  5652                           
  5653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5654                           ; Switch size 1, requested type "simple"
  5655                           ; Number of cases is 1, Range of values is 0 to 0
  5656                           ; switch strategies available:
  5657                           ; Name         Instructions Cycles
  5658                           ; simple_byte            4     3 (average)
  5659                           ;	Chosen strategy is simple_byte
  5660   001B10  5024               	movf	(??_home_response+1)^0,w,c
  5661   001B12  0A00               	xorlw	0	; case 0
  5662   001B14  B4D8               	btfsc	status,2,c
  5663   001B16  EF8F  F00D         	goto	l3685
  5664   001B1A  EFAE  F00D         	goto	l375
  5665   001B1E                     l3685:
  5666                           
  5667                           ; Switch size 1, requested type "simple"
  5668                           ; Number of cases is 7, Range of values is 0 to 6
  5669                           ; switch strategies available:
  5670                           ; Name         Instructions Cycles
  5671                           ; simple_byte           22    12 (average)
  5672                           ;	Chosen strategy is simple_byte
  5673   001B1E  5023               	movf	??_home_response^0,w,c
  5674   001B20  0A00               	xorlw	0	; case 0
  5675   001B22  B4D8               	btfsc	status,2,c
  5676   001B24  EFDB  F00B         	goto	l2759
  5677   001B28  0A01               	xorlw	1	; case 1
  5678   001B2A  B4D8               	btfsc	status,2,c
  5679   001B2C  EF05  F00C         	goto	l2761
  5680   001B30  0A03               	xorlw	3	; case 2
  5681   001B32  B4D8               	btfsc	status,2,c
  5682   001B34  EF2F  F00C         	goto	l2763
  5683   001B38  0A01               	xorlw	1	; case 3
  5684   001B3A  B4D8               	btfsc	status,2,c
  5685   001B3C  EF81  F00C         	goto	l2765
  5686   001B40  0A07               	xorlw	7	; case 4
  5687   001B42  B4D8               	btfsc	status,2,c
  5688   001B44  EFCB  F00C         	goto	l2769
  5689   001B48  0A01               	xorlw	1	; case 5
  5690   001B4A  B4D8               	btfsc	status,2,c
  5691   001B4C  EF09  F00D         	goto	l2773
  5692   001B50  0A03               	xorlw	3	; case 6
  5693   001B52  B4D8               	btfsc	status,2,c
  5694   001B54  EF47  F00D         	goto	l2775
  5695   001B58  EFAE  F00D         	goto	l375
  5696   001B5C                     l375:
  5697   001B5C  0012               	return		;funcret
  5698   001B5E                     __end_of_home_response:
  5699                           	callstack 0
  5700                           
  5701 ;; *************** function _turnRight45 *****************
  5702 ;; Defined at:
  5703 ;;		line 116 in file "dc_motor.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5706 ;;		 -> main@motorL(9), 
  5707 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5708 ;;		 -> main@motorR(9), 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  i               2   28[COMRAM] int 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5723 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;Total ram usage:        8 bytes
  5725 ;; Hardware stack levels used: 1
  5726 ;; Hardware stack levels required when called: 3
  5727 ;; This function calls:
  5728 ;;		_setMotorPWM
  5729 ;; This function is called by:
  5730 ;;		_motor_response
  5731 ;;		_home_response
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text25
  5736   002A7A                     __ptext25:
  5737                           	callstack 0
  5738   002A7A                     _turnRight45:
  5739                           	callstack 25
  5740   002A7A                     
  5741                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5742   002A7A  EE20 F001          	lfsr	2,1
  5743   002A7E  5017               	movf	turnRight45@mL^0,w,c
  5744   002A80  26D9               	addwf	fsr2l,f,c
  5745   002A82  5018               	movf	(turnRight45@mL+1)^0,w,c
  5746   002A84  22DA               	addwfc	fsr2h,f,c
  5747   002A86  0E01               	movlw	1
  5748   002A88  6EDF               	movwf	indf2,c
  5749                           
  5750                           ;dc_motor.c: 119:     mR->direction=0;
  5751   002A8A  EE20 F001          	lfsr	2,1
  5752   002A8E  5019               	movf	turnRight45@mR^0,w,c
  5753   002A90  26D9               	addwf	fsr2l,f,c
  5754   002A92  501A               	movf	(turnRight45@mR+1)^0,w,c
  5755   002A94  22DA               	addwfc	fsr2h,f,c
  5756   002A96  0E00               	movlw	0
  5757   002A98  6EDF               	movwf	indf2,c
  5758   002A9A                     
  5759                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5760   002A9A  0E00               	movlw	0
  5761   002A9C  6E1E               	movwf	(turnRight45@i+1)^0,c
  5762   002A9E  0E00               	movlw	0
  5763   002AA0  6E1D               	movwf	turnRight45@i^0,c
  5764   002AA2                     l2655:
  5765                           
  5766                           ;dc_motor.c: 122:         mR->power=i;
  5767   002AA2  C019  FFD9         	movff	turnRight45@mR,fsr2l
  5768   002AA6  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  5769   002AAA  C01D  FFDF         	movff	turnRight45@i,indf2
  5770                           
  5771                           ;dc_motor.c: 123:         mL->power=i;
  5772   002AAE  C017  FFD9         	movff	turnRight45@mL,fsr2l
  5773   002AB2  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  5774   002AB6  C01D  FFDF         	movff	turnRight45@i,indf2
  5775   002ABA                     
  5776                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5777   002ABA  0E02               	movlw	2
  5778   002ABC  6E1C               	movwf	(??_turnRight45+1)^0,c
  5779   002ABE  0E38               	movlw	56
  5780   002AC0  6E1B               	movwf	??_turnRight45^0,c
  5781   002AC2  0EAD               	movlw	173
  5782   002AC4                     u2017:
  5783   002AC4  2EE8               	decfsz	wreg,f,c
  5784   002AC6  D7FE               	bra	u2017
  5785   002AC8  2E1B               	decfsz	??_turnRight45^0,f,c
  5786   002ACA  D7FC               	bra	u2017
  5787   002ACC  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  5788   002ACE  D7FA               	bra	u2017
  5789   002AD0  F000               	nop	
  5790   002AD2                     
  5791                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5792   002AD2  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  5793   002AD6  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5794   002ADA  ECB9  F011         	call	_setMotorPWM	;wreg free
  5795   002ADE                     
  5796                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5797   002ADE  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  5798   002AE2  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5799   002AE6  ECB9  F011         	call	_setMotorPWM	;wreg free
  5800   002AEA  0E0A               	movlw	10
  5801   002AEC  261D               	addwf	turnRight45@i^0,f,c
  5802   002AEE  0E00               	movlw	0
  5803   002AF0  221E               	addwfc	(turnRight45@i+1)^0,f,c
  5804   002AF2  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  5805   002AF4  EF85  F015         	goto	u1301
  5806   002AF8  501E               	movf	(turnRight45@i+1)^0,w,c
  5807   002AFA  E109               	bnz	u1300
  5808   002AFC  0E50               	movlw	80
  5809   002AFE  5C1D               	subwf	turnRight45@i^0,w,c
  5810   002B00  A0D8               	btfss	status,0,c
  5811   002B02  EF85  F015         	goto	u1301
  5812   002B06  EF87  F015         	goto	u1300
  5813   002B0A                     u1301:
  5814   002B0A  EF51  F015         	goto	l2655
  5815   002B0E                     u1300:
  5816   002B0E                     
  5817                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5818   002B0E  0E06               	movlw	6
  5819   002B10  6E1C               	movwf	(??_turnRight45+1)^0,c
  5820   002B12  0E47               	movlw	71
  5821   002B14  6E1B               	movwf	??_turnRight45^0,c
  5822   002B16  0EA0               	movlw	160
  5823   002B18                     u2027:
  5824   002B18  2EE8               	decfsz	wreg,f,c
  5825   002B1A  D7FE               	bra	u2027
  5826   002B1C  2E1B               	decfsz	??_turnRight45^0,f,c
  5827   002B1E  D7FC               	bra	u2027
  5828   002B20  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  5829   002B22  D7FA               	bra	u2027
  5830   002B24  D000               	nop2	
  5831   002B26  0012               	return		;funcret
  5832   002B28                     __end_of_turnRight45:
  5833                           	callstack 0
  5834                           
  5835 ;; *************** function _turnLeft45 *****************
  5836 ;; Defined at:
  5837 ;;		line 101 in file "dc_motor.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5840 ;;		 -> main@motorL(9), 
  5841 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5842 ;;		 -> main@motorR(9), 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  i               2   28[COMRAM] int 
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5857 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5858 ;;Total ram usage:        8 bytes
  5859 ;; Hardware stack levels used: 1
  5860 ;; Hardware stack levels required when called: 3
  5861 ;; This function calls:
  5862 ;;		_setMotorPWM
  5863 ;; This function is called by:
  5864 ;;		_motor_response
  5865 ;;		_home_response
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text26
  5870   002B28                     __ptext26:
  5871                           	callstack 0
  5872   002B28                     _turnLeft45:
  5873                           	callstack 25
  5874   002B28                     
  5875                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5876   002B28  EE20 F001          	lfsr	2,1
  5877   002B2C  5017               	movf	turnLeft45@mL^0,w,c
  5878   002B2E  26D9               	addwf	fsr2l,f,c
  5879   002B30  5018               	movf	(turnLeft45@mL+1)^0,w,c
  5880   002B32  22DA               	addwfc	fsr2h,f,c
  5881   002B34  0E00               	movlw	0
  5882   002B36  6EDF               	movwf	indf2,c
  5883                           
  5884                           ;dc_motor.c: 104:     mR->direction=1;
  5885   002B38  EE20 F001          	lfsr	2,1
  5886   002B3C  5019               	movf	turnLeft45@mR^0,w,c
  5887   002B3E  26D9               	addwf	fsr2l,f,c
  5888   002B40  501A               	movf	(turnLeft45@mR+1)^0,w,c
  5889   002B42  22DA               	addwfc	fsr2h,f,c
  5890   002B44  0E01               	movlw	1
  5891   002B46  6EDF               	movwf	indf2,c
  5892   002B48                     
  5893                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5894   002B48  0E00               	movlw	0
  5895   002B4A  6E1E               	movwf	(turnLeft45@i+1)^0,c
  5896   002B4C  0E00               	movlw	0
  5897   002B4E  6E1D               	movwf	turnLeft45@i^0,c
  5898   002B50                     l2633:
  5899                           
  5900                           ;dc_motor.c: 107:         mR->power=i;
  5901   002B50  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  5902   002B54  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5903   002B58  C01D  FFDF         	movff	turnLeft45@i,indf2
  5904                           
  5905                           ;dc_motor.c: 108:         mL->power=i;
  5906   002B5C  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  5907   002B60  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5908   002B64  C01D  FFDF         	movff	turnLeft45@i,indf2
  5909   002B68                     
  5910                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5911   002B68  0E02               	movlw	2
  5912   002B6A  6E1C               	movwf	(??_turnLeft45+1)^0,c
  5913   002B6C  0E38               	movlw	56
  5914   002B6E  6E1B               	movwf	??_turnLeft45^0,c
  5915   002B70  0EAD               	movlw	173
  5916   002B72                     u2037:
  5917   002B72  2EE8               	decfsz	wreg,f,c
  5918   002B74  D7FE               	bra	u2037
  5919   002B76  2E1B               	decfsz	??_turnLeft45^0,f,c
  5920   002B78  D7FC               	bra	u2037
  5921   002B7A  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  5922   002B7C  D7FA               	bra	u2037
  5923   002B7E  F000               	nop	
  5924   002B80                     
  5925                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5926   002B80  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  5927   002B84  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5928   002B88  ECB9  F011         	call	_setMotorPWM	;wreg free
  5929   002B8C                     
  5930                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5931   002B8C  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  5932   002B90  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5933   002B94  ECB9  F011         	call	_setMotorPWM	;wreg free
  5934   002B98  0E0A               	movlw	10
  5935   002B9A  261D               	addwf	turnLeft45@i^0,f,c
  5936   002B9C  0E00               	movlw	0
  5937   002B9E  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  5938   002BA0  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  5939   002BA2  EFDC  F015         	goto	u1291
  5940   002BA6  501E               	movf	(turnLeft45@i+1)^0,w,c
  5941   002BA8  E109               	bnz	u1290
  5942   002BAA  0E50               	movlw	80
  5943   002BAC  5C1D               	subwf	turnLeft45@i^0,w,c
  5944   002BAE  A0D8               	btfss	status,0,c
  5945   002BB0  EFDC  F015         	goto	u1291
  5946   002BB4  EFDE  F015         	goto	u1290
  5947   002BB8                     u1291:
  5948   002BB8  EFA8  F015         	goto	l2633
  5949   002BBC                     u1290:
  5950   002BBC                     
  5951                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5952   002BBC  0E06               	movlw	6
  5953   002BBE  6E1C               	movwf	(??_turnLeft45+1)^0,c
  5954   002BC0  0E47               	movlw	71
  5955   002BC2  6E1B               	movwf	??_turnLeft45^0,c
  5956   002BC4  0EA0               	movlw	160
  5957   002BC6                     u2047:
  5958   002BC6  2EE8               	decfsz	wreg,f,c
  5959   002BC8  D7FE               	bra	u2047
  5960   002BCA  2E1B               	decfsz	??_turnLeft45^0,f,c
  5961   002BCC  D7FC               	bra	u2047
  5962   002BCE  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  5963   002BD0  D7FA               	bra	u2047
  5964   002BD2  D000               	nop2	
  5965   002BD4  0012               	return		;funcret
  5966   002BD6                     __end_of_turnLeft45:
  5967                           	callstack 0
  5968                           
  5969 ;; *************** function _stop *****************
  5970 ;; Defined at:
  5971 ;;		line 84 in file "dc_motor.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5974 ;;		 -> main@motorL(9), 
  5975 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5976 ;;		 -> main@motorR(9), 
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;		None
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      void 
  5981 ;; Registers used:
  5982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5991 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5992 ;;Total ram usage:        5 bytes
  5993 ;; Hardware stack levels used: 1
  5994 ;; Hardware stack levels required when called: 3
  5995 ;; This function calls:
  5996 ;;		_setMotorPWM
  5997 ;; This function is called by:
  5998 ;;		_main
  5999 ;;		_motor_response
  6000 ;;		_home_response
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text27
  6005   002D76                     __ptext27:
  6006                           	callstack 0
  6007   002D76                     _stop:
  6008                           	callstack 27
  6009   002D76                     
  6010                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  6011   002D76  EFD0  F016         	goto	l2615
  6012   002D7A                     l2609:
  6013                           
  6014                           ;dc_motor.c: 87:         mL->power -=10;
  6015   002D7A  C017  FFD9         	movff	stop@mL,fsr2l
  6016   002D7E  C018  FFDA         	movff	stop@mL+1,fsr2h
  6017   002D82  0E0A               	movlw	10
  6018   002D84  5EDF               	subwf	indf2,f,c
  6019   002D86                     
  6020                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6021   002D86  0E2A               	movlw	42
  6022   002D88  6E1B               	movwf	??_stop^0,c
  6023   002D8A  0E8E               	movlw	142
  6024   002D8C                     u2057:
  6025   002D8C  2EE8               	decfsz	wreg,f,c
  6026   002D8E  D7FE               	bra	u2057
  6027   002D90  2E1B               	decfsz	??_stop^0,f,c
  6028   002D92  D7FC               	bra	u2057
  6029   002D94                     
  6030                           ;dc_motor.c: 89:         setMotorPWM(mL);
  6031   002D94  C017  F011         	movff	stop@mL,setMotorPWM@m
  6032   002D98  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  6033   002D9C  ECB9  F011         	call	_setMotorPWM	;wreg free
  6034   002DA0                     l2615:
  6035                           
  6036                           ;dc_motor.c: 86:     while(mL->power !=0){
  6037   002DA0  C017  FFD9         	movff	stop@mL,fsr2l
  6038   002DA4  C018  FFDA         	movff	stop@mL+1,fsr2h
  6039   002DA8  50DF               	movf	indf2,w,c
  6040   002DAA  A4D8               	btfss	status,2,c
  6041   002DAC  EFDA  F016         	goto	u1271
  6042   002DB0  EFDC  F016         	goto	u1270
  6043   002DB4                     u1271:
  6044   002DB4  EFBD  F016         	goto	l2609
  6045   002DB8                     u1270:
  6046   002DB8  EFF1  F016         	goto	l2623
  6047   002DBC                     l2617:
  6048                           
  6049                           ;dc_motor.c: 92:         mR->power -=10;
  6050   002DBC  C019  FFD9         	movff	stop@mR,fsr2l
  6051   002DC0  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6052   002DC4  0E0A               	movlw	10
  6053   002DC6  5EDF               	subwf	indf2,f,c
  6054   002DC8                     
  6055                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6056   002DC8  0E2A               	movlw	42
  6057   002DCA  6E1B               	movwf	??_stop^0,c
  6058   002DCC  0E8E               	movlw	142
  6059   002DCE                     u2067:
  6060   002DCE  2EE8               	decfsz	wreg,f,c
  6061   002DD0  D7FE               	bra	u2067
  6062   002DD2  2E1B               	decfsz	??_stop^0,f,c
  6063   002DD4  D7FC               	bra	u2067
  6064   002DD6                     
  6065                           ;dc_motor.c: 94:         setMotorPWM(mR);
  6066   002DD6  C019  F011         	movff	stop@mR,setMotorPWM@m
  6067   002DDA  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  6068   002DDE  ECB9  F011         	call	_setMotorPWM	;wreg free
  6069   002DE2                     l2623:
  6070                           
  6071                           ;dc_motor.c: 91:     while(mR -> power !=0){
  6072   002DE2  C019  FFD9         	movff	stop@mR,fsr2l
  6073   002DE6  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6074   002DEA  50DF               	movf	indf2,w,c
  6075   002DEC  A4D8               	btfss	status,2,c
  6076   002DEE  EFFB  F016         	goto	u1281
  6077   002DF2  EFFD  F016         	goto	u1280
  6078   002DF6                     u1281:
  6079   002DF6  EFDE  F016         	goto	l2617
  6080   002DFA                     u1280:
  6081   002DFA  0012               	return		;funcret
  6082   002DFC                     __end_of_stop:
  6083                           	callstack 0
  6084                           
  6085 ;; *************** function _fullSpeedAhead *****************
  6086 ;; Defined at:
  6087 ;;		line 131 in file "dc_motor.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6090 ;;		 -> main@motorL(9), 
  6091 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6092 ;;		 -> main@motorR(9), 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  i               2   27[COMRAM] int 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6107 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6108 ;;Total ram usage:        7 bytes
  6109 ;; Hardware stack levels used: 1
  6110 ;; Hardware stack levels required when called: 3
  6111 ;; This function calls:
  6112 ;;		_setMotorPWM
  6113 ;; This function is called by:
  6114 ;;		_main
  6115 ;;		_motor_response
  6116 ;;		_home_response
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text28
  6121   002C62                     __ptext28:
  6122                           	callstack 0
  6123   002C62                     _fullSpeedAhead:
  6124                           	callstack 27
  6125   002C62                     
  6126                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  6127   002C62  EE20 F001          	lfsr	2,1
  6128   002C66  5017               	movf	fullSpeedAhead@mL^0,w,c
  6129   002C68  26D9               	addwf	fsr2l,f,c
  6130   002C6A  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  6131   002C6C  22DA               	addwfc	fsr2h,f,c
  6132   002C6E  0E01               	movlw	1
  6133   002C70  6EDF               	movwf	indf2,c
  6134                           
  6135                           ;dc_motor.c: 134:     mR->direction=1;
  6136   002C72  EE20 F001          	lfsr	2,1
  6137   002C76  5019               	movf	fullSpeedAhead@mR^0,w,c
  6138   002C78  26D9               	addwf	fsr2l,f,c
  6139   002C7A  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  6140   002C7C  22DA               	addwfc	fsr2h,f,c
  6141   002C7E  0E01               	movlw	1
  6142   002C80  6EDF               	movwf	indf2,c
  6143   002C82                     
  6144                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  6145   002C82  0E00               	movlw	0
  6146   002C84  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  6147   002C86  0E00               	movlw	0
  6148   002C88  6E1C               	movwf	fullSpeedAhead@i^0,c
  6149   002C8A                     l2677:
  6150                           
  6151                           ;dc_motor.c: 136:         mL->power=i;
  6152   002C8A  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  6153   002C8E  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  6154   002C92  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  6155                           
  6156                           ;dc_motor.c: 137:         mR->power=i;
  6157   002C96  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  6158   002C9A  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  6159   002C9E  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  6160   002CA2                     
  6161                           ;dc_motor.c: 138:         setMotorPWM(mL);
  6162   002CA2  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6163   002CA6  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  6164   002CAA  ECB9  F011         	call	_setMotorPWM	;wreg free
  6165   002CAE                     
  6166                           ;dc_motor.c: 139:         setMotorPWM(mR);
  6167   002CAE  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6168   002CB2  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  6169   002CB6  ECB9  F011         	call	_setMotorPWM	;wreg free
  6170   002CBA                     
  6171                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6172   002CBA  0ED0               	movlw	208
  6173   002CBC  6E1B               	movwf	??_fullSpeedAhead^0,c
  6174   002CBE  0ECA               	movlw	202
  6175   002CC0                     u2077:
  6176   002CC0  2EE8               	decfsz	wreg,f,c
  6177   002CC2  D7FE               	bra	u2077
  6178   002CC4  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  6179   002CC6  D7FC               	bra	u2077
  6180   002CC8                     
  6181                           ;dc_motor.c: 141:     }
  6182   002CC8  0E0A               	movlw	10
  6183   002CCA  261C               	addwf	fullSpeedAhead@i^0,f,c
  6184   002CCC  0E00               	movlw	0
  6185   002CCE  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  6186   002CD0  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  6187   002CD2  EF74  F016         	goto	u1311
  6188   002CD6  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  6189   002CD8  E109               	bnz	u1310
  6190   002CDA  0E3C               	movlw	60
  6191   002CDC  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  6192   002CDE  A0D8               	btfss	status,0,c
  6193   002CE0  EF74  F016         	goto	u1311
  6194   002CE4  EF76  F016         	goto	u1310
  6195   002CE8                     u1311:
  6196   002CE8  EF45  F016         	goto	l2677
  6197   002CEC                     u1310:
  6198   002CEC  0012               	return		;funcret
  6199   002CEE                     __end_of_fullSpeedAhead:
  6200                           	callstack 0
  6201                           
  6202 ;; *************** function _setMotorPWM *****************
  6203 ;; Defined at:
  6204 ;;		line 61 in file "dc_motor.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  m               2   16[COMRAM] PTR struct DC_motor
  6207 ;;		 -> main@motorR(9), main@motorL(9), 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  negDuty         1   21[COMRAM] unsigned char 
  6210 ;;  posDuty         1   20[COMRAM] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  1    wreg      void 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6223 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6224 ;;Total ram usage:        6 bytes
  6225 ;; Hardware stack levels used: 1
  6226 ;; Hardware stack levels required when called: 2
  6227 ;; This function calls:
  6228 ;;		___lwdiv
  6229 ;;		___wmul
  6230 ;; This function is called by:
  6231 ;;		_stop
  6232 ;;		_turnLeft45
  6233 ;;		_turnRight45
  6234 ;;		_fullSpeedAhead
  6235 ;;		_reverseFullSpeed
  6236 ;;		_main
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text29
  6241   002372                     __ptext29:
  6242                           	callstack 0
  6243   002372                     _setMotorPWM:
  6244                           	callstack 27
  6245   002372                     
  6246                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  6247   002372  EE20 F002          	lfsr	2,2
  6248   002376  5011               	movf	setMotorPWM@m^0,w,c
  6249   002378  26D9               	addwf	fsr2l,f,c
  6250   00237A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6251   00237C  22DA               	addwfc	fsr2h,f,c
  6252   00237E  50DF               	movf	indf2,w,c
  6253   002380  B4D8               	btfsc	status,2,c
  6254   002382  EFC5  F011         	goto	u1111
  6255   002386  EFC7  F011         	goto	u1110
  6256   00238A                     u1111:
  6257   00238A  EFFB  F011         	goto	l2511
  6258   00238E                     u1110:
  6259   00238E                     
  6260                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6261   00238E  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  6262   002392  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6263   002396  50DF               	movf	indf2,w,c
  6264   002398  6E13               	movwf	??_setMotorPWM^0,c
  6265   00239A  5013               	movf	??_setMotorPWM^0,w,c
  6266   00239C  6E04               	movwf	___wmul@multiplier^0,c
  6267   00239E  6A05               	clrf	(___wmul@multiplier+1)^0,c
  6268   0023A0  EE20 F003          	lfsr	2,3
  6269   0023A4  5011               	movf	setMotorPWM@m^0,w,c
  6270   0023A6  26D9               	addwf	fsr2l,f,c
  6271   0023A8  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6272   0023AA  22DA               	addwfc	fsr2h,f,c
  6273   0023AC  CFDE F006          	movff	postinc2,___wmul@multiplicand
  6274   0023B0  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  6275   0023B4  ECA6  F019         	call	___wmul	;wreg free
  6276   0023B8  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  6277   0023BC  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  6278   0023C0  0E00               	movlw	0
  6279   0023C2  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6280   0023C4  0E64               	movlw	100
  6281   0023C6  6E0C               	movwf	___lwdiv@divisor^0,c
  6282   0023C8  EC7B  F017         	call	___lwdiv	;wreg free
  6283   0023CC  EE20 F003          	lfsr	2,3
  6284   0023D0  5011               	movf	setMotorPWM@m^0,w,c
  6285   0023D2  26D9               	addwf	fsr2l,f,c
  6286   0023D4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6287   0023D6  22DA               	addwfc	fsr2h,f,c
  6288   0023D8  50DF               	movf	indf2,w,c
  6289   0023DA  6E14               	movwf	(??_setMotorPWM+1)^0,c
  6290   0023DC  500A               	movf	?___lwdiv^0,w,c
  6291   0023DE  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  6292   0023E0  6E15               	movwf	setMotorPWM@posDuty^0,c
  6293   0023E2                     
  6294                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  6295   0023E2  EE20 F003          	lfsr	2,3
  6296   0023E6  5011               	movf	setMotorPWM@m^0,w,c
  6297   0023E8  26D9               	addwf	fsr2l,f,c
  6298   0023EA  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6299   0023EC  22DA               	addwfc	fsr2h,f,c
  6300   0023EE  50DF               	movf	indf2,w,c
  6301   0023F0  6E16               	movwf	setMotorPWM@negDuty^0,c
  6302                           
  6303                           ;dc_motor.c: 68:     }
  6304   0023F2  EF1E  F012         	goto	l2515
  6305   0023F6                     l2511:
  6306                           
  6307                           ;dc_motor.c: 70:         posDuty=0;
  6308   0023F6  0E00               	movlw	0
  6309   0023F8  6E15               	movwf	setMotorPWM@posDuty^0,c
  6310   0023FA                     
  6311                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6312   0023FA  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  6313   0023FE  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6314   002402  50DF               	movf	indf2,w,c
  6315   002404  6E13               	movwf	??_setMotorPWM^0,c
  6316   002406  5013               	movf	??_setMotorPWM^0,w,c
  6317   002408  6E04               	movwf	___wmul@multiplier^0,c
  6318   00240A  6A05               	clrf	(___wmul@multiplier+1)^0,c
  6319   00240C  EE20 F003          	lfsr	2,3
  6320   002410  5011               	movf	setMotorPWM@m^0,w,c
  6321   002412  26D9               	addwf	fsr2l,f,c
  6322   002414  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6323   002416  22DA               	addwfc	fsr2h,f,c
  6324   002418  CFDE F006          	movff	postinc2,___wmul@multiplicand
  6325   00241C  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  6326   002420  ECA6  F019         	call	___wmul	;wreg free
  6327   002424  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  6328   002428  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  6329   00242C  0E00               	movlw	0
  6330   00242E  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6331   002430  0E64               	movlw	100
  6332   002432  6E0C               	movwf	___lwdiv@divisor^0,c
  6333   002434  EC7B  F017         	call	___lwdiv	;wreg free
  6334   002438  500A               	movf	?___lwdiv^0,w,c
  6335   00243A  6E16               	movwf	setMotorPWM@negDuty^0,c
  6336   00243C                     l2515:
  6337                           
  6338                           ;dc_motor.c: 74:     if (m->direction) {
  6339   00243C  EE20 F001          	lfsr	2,1
  6340   002440  5011               	movf	setMotorPWM@m^0,w,c
  6341   002442  26D9               	addwf	fsr2l,f,c
  6342   002444  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6343   002446  22DA               	addwfc	fsr2h,f,c
  6344   002448  50DF               	movf	indf2,w,c
  6345   00244A  B4D8               	btfsc	status,2,c
  6346   00244C  EF2A  F012         	goto	u1121
  6347   002450  EF2C  F012         	goto	u1120
  6348   002454                     u1121:
  6349   002454  EF4E  F012         	goto	l2519
  6350   002458                     u1120:
  6351   002458                     
  6352                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  6353   002458  EE20 F005          	lfsr	2,5
  6354   00245C  5011               	movf	setMotorPWM@m^0,w,c
  6355   00245E  26D9               	addwf	fsr2l,f,c
  6356   002460  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6357   002462  22DA               	addwfc	fsr2h,f,c
  6358   002464  CFDE F013          	movff	postinc2,??_setMotorPWM
  6359   002468  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6360   00246C  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6361   002470  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6362   002474  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  6363                           
  6364                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  6365   002478  EE20 F007          	lfsr	2,7
  6366   00247C  5011               	movf	setMotorPWM@m^0,w,c
  6367   00247E  26D9               	addwf	fsr2l,f,c
  6368   002480  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6369   002482  22DA               	addwfc	fsr2h,f,c
  6370   002484  CFDE F013          	movff	postinc2,??_setMotorPWM
  6371   002488  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6372   00248C  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6373   002490  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6374   002494  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  6375                           
  6376                           ;dc_motor.c: 77:     } else {
  6377   002498  EF6E  F012         	goto	l86
  6378   00249C                     l2519:
  6379                           
  6380                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  6381   00249C  EE20 F005          	lfsr	2,5
  6382   0024A0  5011               	movf	setMotorPWM@m^0,w,c
  6383   0024A2  26D9               	addwf	fsr2l,f,c
  6384   0024A4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6385   0024A6  22DA               	addwfc	fsr2h,f,c
  6386   0024A8  CFDE F013          	movff	postinc2,??_setMotorPWM
  6387   0024AC  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6388   0024B0  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6389   0024B4  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6390   0024B8  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  6391                           
  6392                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  6393   0024BC  EE20 F007          	lfsr	2,7
  6394   0024C0  5011               	movf	setMotorPWM@m^0,w,c
  6395   0024C2  26D9               	addwf	fsr2l,f,c
  6396   0024C4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6397   0024C6  22DA               	addwfc	fsr2h,f,c
  6398   0024C8  CFDE F013          	movff	postinc2,??_setMotorPWM
  6399   0024CC  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6400   0024D0  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6401   0024D4  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6402   0024D8  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  6403   0024DC                     l86:
  6404   0024DC  0012               	return		;funcret
  6405   0024DE                     __end_of_setMotorPWM:
  6406                           	callstack 0
  6407                           
  6408 ;; *************** function ___wmul *****************
  6409 ;; Defined at:
  6410 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  multiplier      2    3[COMRAM] unsigned int 
  6413 ;;  multiplicand    2    5[COMRAM] unsigned int 
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  product         2    7[COMRAM] unsigned int 
  6416 ;; Return value:  Size  Location     Type
  6417 ;;                  2    3[COMRAM] unsigned int 
  6418 ;; Registers used:
  6419 ;;		wreg, status,2, status,0, prodl, prodh
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6426 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6428 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6429 ;;Total ram usage:        6 bytes
  6430 ;; Hardware stack levels used: 1
  6431 ;; Hardware stack levels required when called: 1
  6432 ;; This function calls:
  6433 ;;		Nothing
  6434 ;; This function is called by:
  6435 ;;		_setMotorPWM
  6436 ;;		_normalise_readings
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text30
  6441   00334C                     __ptext30:
  6442                           	callstack 0
  6443   00334C                     ___wmul:
  6444                           	callstack 27
  6445   00334C  5004               	movf	___wmul@multiplier^0,w,c
  6446   00334E  0206               	mulwf	___wmul@multiplicand^0,c
  6447   003350  CFF3 F008          	movff	prodl,___wmul@product
  6448   003354  CFF4 F009          	movff	prodh,___wmul@product+1
  6449   003358  5004               	movf	___wmul@multiplier^0,w,c
  6450   00335A  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  6451   00335C  50F3               	movf	243,w,c
  6452   00335E  2609               	addwf	(___wmul@product+1)^0,f,c
  6453   003360  5005               	movf	(___wmul@multiplier+1)^0,w,c
  6454   003362  0206               	mulwf	___wmul@multiplicand^0,c
  6455   003364  50F3               	movf	243,w,c
  6456   003366  2609               	addwf	(___wmul@product+1)^0,f,c
  6457   003368  C008  F004         	movff	___wmul@product,?___wmul
  6458   00336C  C009  F005         	movff	___wmul@product+1,?___wmul+1
  6459   003370  0012               	return		;funcret
  6460   003372                     __end_of___wmul:
  6461                           	callstack 0
  6462                           
  6463 ;; *************** function _make_master_closeness *****************
  6464 ;; Defined at:
  6465 ;;		line 67 in file "colour_identify.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  buf             2   16[COMRAM] PTR unsigned char 
  6468 ;;		 -> main@buf(150), 
  6469 ;;  normalised_v    2   18[COMRAM] PTR unsigned int [9]
  6470 ;;		 -> card_response@normalised_values(54), 
  6471 ;;  master_close    2   20[COMRAM] PTR unsigned int 
  6472 ;;		 -> card_response@master_closeness(18), 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  i               1   42[COMRAM] enum E14551
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6484 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6486 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6487 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6488 ;;Total ram usage:       27 bytes
  6489 ;; Hardware stack levels used: 1
  6490 ;; Hardware stack levels required when called: 2
  6491 ;; This function calls:
  6492 ;;		___lwdiv
  6493 ;; This function is called by:
  6494 ;;		_card_response
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text31
  6499   0028DC                     __ptext31:
  6500                           	callstack 0
  6501   0028DC                     _make_master_closeness:
  6502                           	callstack 27
  6503   0028DC                     
  6504                           ;colour_identify.c: 68:     for(colour i = RED; i<=BLACK; i++){
  6505   0028DC  0E00               	movlw	0
  6506   0028DE  6E2B               	movwf	make_master_closeness@i^0,c
  6507   0028E0                     l2911:
  6508                           
  6509                           ;colour_identify.c: 70:         master_closeness[i] = (normalised_values[RED][i] + norma
      +                          lised_values[GREEN][i] + normalised_values[BLUE][i])/3;
  6510   0028E0  502B               	movf	make_master_closeness@i^0,w,c
  6511   0028E2  0D02               	mullw	2
  6512   0028E4  CFF3 F017          	movff	prodl,??_make_master_closeness
  6513   0028E8  CFF4 F018          	movff	prodh,??_make_master_closeness+1
  6514   0028EC  5017               	movf	??_make_master_closeness^0,w,c
  6515   0028EE  2413               	addwf	make_master_closeness@normalised_values^0,w,c
  6516   0028F0  6E19               	movwf	(??_make_master_closeness+2)^0,c
  6517   0028F2  5018               	movf	(??_make_master_closeness+1)^0,w,c
  6518   0028F4  2014               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6519   0028F6  6E1A               	movwf	(??_make_master_closeness+3)^0,c
  6520   0028F8  0E24               	movlw	36
  6521   0028FA  2419               	addwf	(??_make_master_closeness+2)^0,w,c
  6522   0028FC  6ED9               	movwf	fsr2l,c
  6523   0028FE  0E00               	movlw	0
  6524   002900  201A               	addwfc	(??_make_master_closeness+3)^0,w,c
  6525   002902  6EDA               	movwf	fsr2h,c
  6526   002904  CFDE F01B          	movff	postinc2,??_make_master_closeness+4
  6527   002908  CFDD F01C          	movff	postdec2,??_make_master_closeness+5
  6528   00290C  502B               	movf	make_master_closeness@i^0,w,c
  6529   00290E  0D02               	mullw	2
  6530   002910  CFF3 F01D          	movff	prodl,??_make_master_closeness+6
  6531   002914  CFF4 F01E          	movff	prodh,??_make_master_closeness+7
  6532   002918  501D               	movf	(??_make_master_closeness+6)^0,w,c
  6533   00291A  2413               	addwf	make_master_closeness@normalised_values^0,w,c
  6534   00291C  6E1F               	movwf	(??_make_master_closeness+8)^0,c
  6535   00291E  501E               	movf	(??_make_master_closeness+7)^0,w,c
  6536   002920  2014               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6537   002922  6E20               	movwf	(??_make_master_closeness+9)^0,c
  6538   002924  0E12               	movlw	18
  6539   002926  241F               	addwf	(??_make_master_closeness+8)^0,w,c
  6540   002928  6ED9               	movwf	fsr2l,c
  6541   00292A  0E00               	movlw	0
  6542   00292C  2020               	addwfc	(??_make_master_closeness+9)^0,w,c
  6543   00292E  6EDA               	movwf	fsr2h,c
  6544   002930  CFDE F021          	movff	postinc2,??_make_master_closeness+10
  6545   002934  CFDD F022          	movff	postdec2,??_make_master_closeness+11
  6546   002938  502B               	movf	make_master_closeness@i^0,w,c
  6547   00293A  0D02               	mullw	2
  6548   00293C  CFF3 F023          	movff	prodl,??_make_master_closeness+12
  6549   002940  CFF4 F024          	movff	prodh,??_make_master_closeness+13
  6550   002944  5023               	movf	(??_make_master_closeness+12)^0,w,c
  6551   002946  2413               	addwf	make_master_closeness@normalised_values^0,w,c
  6552   002948  6ED9               	movwf	fsr2l,c
  6553   00294A  5024               	movf	(??_make_master_closeness+13)^0,w,c
  6554   00294C  2014               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6555   00294E  6EDA               	movwf	fsr2h,c
  6556   002950  CFDE F025          	movff	postinc2,??_make_master_closeness+14
  6557   002954  CFDD F026          	movff	postdec2,??_make_master_closeness+15
  6558   002958  5021               	movf	(??_make_master_closeness+10)^0,w,c
  6559   00295A  2425               	addwf	(??_make_master_closeness+14)^0,w,c
  6560   00295C  6E27               	movwf	(??_make_master_closeness+16)^0,c
  6561   00295E  5022               	movf	(??_make_master_closeness+11)^0,w,c
  6562   002960  2026               	addwfc	(??_make_master_closeness+15)^0,w,c
  6563   002962  6E28               	movwf	(??_make_master_closeness+17)^0,c
  6564   002964  501B               	movf	(??_make_master_closeness+4)^0,w,c
  6565   002966  2427               	addwf	(??_make_master_closeness+16)^0,w,c
  6566   002968  6E0A               	movwf	___lwdiv@dividend^0,c
  6567   00296A  501C               	movf	(??_make_master_closeness+5)^0,w,c
  6568   00296C  2028               	addwfc	(??_make_master_closeness+17)^0,w,c
  6569   00296E  6E0B               	movwf	(___lwdiv@dividend+1)^0,c
  6570   002970  0E00               	movlw	0
  6571   002972  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6572   002974  0E03               	movlw	3
  6573   002976  6E0C               	movwf	___lwdiv@divisor^0,c
  6574   002978  EC7B  F017         	call	___lwdiv	;wreg free
  6575   00297C  502B               	movf	make_master_closeness@i^0,w,c
  6576   00297E  0D02               	mullw	2
  6577   002980  CFF3 F029          	movff	prodl,??_make_master_closeness+18
  6578   002984  CFF4 F02A          	movff	prodh,??_make_master_closeness+19
  6579   002988  5029               	movf	(??_make_master_closeness+18)^0,w,c
  6580   00298A  2415               	addwf	make_master_closeness@master_closeness^0,w,c
  6581   00298C  6ED9               	movwf	fsr2l,c
  6582   00298E  502A               	movf	(??_make_master_closeness+19)^0,w,c
  6583   002990  2016               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6584   002992  6EDA               	movwf	fsr2h,c
  6585   002994  C00A  FFDE         	movff	?___lwdiv,postinc2
  6586   002998  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6587   00299C                     
  6588                           ;colour_identify.c: 75:     }
  6589   00299C  2A2B               	incf	make_master_closeness@i^0,f,c
  6590   00299E  0E08               	movlw	8
  6591   0029A0  642B               	cpfsgt	make_master_closeness@i^0,c
  6592   0029A2  EFD5  F014         	goto	u1441
  6593   0029A6  EFD7  F014         	goto	u1440
  6594   0029AA                     u1441:
  6595   0029AA  EF70  F014         	goto	l2911
  6596   0029AE                     u1440:
  6597   0029AE  0012               	return		;funcret
  6598   0029B0                     __end_of_make_master_closeness:
  6599                           	callstack 0
  6600                           
  6601 ;; *************** function _determine_card *****************
  6602 ;; Defined at:
  6603 ;;		line 78 in file "colour_identify.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  6606 ;;		 -> card_response@master_closeness(18), 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  i               1   12[COMRAM] enum E14551
  6609 ;;  current_smal    2    9[COMRAM] unsigned int 
  6610 ;;  predicted_co    1   11[COMRAM] enum E14551
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      enum E14551
  6613 ;; Registers used:
  6614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6621 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6622 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6623 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6624 ;;Total ram usage:       10 bytes
  6625 ;; Hardware stack levels used: 1
  6626 ;; Hardware stack levels required when called: 1
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_card_response
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text32
  6635   002DFC                     __ptext32:
  6636                           	callstack 0
  6637   002DFC                     _determine_card:
  6638                           	callstack 28
  6639   002DFC                     
  6640                           ;colour_identify.c: 80:     colour predicted_colour = RED;
  6641   002DFC  0E00               	movlw	0
  6642   002DFE  6E0C               	movwf	determine_card@predicted_colour^0,c
  6643   002E00                     
  6644                           ;colour_identify.c: 81:     unsigned int current_smallest = master_closeness[RED];
  6645   002E00  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  6646   002E04  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  6647   002E08  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  6648   002E0C  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  6649   002E10                     
  6650                           ;colour_identify.c: 82:     for(colour i = GREEN; i<=BLACK; i++){
  6651   002E10  0E01               	movlw	1
  6652   002E12  6E0D               	movwf	determine_card@i^0,c
  6653   002E14                     l2927:
  6654                           
  6655                           ;colour_identify.c: 83:         if(master_closeness[i] < current_smallest){
  6656   002E14  500D               	movf	determine_card@i^0,w,c
  6657   002E16  0D02               	mullw	2
  6658   002E18  CFF3 F006          	movff	prodl,??_determine_card
  6659   002E1C  CFF4 F007          	movff	prodh,??_determine_card+1
  6660   002E20  5006               	movf	??_determine_card^0,w,c
  6661   002E22  2404               	addwf	determine_card@master_closeness^0,w,c
  6662   002E24  6ED9               	movwf	fsr2l,c
  6663   002E26  5007               	movf	(??_determine_card+1)^0,w,c
  6664   002E28  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6665   002E2A  6EDA               	movwf	fsr2h,c
  6666   002E2C  500A               	movf	determine_card@current_smallest^0,w,c
  6667   002E2E  5CDE               	subwf	postinc2,w,c
  6668   002E30  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  6669   002E32  58DE               	subwfb	postinc2,w,c
  6670   002E34  B0D8               	btfsc	status,0,c
  6671   002E36  EF1F  F017         	goto	u1451
  6672   002E3A  EF21  F017         	goto	u1450
  6673   002E3E                     u1451:
  6674   002E3E  EF33  F017         	goto	l2933
  6675   002E42                     u1450:
  6676   002E42                     
  6677                           ;colour_identify.c: 84:             current_smallest = master_closeness[i];
  6678   002E42  500D               	movf	determine_card@i^0,w,c
  6679   002E44  0D02               	mullw	2
  6680   002E46  CFF3 F006          	movff	prodl,??_determine_card
  6681   002E4A  CFF4 F007          	movff	prodh,??_determine_card+1
  6682   002E4E  5006               	movf	??_determine_card^0,w,c
  6683   002E50  2404               	addwf	determine_card@master_closeness^0,w,c
  6684   002E52  6ED9               	movwf	fsr2l,c
  6685   002E54  5007               	movf	(??_determine_card+1)^0,w,c
  6686   002E56  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6687   002E58  6EDA               	movwf	fsr2h,c
  6688   002E5A  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  6689   002E5E  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  6690   002E62                     
  6691                           ;colour_identify.c: 85:             predicted_colour = i;
  6692   002E62  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  6693   002E66                     l2933:
  6694                           
  6695                           ;colour_identify.c: 87:     }
  6696   002E66  2A0D               	incf	determine_card@i^0,f,c
  6697   002E68  0E08               	movlw	8
  6698   002E6A  640D               	cpfsgt	determine_card@i^0,c
  6699   002E6C  EF3A  F017         	goto	u1461
  6700   002E70  EF3C  F017         	goto	u1460
  6701   002E74                     u1461:
  6702   002E74  EF0A  F017         	goto	l2927
  6703   002E78                     u1460:
  6704   002E78                     
  6705                           ;colour_identify.c: 88:     return predicted_colour;
  6706   002E78  500C               	movf	determine_card@predicted_colour^0,w,c
  6707   002E7A  0012               	return		;funcret
  6708   002E7C                     __end_of_determine_card:
  6709                           	callstack 0
  6710                           
  6711 ;; *************** function _collect_avg_readings *****************
  6712 ;; Defined at:
  6713 ;;		line 10 in file "colour_identify.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  6716 ;;		 -> main@red_read(2), 
  6717 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  6718 ;;		 -> main@green_read(2), 
  6719 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  6720 ;;		 -> main@blue_read(2), 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  i               2   30[COMRAM] int 
  6723 ;;  i               2   28[COMRAM] int 
  6724 ;;  i               2   26[COMRAM] int 
  6725 ;;  i               2   24[COMRAM] int 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6735 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6736 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6737 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6738 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6739 ;;Total ram usage:       16 bytes
  6740 ;; Hardware stack levels used: 1
  6741 ;; Hardware stack levels required when called: 4
  6742 ;; This function calls:
  6743 ;;		___lwdiv
  6744 ;;		_color_read_Blue
  6745 ;;		_color_read_Green
  6746 ;;		_color_read_Red
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;;		_card_response
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text33
  6754   002004                     __ptext33:
  6755                           	callstack 0
  6756   002004                     _collect_avg_readings:
  6757                           	callstack 26
  6758   002004                     
  6759                           ;colour_identify.c: 10: void collect_avg_readings( unsigned int *red_read, unsigned int 
      +                          *green_read, unsigned int *blue_read);colour_identify.c: 11: {;colour_identify.c: 14:   
      +                            for (int i = 0; i <= 500; i++){
  6760   002004  0E00               	movlw	0
  6761   002006  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  6762   002008  0E00               	movlw	0
  6763   00200A  6E19               	movwf	collect_avg_readings@i^0,c
  6764   00200C                     l2819:
  6765                           
  6766                           ;colour_identify.c: 15:         *red_read = color_read_Red();
  6767   00200C  EC30  F018         	call	_color_read_Red	;wreg free
  6768   002010  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6769   002014  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6770   002018  C008  FFDE         	movff	?_color_read_Red,postinc2
  6771   00201C  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  6772                           
  6773                           ;colour_identify.c: 16:         *green_read = color_read_Green();
  6774   002020  EC58  F018         	call	_color_read_Green	;wreg free
  6775   002024  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6776   002028  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6777   00202C  C008  FFDE         	movff	?_color_read_Green,postinc2
  6778   002030  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  6779                           
  6780                           ;colour_identify.c: 17:         *blue_read = color_read_Blue();
  6781   002034  EC80  F018         	call	_color_read_Blue	;wreg free
  6782   002038  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6783   00203C  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6784   002040  C008  FFDE         	movff	?_color_read_Blue,postinc2
  6785   002044  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  6786   002048                     
  6787                           ;colour_identify.c: 18:     }
  6788   002048  4A19               	infsnz	collect_avg_readings@i^0,f,c
  6789   00204A  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  6790   00204C  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6791   00204E  EF32  F010         	goto	u1381
  6792   002052  0EF5               	movlw	245
  6793   002054  5C19               	subwf	collect_avg_readings@i^0,w,c
  6794   002056  0E01               	movlw	1
  6795   002058  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6796   00205A  A0D8               	btfss	status,0,c
  6797   00205C  EF32  F010         	goto	u1381
  6798   002060  EF34  F010         	goto	u1380
  6799   002064                     u1381:
  6800   002064  EF06  F010         	goto	l2819
  6801   002068                     u1380:
  6802   002068                     
  6803                           ;colour_identify.c: 22:     for(int i = 0; i <= 2; i++){
  6804   002068  0E00               	movlw	0
  6805   00206A  6E1C               	movwf	(collect_avg_readings@i_1581+1)^0,c
  6806   00206C  0E00               	movlw	0
  6807   00206E  6E1B               	movwf	collect_avg_readings@i_1581^0,c
  6808   002070                     l2831:
  6809                           
  6810                           ;colour_identify.c: 23:         *red_read += color_read_Red();
  6811   002070  EC30  F018         	call	_color_read_Red	;wreg free
  6812   002074  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6813   002078  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6814   00207C  5008               	movf	?_color_read_Red^0,w,c
  6815   00207E  26DE               	addwf	postinc2,f,c
  6816   002080  5009               	movf	(?_color_read_Red+1)^0,w,c
  6817   002082  22DD               	addwfc	postdec2,f,c
  6818   002084                     
  6819                           ;colour_identify.c: 24:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6820   002084  0E11               	movlw	17
  6821   002086  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  6822   002088  0E3C               	movlw	60
  6823   00208A  6E17               	movwf	??_collect_avg_readings^0,c
  6824   00208C  0ECB               	movlw	203
  6825   00208E                     u2087:
  6826   00208E  2EE8               	decfsz	wreg,f,c
  6827   002090  D7FE               	bra	u2087
  6828   002092  2E17               	decfsz	??_collect_avg_readings^0,f,c
  6829   002094  D7FC               	bra	u2087
  6830   002096  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6831   002098  D7FA               	bra	u2087
  6832   00209A  F000               	nop	
  6833   00209C                     
  6834                           ;colour_identify.c: 25:     }
  6835   00209C  4A1B               	infsnz	collect_avg_readings@i_1581^0,f,c
  6836   00209E  2A1C               	incf	(collect_avg_readings@i_1581+1)^0,f,c
  6837   0020A0  BE1C               	btfsc	(collect_avg_readings@i_1581+1)^0,7,c
  6838   0020A2  EF5C  F010         	goto	u1391
  6839   0020A6  501C               	movf	(collect_avg_readings@i_1581+1)^0,w,c
  6840   0020A8  E109               	bnz	u1390
  6841   0020AA  0E03               	movlw	3
  6842   0020AC  5C1B               	subwf	collect_avg_readings@i_1581^0,w,c
  6843   0020AE  A0D8               	btfss	status,0,c
  6844   0020B0  EF5C  F010         	goto	u1391
  6845   0020B4  EF5E  F010         	goto	u1390
  6846   0020B8                     u1391:
  6847   0020B8  EF38  F010         	goto	l2831
  6848   0020BC                     u1390:
  6849   0020BC                     
  6850                           ;colour_identify.c: 26:     *red_read = *red_read/3;
  6851   0020BC  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6852   0020C0  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6853   0020C4  CFDE F00A          	movff	postinc2,___lwdiv@dividend
  6854   0020C8  CFDD F00B          	movff	postdec2,___lwdiv@dividend+1
  6855   0020CC  0E00               	movlw	0
  6856   0020CE  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6857   0020D0  0E03               	movlw	3
  6858   0020D2  6E0C               	movwf	___lwdiv@divisor^0,c
  6859   0020D4  EC7B  F017         	call	___lwdiv	;wreg free
  6860   0020D8  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6861   0020DC  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6862   0020E0  C00A  FFDE         	movff	?___lwdiv,postinc2
  6863   0020E4  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6864   0020E8                     
  6865                           ;colour_identify.c: 28:     for(int i = 0; i <= 2; i++){
  6866   0020E8  0E00               	movlw	0
  6867   0020EA  6E1E               	movwf	(collect_avg_readings@i_1582+1)^0,c
  6868   0020EC  0E00               	movlw	0
  6869   0020EE  6E1D               	movwf	collect_avg_readings@i_1582^0,c
  6870   0020F0                     l2847:
  6871                           
  6872                           ;colour_identify.c: 29:         *green_read += color_read_Green();
  6873   0020F0  EC58  F018         	call	_color_read_Green	;wreg free
  6874   0020F4  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6875   0020F8  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6876   0020FC  5008               	movf	?_color_read_Green^0,w,c
  6877   0020FE  26DE               	addwf	postinc2,f,c
  6878   002100  5009               	movf	(?_color_read_Green+1)^0,w,c
  6879   002102  22DD               	addwfc	postdec2,f,c
  6880   002104                     
  6881                           ;colour_identify.c: 30:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6882   002104  0E11               	movlw	17
  6883   002106  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  6884   002108  0E3C               	movlw	60
  6885   00210A  6E17               	movwf	??_collect_avg_readings^0,c
  6886   00210C  0ECB               	movlw	203
  6887   00210E                     u2097:
  6888   00210E  2EE8               	decfsz	wreg,f,c
  6889   002110  D7FE               	bra	u2097
  6890   002112  2E17               	decfsz	??_collect_avg_readings^0,f,c
  6891   002114  D7FC               	bra	u2097
  6892   002116  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6893   002118  D7FA               	bra	u2097
  6894   00211A  F000               	nop	
  6895   00211C                     
  6896                           ;colour_identify.c: 31:     }
  6897   00211C  4A1D               	infsnz	collect_avg_readings@i_1582^0,f,c
  6898   00211E  2A1E               	incf	(collect_avg_readings@i_1582+1)^0,f,c
  6899   002120  BE1E               	btfsc	(collect_avg_readings@i_1582+1)^0,7,c
  6900   002122  EF9C  F010         	goto	u1401
  6901   002126  501E               	movf	(collect_avg_readings@i_1582+1)^0,w,c
  6902   002128  E109               	bnz	u1400
  6903   00212A  0E03               	movlw	3
  6904   00212C  5C1D               	subwf	collect_avg_readings@i_1582^0,w,c
  6905   00212E  A0D8               	btfss	status,0,c
  6906   002130  EF9C  F010         	goto	u1401
  6907   002134  EF9E  F010         	goto	u1400
  6908   002138                     u1401:
  6909   002138  EF78  F010         	goto	l2847
  6910   00213C                     u1400:
  6911   00213C                     
  6912                           ;colour_identify.c: 32:     *green_read = *green_read/3;
  6913   00213C  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6914   002140  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6915   002144  CFDE F00A          	movff	postinc2,___lwdiv@dividend
  6916   002148  CFDD F00B          	movff	postdec2,___lwdiv@dividend+1
  6917   00214C  0E00               	movlw	0
  6918   00214E  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6919   002150  0E03               	movlw	3
  6920   002152  6E0C               	movwf	___lwdiv@divisor^0,c
  6921   002154  EC7B  F017         	call	___lwdiv	;wreg free
  6922   002158  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6923   00215C  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6924   002160  C00A  FFDE         	movff	?___lwdiv,postinc2
  6925   002164  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6926   002168                     
  6927                           ;colour_identify.c: 34:     for(int i = 0; i <= 2; i++){
  6928   002168  0E00               	movlw	0
  6929   00216A  6E20               	movwf	(collect_avg_readings@i_1583+1)^0,c
  6930   00216C  0E00               	movlw	0
  6931   00216E  6E1F               	movwf	collect_avg_readings@i_1583^0,c
  6932   002170                     l2863:
  6933                           
  6934                           ;colour_identify.c: 35:         *blue_read += color_read_Blue();
  6935   002170  EC80  F018         	call	_color_read_Blue	;wreg free
  6936   002174  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6937   002178  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6938   00217C  5008               	movf	?_color_read_Blue^0,w,c
  6939   00217E  26DE               	addwf	postinc2,f,c
  6940   002180  5009               	movf	(?_color_read_Blue+1)^0,w,c
  6941   002182  22DD               	addwfc	postdec2,f,c
  6942   002184                     
  6943                           ;colour_identify.c: 36:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6944   002184  0E11               	movlw	17
  6945   002186  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  6946   002188  0E3C               	movlw	60
  6947   00218A  6E17               	movwf	??_collect_avg_readings^0,c
  6948   00218C  0ECB               	movlw	203
  6949   00218E                     u2107:
  6950   00218E  2EE8               	decfsz	wreg,f,c
  6951   002190  D7FE               	bra	u2107
  6952   002192  2E17               	decfsz	??_collect_avg_readings^0,f,c
  6953   002194  D7FC               	bra	u2107
  6954   002196  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6955   002198  D7FA               	bra	u2107
  6956   00219A  F000               	nop	
  6957   00219C                     
  6958                           ;colour_identify.c: 37:     }
  6959   00219C  4A1F               	infsnz	collect_avg_readings@i_1583^0,f,c
  6960   00219E  2A20               	incf	(collect_avg_readings@i_1583+1)^0,f,c
  6961   0021A0  BE20               	btfsc	(collect_avg_readings@i_1583+1)^0,7,c
  6962   0021A2  EFDC  F010         	goto	u1411
  6963   0021A6  5020               	movf	(collect_avg_readings@i_1583+1)^0,w,c
  6964   0021A8  E109               	bnz	u1410
  6965   0021AA  0E03               	movlw	3
  6966   0021AC  5C1F               	subwf	collect_avg_readings@i_1583^0,w,c
  6967   0021AE  A0D8               	btfss	status,0,c
  6968   0021B0  EFDC  F010         	goto	u1411
  6969   0021B4  EFDE  F010         	goto	u1410
  6970   0021B8                     u1411:
  6971   0021B8  EFB8  F010         	goto	l2863
  6972   0021BC                     u1410:
  6973   0021BC                     
  6974                           ;colour_identify.c: 38:     *blue_read = *blue_read/3;
  6975   0021BC  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6976   0021C0  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6977   0021C4  CFDE F00A          	movff	postinc2,___lwdiv@dividend
  6978   0021C8  CFDD F00B          	movff	postdec2,___lwdiv@dividend+1
  6979   0021CC  0E00               	movlw	0
  6980   0021CE  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6981   0021D0  0E03               	movlw	3
  6982   0021D2  6E0C               	movwf	___lwdiv@divisor^0,c
  6983   0021D4  EC7B  F017         	call	___lwdiv	;wreg free
  6984   0021D8  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6985   0021DC  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6986   0021E0  C00A  FFDE         	movff	?___lwdiv,postinc2
  6987   0021E4  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6988   0021E8  0012               	return		;funcret
  6989   0021EA                     __end_of_collect_avg_readings:
  6990                           	callstack 0
  6991                           
  6992 ;; *************** function _color_read_Red *****************
  6993 ;; Defined at:
  6994 ;;		line 29 in file "color.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;		None
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;  tmp             2   12[COMRAM] unsigned int 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  2    7[COMRAM] unsigned int 
  7001 ;; Registers used:
  7002 ;;		wreg, status,2, status,0, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7011 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7012 ;;Total ram usage:        7 bytes
  7013 ;; Hardware stack levels used: 1
  7014 ;; Hardware stack levels required when called: 3
  7015 ;; This function calls:
  7016 ;;		_I2C_2_Master_Read
  7017 ;;		_I2C_2_Master_RepStart
  7018 ;;		_I2C_2_Master_Start
  7019 ;;		_I2C_2_Master_Stop
  7020 ;;		_I2C_2_Master_Write
  7021 ;; This function is called by:
  7022 ;;		_main
  7023 ;;		_collect_avg_readings
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text34
  7028   003060                     __ptext34:
  7029                           	callstack 0
  7030   003060                     _color_read_Red:
  7031                           	callstack 27
  7032   003060                     
  7033                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  7034   003060  ECF0  F019         	call	_I2C_2_Master_Start	;wreg free
  7035                           
  7036                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  7037   003064  0E52               	movlw	82
  7038   003066  ECE5  F019         	call	_I2C_2_Master_Write
  7039                           
  7040                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  7041   00306A  0EB6               	movlw	182
  7042   00306C  ECE5  F019         	call	_I2C_2_Master_Write
  7043                           
  7044                           ;color.c: 35:  I2C_2_Master_RepStart();
  7045   003070  ECF5  F019         	call	_I2C_2_Master_RepStart	;wreg free
  7046                           
  7047                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  7048   003074  0E53               	movlw	83
  7049   003076  ECE5  F019         	call	_I2C_2_Master_Write
  7050                           
  7051                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  7052   00307A  0E01               	movlw	1
  7053   00307C  ECCA  F018         	call	_I2C_2_Master_Read
  7054   003080  6E0A               	movwf	??_color_read_Red^0,c
  7055   003082  500A               	movf	??_color_read_Red^0,w,c
  7056   003084  6E0D               	movwf	color_read_Red@tmp^0,c
  7057   003086  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  7058                           
  7059                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7060   003088  0E00               	movlw	0
  7061   00308A  ECCA  F018         	call	_I2C_2_Master_Read
  7062   00308E  6E0A               	movwf	??_color_read_Red^0,c
  7063   003090  500A               	movf	??_color_read_Red^0,w,c
  7064   003092  6E0C               	movwf	(??_color_read_Red+2)^0,c
  7065   003094  6A0B               	clrf	(??_color_read_Red+1)^0,c
  7066   003096  500D               	movf	color_read_Red@tmp^0,w,c
  7067   003098  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  7068   00309A  6E0D               	movwf	color_read_Red@tmp^0,c
  7069   00309C  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  7070   00309E  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  7071   0030A0  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  7072                           
  7073                           ;color.c: 39:  I2C_2_Master_Stop();
  7074   0030A2  ECEB  F019         	call	_I2C_2_Master_Stop	;wreg free
  7075   0030A6                     
  7076                           ;color.c: 40:  return tmp;
  7077   0030A6  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  7078   0030AA  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  7079   0030AE  0012               	return		;funcret
  7080   0030B0                     __end_of_color_read_Red:
  7081                           	callstack 0
  7082                           
  7083 ;; *************** function _color_read_Green *****************
  7084 ;; Defined at:
  7085 ;;		line 43 in file "color.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  tmp             2   12[COMRAM] unsigned int 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  2    7[COMRAM] unsigned int 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7101 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7102 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7103 ;;Total ram usage:        7 bytes
  7104 ;; Hardware stack levels used: 1
  7105 ;; Hardware stack levels required when called: 3
  7106 ;; This function calls:
  7107 ;;		_I2C_2_Master_Read
  7108 ;;		_I2C_2_Master_RepStart
  7109 ;;		_I2C_2_Master_Start
  7110 ;;		_I2C_2_Master_Stop
  7111 ;;		_I2C_2_Master_Write
  7112 ;; This function is called by:
  7113 ;;		_main
  7114 ;;		_collect_avg_readings
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           	psect	text35
  7119   0030B0                     __ptext35:
  7120                           	callstack 0
  7121   0030B0                     _color_read_Green:
  7122                           	callstack 27
  7123   0030B0                     
  7124                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  7125   0030B0  ECF0  F019         	call	_I2C_2_Master_Start	;wreg free
  7126                           
  7127                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  7128   0030B4  0E52               	movlw	82
  7129   0030B6  ECE5  F019         	call	_I2C_2_Master_Write
  7130                           
  7131                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  7132   0030BA  0EB8               	movlw	184
  7133   0030BC  ECE5  F019         	call	_I2C_2_Master_Write
  7134                           
  7135                           ;color.c: 49:  I2C_2_Master_RepStart();
  7136   0030C0  ECF5  F019         	call	_I2C_2_Master_RepStart	;wreg free
  7137                           
  7138                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  7139   0030C4  0E53               	movlw	83
  7140   0030C6  ECE5  F019         	call	_I2C_2_Master_Write
  7141                           
  7142                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  7143   0030CA  0E01               	movlw	1
  7144   0030CC  ECCA  F018         	call	_I2C_2_Master_Read
  7145   0030D0  6E0A               	movwf	??_color_read_Green^0,c
  7146   0030D2  500A               	movf	??_color_read_Green^0,w,c
  7147   0030D4  6E0D               	movwf	color_read_Green@tmp^0,c
  7148   0030D6  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  7149                           
  7150                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7151   0030D8  0E00               	movlw	0
  7152   0030DA  ECCA  F018         	call	_I2C_2_Master_Read
  7153   0030DE  6E0A               	movwf	??_color_read_Green^0,c
  7154   0030E0  500A               	movf	??_color_read_Green^0,w,c
  7155   0030E2  6E0C               	movwf	(??_color_read_Green+2)^0,c
  7156   0030E4  6A0B               	clrf	(??_color_read_Green+1)^0,c
  7157   0030E6  500D               	movf	color_read_Green@tmp^0,w,c
  7158   0030E8  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  7159   0030EA  6E0D               	movwf	color_read_Green@tmp^0,c
  7160   0030EC  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  7161   0030EE  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  7162   0030F0  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  7163                           
  7164                           ;color.c: 53:  I2C_2_Master_Stop();
  7165   0030F2  ECEB  F019         	call	_I2C_2_Master_Stop	;wreg free
  7166   0030F6                     
  7167                           ;color.c: 54:  return tmp;
  7168   0030F6  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  7169   0030FA  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  7170   0030FE  0012               	return		;funcret
  7171   003100                     __end_of_color_read_Green:
  7172                           	callstack 0
  7173                           
  7174 ;; *************** function _color_read_Blue *****************
  7175 ;; Defined at:
  7176 ;;		line 57 in file "color.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;		None
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  tmp             2   12[COMRAM] unsigned int 
  7181 ;; Return value:  Size  Location     Type
  7182 ;;                  2    7[COMRAM] unsigned int 
  7183 ;; Registers used:
  7184 ;;		wreg, status,2, status,0, cstack
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7191 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7192 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7193 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7194 ;;Total ram usage:        7 bytes
  7195 ;; Hardware stack levels used: 1
  7196 ;; Hardware stack levels required when called: 3
  7197 ;; This function calls:
  7198 ;;		_I2C_2_Master_Read
  7199 ;;		_I2C_2_Master_RepStart
  7200 ;;		_I2C_2_Master_Start
  7201 ;;		_I2C_2_Master_Stop
  7202 ;;		_I2C_2_Master_Write
  7203 ;; This function is called by:
  7204 ;;		_main
  7205 ;;		_collect_avg_readings
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	text36
  7210   003100                     __ptext36:
  7211                           	callstack 0
  7212   003100                     _color_read_Blue:
  7213                           	callstack 27
  7214   003100                     
  7215                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  7216   003100  ECF0  F019         	call	_I2C_2_Master_Start	;wreg free
  7217                           
  7218                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  7219   003104  0E52               	movlw	82
  7220   003106  ECE5  F019         	call	_I2C_2_Master_Write
  7221                           
  7222                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  7223   00310A  0EBA               	movlw	186
  7224   00310C  ECE5  F019         	call	_I2C_2_Master_Write
  7225                           
  7226                           ;color.c: 63:  I2C_2_Master_RepStart();
  7227   003110  ECF5  F019         	call	_I2C_2_Master_RepStart	;wreg free
  7228                           
  7229                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  7230   003114  0E53               	movlw	83
  7231   003116  ECE5  F019         	call	_I2C_2_Master_Write
  7232                           
  7233                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  7234   00311A  0E01               	movlw	1
  7235   00311C  ECCA  F018         	call	_I2C_2_Master_Read
  7236   003120  6E0A               	movwf	??_color_read_Blue^0,c
  7237   003122  500A               	movf	??_color_read_Blue^0,w,c
  7238   003124  6E0D               	movwf	color_read_Blue@tmp^0,c
  7239   003126  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  7240                           
  7241                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7242   003128  0E00               	movlw	0
  7243   00312A  ECCA  F018         	call	_I2C_2_Master_Read
  7244   00312E  6E0A               	movwf	??_color_read_Blue^0,c
  7245   003130  500A               	movf	??_color_read_Blue^0,w,c
  7246   003132  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  7247   003134  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  7248   003136  500D               	movf	color_read_Blue@tmp^0,w,c
  7249   003138  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  7250   00313A  6E0D               	movwf	color_read_Blue@tmp^0,c
  7251   00313C  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  7252   00313E  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  7253   003140  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  7254                           
  7255                           ;color.c: 67:  I2C_2_Master_Stop();
  7256   003142  ECEB  F019         	call	_I2C_2_Master_Stop	;wreg free
  7257   003146                     
  7258                           ;color.c: 68:  return tmp;
  7259   003146  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  7260   00314A  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  7261   00314E  0012               	return		;funcret
  7262   003150                     __end_of_color_read_Blue:
  7263                           	callstack 0
  7264                           
  7265 ;; *************** function _I2C_2_Master_Write *****************
  7266 ;; Defined at:
  7267 ;;		line 45 in file "i2c.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  data_byte       1    wreg     unsigned char 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  data_byte       1    4[COMRAM] unsigned char 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7285 ;;Total ram usage:        1 bytes
  7286 ;; Hardware stack levels used: 1
  7287 ;; Hardware stack levels required when called: 2
  7288 ;; This function calls:
  7289 ;;		_I2C_2_Master_Idle
  7290 ;; This function is called by:
  7291 ;;		_color_writetoaddr
  7292 ;;		_color_read_Red
  7293 ;;		_color_read_Green
  7294 ;;		_color_read_Blue
  7295 ;;		_color_read_Clear
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text37
  7300   0033CA                     __ptext37:
  7301                           	callstack 0
  7302   0033CA                     _I2C_2_Master_Write:
  7303                           	callstack 27
  7304                           
  7305                           ;incstack = 0
  7306                           ;I2C_2_Master_Write@data_byte stored from wreg
  7307   0033CA  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  7308   0033CC                     
  7309                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7310   0033CC  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7311   0033D0                     
  7312                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7313   0033D0  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7314   0033D4  0012               	return		;funcret
  7315   0033D6                     __end_of_I2C_2_Master_Write:
  7316                           	callstack 0
  7317                           
  7318 ;; *************** function _I2C_2_Master_Stop *****************
  7319 ;; Defined at:
  7320 ;;		line 39 in file "i2c.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;		None
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      void 
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7338 ;;Total ram usage:        0 bytes
  7339 ;; Hardware stack levels used: 1
  7340 ;; Hardware stack levels required when called: 2
  7341 ;; This function calls:
  7342 ;;		_I2C_2_Master_Idle
  7343 ;; This function is called by:
  7344 ;;		_color_writetoaddr
  7345 ;;		_color_read_Red
  7346 ;;		_color_read_Green
  7347 ;;		_color_read_Blue
  7348 ;;		_color_read_Clear
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           	psect	text38
  7353   0033D6                     __ptext38:
  7354                           	callstack 0
  7355   0033D6                     _I2C_2_Master_Stop:
  7356                           	callstack 27
  7357   0033D6                     
  7358                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7359   0033D6  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7360   0033DA                     
  7361                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7362   0033DA  010E               	movlb	14	; () banked
  7363   0033DC  85DA               	bsf	218,2,b	;volatile
  7364   0033DE                     
  7365                           ; BSR set to: 14
  7366   0033DE  0012               	return		;funcret
  7367   0033E0                     __end_of_I2C_2_Master_Stop:
  7368                           	callstack 0
  7369                           
  7370 ;; *************** function _I2C_2_Master_Start *****************
  7371 ;; Defined at:
  7372 ;;		line 27 in file "i2c.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7390 ;;Total ram usage:        0 bytes
  7391 ;; Hardware stack levels used: 1
  7392 ;; Hardware stack levels required when called: 2
  7393 ;; This function calls:
  7394 ;;		_I2C_2_Master_Idle
  7395 ;; This function is called by:
  7396 ;;		_color_writetoaddr
  7397 ;;		_color_read_Red
  7398 ;;		_color_read_Green
  7399 ;;		_color_read_Blue
  7400 ;;		_color_read_Clear
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text39
  7405   0033E0                     __ptext39:
  7406                           	callstack 0
  7407   0033E0                     _I2C_2_Master_Start:
  7408                           	callstack 27
  7409   0033E0                     
  7410                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7411   0033E0  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7412   0033E4                     
  7413                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7414   0033E4  010E               	movlb	14	; () banked
  7415   0033E6  81DA               	bsf	218,0,b	;volatile
  7416   0033E8                     
  7417                           ; BSR set to: 14
  7418   0033E8  0012               	return		;funcret
  7419   0033EA                     __end_of_I2C_2_Master_Start:
  7420                           	callstack 0
  7421                           
  7422 ;; *************** function _I2C_2_Master_RepStart *****************
  7423 ;; Defined at:
  7424 ;;		line 33 in file "i2c.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;		None
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;		None
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  1    wreg      void 
  7431 ;; Registers used:
  7432 ;;		wreg, status,2, status,0, cstack
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7442 ;;Total ram usage:        0 bytes
  7443 ;; Hardware stack levels used: 1
  7444 ;; Hardware stack levels required when called: 2
  7445 ;; This function calls:
  7446 ;;		_I2C_2_Master_Idle
  7447 ;; This function is called by:
  7448 ;;		_color_read_Red
  7449 ;;		_color_read_Green
  7450 ;;		_color_read_Blue
  7451 ;;		_color_read_Clear
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           	psect	text40
  7456   0033EA                     __ptext40:
  7457                           	callstack 0
  7458   0033EA                     _I2C_2_Master_RepStart:
  7459                           	callstack 27
  7460   0033EA                     
  7461                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7462   0033EA  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7463   0033EE                     
  7464                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7465   0033EE  010E               	movlb	14	; () banked
  7466   0033F0  83DA               	bsf	218,1,b	;volatile
  7467   0033F2                     
  7468                           ; BSR set to: 14
  7469   0033F2  0012               	return		;funcret
  7470   0033F4                     __end_of_I2C_2_Master_RepStart:
  7471                           	callstack 0
  7472                           
  7473 ;; *************** function _I2C_2_Master_Read *****************
  7474 ;; Defined at:
  7475 ;;		line 51 in file "i2c.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  ack             1    wreg     unsigned char 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  ack             1    5[COMRAM] unsigned char 
  7480 ;;  tmp             1    6[COMRAM] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      unsigned char 
  7483 ;; Registers used:
  7484 ;;		wreg, status,2, status,0, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7491 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7492 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7493 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7494 ;;Total ram usage:        3 bytes
  7495 ;; Hardware stack levels used: 1
  7496 ;; Hardware stack levels required when called: 2
  7497 ;; This function calls:
  7498 ;;		_I2C_2_Master_Idle
  7499 ;; This function is called by:
  7500 ;;		_color_read_Red
  7501 ;;		_color_read_Green
  7502 ;;		_color_read_Blue
  7503 ;;		_color_read_Clear
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text41
  7508   003194                     __ptext41:
  7509                           	callstack 0
  7510   003194                     _I2C_2_Master_Read:
  7511                           	callstack 27
  7512                           
  7513                           ; BSR set to: 14
  7514                           ;incstack = 0
  7515                           ;I2C_2_Master_Read@ack stored from wreg
  7516   003194  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  7517   003196                     
  7518                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7519   003196  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7520   00319A                     
  7521                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7522   00319A  010E               	movlb	14	; () banked
  7523   00319C  87DA               	bsf	218,3,b	;volatile
  7524                           
  7525                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7526   00319E  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7527   0031A2                     
  7528                           ;i2c.c: 57:   tmp = SSP2BUF;
  7529   0031A2  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7530                           
  7531                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7532   0031A6  EC92  F019         	call	_I2C_2_Master_Idle	;wreg free
  7533   0031AA                     
  7534                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7535   0031AA  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  7536   0031AC  B4D8               	btfsc	status,2,c
  7537   0031AE  EFDB  F018         	goto	u1251
  7538   0031B2  EFDF  F018         	goto	u1250
  7539   0031B6                     u1251:
  7540   0031B6  6A05               	clrf	??_I2C_2_Master_Read^0,c
  7541   0031B8  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  7542   0031BA  EFE0  F018         	goto	u1268
  7543   0031BE                     u1250:
  7544   0031BE  6A05               	clrf	??_I2C_2_Master_Read^0,c
  7545   0031C0                     u1268:
  7546   0031C0  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  7547   0031C2  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  7548   0031C4  010E               	movlb	14	; () banked
  7549   0031C6  51DA               	movf	218,w,b	;volatile
  7550   0031C8  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  7551   0031CA  0BDF               	andlw	-33
  7552   0031CC  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  7553   0031CE  6FDA               	movwf	218,b	;volatile
  7554   0031D0                     
  7555                           ; BSR set to: 14
  7556                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7557   0031D0  89DA               	bsf	218,4,b	;volatile
  7558   0031D2                     
  7559                           ; BSR set to: 14
  7560                           ;i2c.c: 61:   return tmp;
  7561   0031D2  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  7562   0031D4                     
  7563                           ; BSR set to: 14
  7564   0031D4  0012               	return		;funcret
  7565   0031D6                     __end_of_I2C_2_Master_Read:
  7566                           	callstack 0
  7567                           
  7568 ;; *************** function _I2C_2_Master_Idle *****************
  7569 ;; Defined at:
  7570 ;;		line 22 in file "i2c.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;		None
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7586 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;Total ram usage:        1 bytes
  7589 ;; Hardware stack levels used: 1
  7590 ;; Hardware stack levels required when called: 1
  7591 ;; This function calls:
  7592 ;;		Nothing
  7593 ;; This function is called by:
  7594 ;;		_I2C_2_Master_Start
  7595 ;;		_I2C_2_Master_RepStart
  7596 ;;		_I2C_2_Master_Stop
  7597 ;;		_I2C_2_Master_Write
  7598 ;;		_I2C_2_Master_Read
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text42
  7603   003324                     __ptext42:
  7604                           	callstack 0
  7605   003324                     _I2C_2_Master_Idle:
  7606                           	callstack 27
  7607   003324                     l145:
  7608   003324  010E               	movlb	14	; () banked
  7609   003326  B5D8               	btfsc	216,2,b	;volatile
  7610   003328  EF98  F019         	goto	u1131
  7611   00332C  EF9A  F019         	goto	u1130
  7612   003330                     u1131:
  7613   003330  EF92  F019         	goto	l145
  7614   003334                     u1130:
  7615   003334                     
  7616                           ; BSR set to: 14
  7617   003334  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7618   003338  0E1F               	movlw	31
  7619   00333A  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  7620   00333C  A4D8               	btfss	status,2,c
  7621   00333E  EFA3  F019         	goto	u1141
  7622   003342  EFA5  F019         	goto	u1140
  7623   003346                     u1141:
  7624   003346  EF92  F019         	goto	l145
  7625   00334A                     u1140:
  7626   00334A                     
  7627                           ; BSR set to: 14
  7628   00334A  0012               	return		;funcret
  7629   00334C                     __end_of_I2C_2_Master_Idle:
  7630                           	callstack 0
  7631                           
  7632 ;; *************** function ___lwdiv *****************
  7633 ;; Defined at:
  7634 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  dividend        2    9[COMRAM] unsigned int 
  7637 ;;  divisor         2   11[COMRAM] unsigned int 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  quotient        2   13[COMRAM] unsigned int 
  7640 ;;  counter         1   15[COMRAM] unsigned char 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  2    9[COMRAM] unsigned int 
  7643 ;; Registers used:
  7644 ;;		wreg, status,2, status,0
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7653 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7654 ;;Total ram usage:        7 bytes
  7655 ;; Hardware stack levels used: 1
  7656 ;; Hardware stack levels required when called: 1
  7657 ;; This function calls:
  7658 ;;		Nothing
  7659 ;; This function is called by:
  7660 ;;		_setMotorPWM
  7661 ;;		_collect_avg_readings
  7662 ;;		_normalise_readings
  7663 ;;		_make_master_closeness
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text43
  7668   002EF6                     __ptext43:
  7669                           	callstack 0
  7670   002EF6                     ___lwdiv:
  7671                           	callstack 27
  7672   002EF6  0E00               	movlw	0
  7673   002EF8  6E0F               	movwf	(___lwdiv@quotient+1)^0,c
  7674   002EFA  0E00               	movlw	0
  7675   002EFC  6E0E               	movwf	___lwdiv@quotient^0,c
  7676   002EFE  500C               	movf	___lwdiv@divisor^0,w,c
  7677   002F00  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7678   002F02  B4D8               	btfsc	status,2,c
  7679   002F04  EF86  F017         	goto	u1061
  7680   002F08  EF88  F017         	goto	u1060
  7681   002F0C                     u1061:
  7682   002F0C  EFB0  F017         	goto	l988
  7683   002F10                     u1060:
  7684   002F10  0E01               	movlw	1
  7685   002F12  6E10               	movwf	___lwdiv@counter^0,c
  7686   002F14  EF90  F017         	goto	l2477
  7687   002F18                     l2475:
  7688   002F18  90D8               	bcf	status,0,c
  7689   002F1A  360C               	rlcf	___lwdiv@divisor^0,f,c
  7690   002F1C  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7691   002F1E  2A10               	incf	___lwdiv@counter^0,f,c
  7692   002F20                     l2477:
  7693   002F20  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7694   002F22  EF95  F017         	goto	u1071
  7695   002F26  EF97  F017         	goto	u1070
  7696   002F2A                     u1071:
  7697   002F2A  EF8C  F017         	goto	l2475
  7698   002F2E                     u1070:
  7699   002F2E                     l2479:
  7700   002F2E  90D8               	bcf	status,0,c
  7701   002F30  360E               	rlcf	___lwdiv@quotient^0,f,c
  7702   002F32  360F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7703   002F34  500C               	movf	___lwdiv@divisor^0,w,c
  7704   002F36  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7705   002F38  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7706   002F3A  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7707   002F3C  A0D8               	btfss	status,0,c
  7708   002F3E  EFA3  F017         	goto	u1081
  7709   002F42  EFA5  F017         	goto	u1080
  7710   002F46                     u1081:
  7711   002F46  EFAA  F017         	goto	l2487
  7712   002F4A                     u1080:
  7713   002F4A  500C               	movf	___lwdiv@divisor^0,w,c
  7714   002F4C  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7715   002F4E  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7716   002F50  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7717   002F52  800E               	bsf	___lwdiv@quotient^0,0,c
  7718   002F54                     l2487:
  7719   002F54  90D8               	bcf	status,0,c
  7720   002F56  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7721   002F58  320C               	rrcf	___lwdiv@divisor^0,f,c
  7722   002F5A  2E10               	decfsz	___lwdiv@counter^0,f,c
  7723   002F5C  EF97  F017         	goto	l2479
  7724   002F60                     l988:
  7725   002F60  C00E  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7726   002F64  C00F  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7727   002F68  0012               	return		;funcret
  7728   002F6A                     __end_of___lwdiv:
  7729                           	callstack 0
  7730                           
  7731 ;; *************** function _LEDSon_init *****************
  7732 ;; Defined at:
  7733 ;;		line 18 in file "LEDsOn.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;		None
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;		None
  7738 ;; Return value:  Size  Location     Type
  7739 ;;                  1    wreg      void 
  7740 ;; Registers used:
  7741 ;;		None
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7751 ;;Total ram usage:        0 bytes
  7752 ;; Hardware stack levels used: 1
  7753 ;; Hardware stack levels required when called: 1
  7754 ;; This function calls:
  7755 ;;		Nothing
  7756 ;; This function is called by:
  7757 ;;		_main
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           	psect	text44
  7762   0032D0                     __ptext44:
  7763                           	callstack 0
  7764   0032D0                     _LEDSon_init:
  7765                           	callstack 29
  7766   0032D0                     
  7767                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7768   0032D0  9288               	bcf	136,1,c	;volatile
  7769                           
  7770                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7771   0032D2  9088               	bcf	136,0,c	;volatile
  7772                           
  7773                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7774   0032D4  9884               	bcf	132,4,c	;volatile
  7775                           
  7776                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7777   0032D6  9684               	bcf	132,3,c	;volatile
  7778                           
  7779                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7780   0032D8  9086               	bcf	134,0,c	;volatile
  7781                           
  7782                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7783   0032DA  9287               	bcf	135,1,c	;volatile
  7784                           
  7785                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7786   0032DC  9E86               	bcf	134,7,c	;volatile
  7787                           
  7788                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7789   0032DE  9881               	bcf	129,4,c	;volatile
  7790                           
  7791                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7792   0032E0  8E7E               	bsf	126,7,c	;volatile
  7793                           
  7794                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7795   0032E2  827F               	bsf	127,1,c	;volatile
  7796                           
  7797                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7798   0032E4  8879               	bsf	121,4,c	;volatile
  7799                           
  7800                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7801   0032E6  987C               	bcf	124,4,c	;volatile
  7802                           
  7803                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7804   0032E8  9280               	bcf	128,1,c	;volatile
  7805                           
  7806                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7807   0032EA  907E               	bcf	126,0,c	;volatile
  7808                           
  7809                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7810   0032EC  9080               	bcf	128,0,c	;volatile
  7811                           
  7812                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7813   0032EE  967C               	bcf	124,3,c	;volatile
  7814                           
  7815                           ;LEDsOn.c: 44:     TRISHbits.TRISH3 = 0;
  7816   0032F0  9688               	bcf	136,3,c	;volatile
  7817                           
  7818                           ;LEDsOn.c: 45:     LATHbits.LATH3=0;
  7819   0032F2  9680               	bcf	128,3,c	;volatile
  7820                           
  7821                           ;LEDsOn.c: 46:     TRISDbits.TRISD7 = 0;
  7822   0032F4  9E84               	bcf	132,7,c	;volatile
  7823                           
  7824                           ;LEDsOn.c: 47:     LATDbits.LATD7=0;
  7825   0032F6  9E7C               	bcf	124,7,c	;volatile
  7826   0032F8  0012               	return		;funcret
  7827   0032FA                     __end_of_LEDSon_init:
  7828                           	callstack 0
  7829                           
  7830 ;; *************** function _Interrupts_init *****************
  7831 ;; Defined at:
  7832 ;;		line 7 in file "interrupts.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;		None
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;		None
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      void 
  7839 ;; Registers used:
  7840 ;;		wreg, status,2
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7850 ;;Total ram usage:        0 bytes
  7851 ;; Hardware stack levels used: 1
  7852 ;; Hardware stack levels required when called: 1
  7853 ;; This function calls:
  7854 ;;		Nothing
  7855 ;; This function is called by:
  7856 ;;		_main
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           	psect	text45
  7861   0032FA                     __ptext45:
  7862                           	callstack 0
  7863   0032FA                     _Interrupts_init:
  7864                           	callstack 29
  7865   0032FA                     
  7866                           ;interrupts.c: 10:     TMR0IE=1;
  7867   0032FA  010E               	movlb	14	; () banked
  7868   0032FC  8B29               	bsf	41,5,b	;volatile
  7869   0032FE                     
  7870                           ; BSR set to: 14
  7871                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  7872   0032FE  50D6               	movf	214,w,c	;volatile
  7873   003300  0B1F               	andlw	-225
  7874   003302  0940               	iorlw	64
  7875   003304  6ED6               	movwf	214,c	;volatile
  7876   003306                     
  7877                           ; BSR set to: 14
  7878                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  7879   003306  88D6               	bsf	214,4,c	;volatile
  7880                           
  7881                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  7882   003308  50D6               	movf	214,w,c	;volatile
  7883   00330A  0BF0               	andlw	-16
  7884   00330C  0905               	iorlw	5
  7885   00330E  6ED6               	movwf	214,c	;volatile
  7886   003310                     
  7887                           ; BSR set to: 14
  7888                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  7889   003310  88D5               	bsf	213,4,c	;volatile
  7890   003312                     
  7891                           ; BSR set to: 14
  7892                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  7893   003312  9B1F               	bcf	31,5,b	;volatile
  7894                           
  7895                           ;interrupts.c: 16:     TMR0H=0b00111100;
  7896   003314  0E3C               	movlw	60
  7897   003316  6ED4               	movwf	212,c	;volatile
  7898                           
  7899                           ;interrupts.c: 17:     TMR0L=0b10101111;
  7900   003318  0EAF               	movlw	175
  7901   00331A  6ED3               	movwf	211,c	;volatile
  7902   00331C                     
  7903                           ; BSR set to: 14
  7904                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  7905   00331C  8ED5               	bsf	213,7,c	;volatile
  7906   00331E                     
  7907                           ; BSR set to: 14
  7908                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  7909   00331E  8CF2               	bsf	242,6,c	;volatile
  7910   003320                     
  7911                           ; BSR set to: 14
  7912                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  7913   003320  8EF2               	bsf	242,7,c	;volatile
  7914   003322                     
  7915                           ; BSR set to: 14
  7916   003322  0012               	return		;funcret
  7917   003324                     __end_of_Interrupts_init:
  7918                           	callstack 0
  7919                           
  7920 ;; *************** function _LowISR *****************
  7921 ;; Defined at:
  7922 ;;		line 24 in file "interrupts.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;		None
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7939 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7940 ;;Total ram usage:        3 bytes
  7941 ;; Hardware stack levels used: 1
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		Interrupt level 1
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	intcodelo
  7950   000018                     __pintcodelo:
  7951                           	callstack 0
  7952   000018                     _LowISR:
  7953                           	callstack 21
  7954                           
  7955                           ; BSR set to: 14
  7956                           ;incstack = 0
  7957   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7958   00001A  CFD8 F001          	movff	status,??_LowISR
  7959   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  7960   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  7961   000026                     
  7962                           ;interrupts.c: 27:     if(TMR0IF){
  7963   000026  010E               	movlb	14	; () banked
  7964   000028  AB33               	btfss	51,5,b	;volatile
  7965   00002A  EF19  F000         	goto	i1u168_21
  7966   00002E  EF1B  F000         	goto	i1u168_20
  7967   000032                     i1u168_21:
  7968   000032  EF26  F000         	goto	i1l494
  7969   000036                     i1u168_20:
  7970   000036                     
  7971                           ; BSR set to: 14
  7972                           ;interrupts.c: 28:     TMR0H=0b00111100;
  7973   000036  0E3C               	movlw	60
  7974   000038  6ED4               	movwf	212,c	;volatile
  7975                           
  7976                           ;interrupts.c: 29:     TMR0L=0b10101111;
  7977   00003A  0EAF               	movlw	175
  7978   00003C  6ED3               	movwf	211,c	;volatile
  7979                           
  7980                           ;interrupts.c: 34:         TimerFlag=1;
  7981   00003E  0E00               	movlw	0
  7982   000040  0101               	movlb	1	; () banked
  7983   000042  6FF8               	movwf	(_TimerFlag+1)& (0+255),b
  7984   000044  0E01               	movlw	1
  7985   000046  6FF7               	movwf	_TimerFlag& (0+255),b
  7986   000048                     
  7987                           ; BSR set to: 1
  7988                           ;interrupts.c: 36:        TMR0IF=0;
  7989   000048  010E               	movlb	14	; () banked
  7990   00004A  9B33               	bcf	51,5,b	;volatile
  7991   00004C                     i1l494:
  7992                           
  7993                           ; BSR set to: 14
  7994   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  7995   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  7996   000054  C001  FFD8         	movff	??_LowISR,status
  7997   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7998   00005A  0010               	retfie	
  7999   00005C                     __end_of_LowISR:
  8000                           	callstack 0
  8001                           
  8002                           	psect	rparam
  8003   000000                     
  8004                           	psect	temp
  8005   00005B                     btemp:
  8006                           	callstack 0
  8007   00005B                     	ds	1
  8008   000000                     int$flags	set	btemp
  8009   000000                     wtemp8	set	btemp+1
  8010   000000                     ttemp5	set	btemp+1
  8011   000000                     ttemp6	set	btemp+4
  8012   000000                     ttemp7	set	btemp+8
  8013                           
  8014                           	psect	idloc
  8015                           
  8016                           ;Config register IDLOC0 @ 0x200000
  8017                           ;	unspecified, using default values
  8018   200000                     	org	2097152
  8019   200000  0FFF               	dw	4095
  8020                           
  8021                           ;Config register IDLOC1 @ 0x200002
  8022                           ;	unspecified, using default values
  8023   200002                     	org	2097154
  8024   200002  0FFF               	dw	4095
  8025                           
  8026                           ;Config register IDLOC2 @ 0x200004
  8027                           ;	unspecified, using default values
  8028   200004                     	org	2097156
  8029   200004  0FFF               	dw	4095
  8030                           
  8031                           ;Config register IDLOC3 @ 0x200006
  8032                           ;	unspecified, using default values
  8033   200006                     	org	2097158
  8034   200006  0FFF               	dw	4095
  8035                           
  8036                           ;Config register IDLOC4 @ 0x200008
  8037                           ;	unspecified, using default values
  8038   200008                     	org	2097160
  8039   200008  0FFF               	dw	4095
  8040                           
  8041                           ;Config register IDLOC5 @ 0x20000A
  8042                           ;	unspecified, using default values
  8043   20000A                     	org	2097162
  8044   20000A  0FFF               	dw	4095
  8045                           
  8046                           ;Config register IDLOC6 @ 0x20000C
  8047                           ;	unspecified, using default values
  8048   20000C                     	org	2097164
  8049   20000C  0FFF               	dw	4095
  8050                           
  8051                           ;Config register IDLOC7 @ 0x20000E
  8052                           ;	unspecified, using default values
  8053   20000E                     	org	2097166
  8054   20000E  0FFF               	dw	4095
  8055                           
  8056                           	psect	config
  8057                           
  8058                           ;Config register CONFIG1L @ 0x300000
  8059                           ;	External Oscillator mode Selection bits
  8060                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8061                           ;	Power-up default value for COSC bits
  8062                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8063   300000                     	org	3145728
  8064   300000  AA                 	db	170
  8065                           
  8066                           ;Config register CONFIG1H @ 0x300001
  8067                           ;	unspecified, using default values
  8068                           ;	Clock Out Enable bit
  8069                           ;	CLKOUTEN = 0x1, unprogrammed default
  8070                           ;	Clock Switch Enable bit
  8071                           ;	CSWEN = 0x1, unprogrammed default
  8072                           ;	Fail-Safe Clock Monitor Enable bit
  8073                           ;	FCMEN = 0x1, unprogrammed default
  8074   300001                     	org	3145729
  8075   300001  FF                 	db	255
  8076                           
  8077                           ;Config register CONFIG2L @ 0x300002
  8078                           ;	unspecified, using default values
  8079                           ;	Master Clear Enable bit
  8080                           ;	MCLRE = 0x1, unprogrammed default
  8081                           ;	Power-up Timer Enable bit
  8082                           ;	PWRTE = 0x1, unprogrammed default
  8083                           ;	Low-power BOR enable bit
  8084                           ;	LPBOREN = 0x1, unprogrammed default
  8085                           ;	Brown-out Reset Enable bits
  8086                           ;	BOREN = 0x3, unprogrammed default
  8087   300002                     	org	3145730
  8088   300002  FF                 	db	255
  8089                           
  8090                           ;Config register CONFIG2H @ 0x300003
  8091                           ;	unspecified, using default values
  8092                           ;	Brown Out Reset Voltage selection bits
  8093                           ;	BORV = 0x3, unprogrammed default
  8094                           ;	ZCD Disable bit
  8095                           ;	ZCD = 0x1, unprogrammed default
  8096                           ;	PPSLOCK bit One-Way Set Enable bit
  8097                           ;	PPS1WAY = 0x1, unprogrammed default
  8098                           ;	Stack Full/Underflow Reset Enable bit
  8099                           ;	STVREN = 0x1, unprogrammed default
  8100                           ;	Debugger Enable bit
  8101                           ;	DEBUG = 0x1, unprogrammed default
  8102                           ;	Extended Instruction Set Enable bit
  8103                           ;	XINST = 0x1, unprogrammed default
  8104   300003                     	org	3145731
  8105   300003  FF                 	db	255
  8106                           
  8107                           ;Config register CONFIG3L @ 0x300004
  8108                           ;	WDT Period Select bits
  8109                           ;	WDTCPS = 0x1F, unprogrammed default
  8110                           ;	WDT operating mode
  8111                           ;	WDTE = OFF, WDT Disabled
  8112   300004                     	org	3145732
  8113   300004  9F                 	db	159
  8114                           
  8115                           ;Config register CONFIG3H @ 0x300005
  8116                           ;	unspecified, using default values
  8117                           ;	WDT Window Select bits
  8118                           ;	WDTCWS = 0x7, unprogrammed default
  8119                           ;	WDT input clock selector
  8120                           ;	WDTCCS = 0x7, unprogrammed default
  8121   300005                     	org	3145733
  8122   300005  FF                 	db	255
  8123                           
  8124                           ;Config register CONFIG4L @ 0x300006
  8125                           ;	unspecified, using default values
  8126                           ;	Write Protection Block 0
  8127                           ;	WRT0 = 0x1, unprogrammed default
  8128                           ;	Write Protection Block 1
  8129                           ;	WRT1 = 0x1, unprogrammed default
  8130                           ;	Write Protection Block 2
  8131                           ;	WRT2 = 0x1, unprogrammed default
  8132                           ;	Write Protection Block 3
  8133                           ;	WRT3 = 0x1, unprogrammed default
  8134                           ;	Write Protection Block 3
  8135                           ;	WRT4 = 0x1, unprogrammed default
  8136                           ;	Write Protection Block 3
  8137                           ;	WRT5 = 0x1, unprogrammed default
  8138                           ;	Write Protection Block 3
  8139                           ;	WRT6 = 0x1, unprogrammed default
  8140                           ;	Write Protection Block 3
  8141                           ;	WRT7 = 0x1, unprogrammed default
  8142   300006                     	org	3145734
  8143   300006  FF                 	db	255
  8144                           
  8145                           ;Config register CONFIG4H @ 0x300007
  8146                           ;	unspecified, using default values
  8147                           ;	Configuration Register Write Protection bit
  8148                           ;	WRTC = 0x1, unprogrammed default
  8149                           ;	Boot Block Write Protection bit
  8150                           ;	WRTB = 0x1, unprogrammed default
  8151                           ;	Data EEPROM Write Protection bit
  8152                           ;	WRTD = 0x1, unprogrammed default
  8153                           ;	Scanner Enable bit
  8154                           ;	SCANE = 0x1, unprogrammed default
  8155                           ;	Low Voltage Programming Enable bit
  8156                           ;	LVP = 0x1, unprogrammed default
  8157   300007                     	org	3145735
  8158   300007  FF                 	db	255
  8159                           
  8160                           ;Config register CONFIG5L @ 0x300008
  8161                           ;	unspecified, using default values
  8162                           ;	UserNVM Program Memory Code Protection bit
  8163                           ;	CP = 0x1, unprogrammed default
  8164                           ;	DataNVM Memory Code Protection bit
  8165                           ;	CPD = 0x1, unprogrammed default
  8166   300008                     	org	3145736
  8167   300008  FF                 	db	255
  8168                           
  8169                           ;Config register CONFIG5H @ 0x300009
  8170                           ;	unspecified, using default values
  8171   300009                     	org	3145737
  8172   300009  FF                 	db	255
  8173                           
  8174                           ;Config register CONFIG6L @ 0x30000A
  8175                           ;	unspecified, using default values
  8176                           ;	Table Read Protection Block 0
  8177                           ;	EBTR0 = 0x1, unprogrammed default
  8178                           ;	Table Read Protection Block 1
  8179                           ;	EBTR1 = 0x1, unprogrammed default
  8180                           ;	Table Read Protection Block 2
  8181                           ;	EBTR2 = 0x1, unprogrammed default
  8182                           ;	Table Read Protection Block 3
  8183                           ;	EBTR3 = 0x1, unprogrammed default
  8184                           ;	Table Read Protection Block 4
  8185                           ;	EBTR4 = 0x1, unprogrammed default
  8186                           ;	Table Read Protection Block 5
  8187                           ;	EBTR5 = 0x1, unprogrammed default
  8188                           ;	Table Read Protection Block 6
  8189                           ;	EBTR6 = 0x1, unprogrammed default
  8190                           ;	Table Read Protection Block 7
  8191                           ;	EBTR7 = 0x1, unprogrammed default
  8192   30000A                     	org	3145738
  8193   30000A  FF                 	db	255
  8194                           
  8195                           ;Config register CONFIG6H @ 0x30000B
  8196                           ;	unspecified, using default values
  8197                           ;	Boot Block Table Read Protection bit
  8198                           ;	EBTRB = 0x1, unprogrammed default
  8199   30000B                     	org	3145739
  8200   30000B  FF                 	db	255
  8201                           tosu	equ	0xFFF
  8202                           tosh	equ	0xFFE
  8203                           tosl	equ	0xFFD
  8204                           stkptr	equ	0xFFC
  8205                           pclatu	equ	0xFFB
  8206                           pclath	equ	0xFFA
  8207                           pcl	equ	0xFF9
  8208                           tblptru	equ	0xFF8
  8209                           tblptrh	equ	0xFF7
  8210                           tblptrl	equ	0xFF6
  8211                           tablat	equ	0xFF5
  8212                           prodh	equ	0xFF4
  8213                           prodl	equ	0xFF3
  8214                           indf0	equ	0xFEF
  8215                           postinc0	equ	0xFEE
  8216                           postdec0	equ	0xFED
  8217                           preinc0	equ	0xFEC
  8218                           plusw0	equ	0xFEB
  8219                           fsr0h	equ	0xFEA
  8220                           fsr0l	equ	0xFE9
  8221                           wreg	equ	0xFE8
  8222                           indf1	equ	0xFE7
  8223                           postinc1	equ	0xFE6
  8224                           postdec1	equ	0xFE5
  8225                           preinc1	equ	0xFE4
  8226                           plusw1	equ	0xFE3
  8227                           fsr1h	equ	0xFE2
  8228                           fsr1l	equ	0xFE1
  8229                           bsr	equ	0xFE0
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           preinc2	equ	0xFDC
  8234                           plusw2	equ	0xFDB
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8

Data Sizes:
    Strings     96
    Constant    0
    Data        0
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160    157     158
    BANK1           256    243     250
    BANK2           256    114     226
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2465$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2416$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2416$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK2[54]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK1[54]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK1[54]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK2[54]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_read_Clear->_I2C_2_Master_Read
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_home_response
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    _make_master_closeness->___lwdiv
    _collect_avg_readings->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_card_response
    _card_response->_motor_response
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               305   305      0  113609
                                             85 COMRAM     2     2      0
                                            139 BANK0     18    18      0
                                             72 BANK1    171   171      0
                                              0 BANK2    114   114      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
               _collect_avg_readings
                   _color_click_init
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _card_response                                      147    72     75   82406
                                             64 BANK0     75     0     75
                                              0 BANK1     72    72      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    6764
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5558
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    5097
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3877
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     447
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  23    11     12    3420
                                             25 COMRAM    23    11     12
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     370
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      71     7     64   65704
                                             37 COMRAM     7     7      0
                                              0 BANK0     64     0     64
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4875
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        7     3      4   29856
                                             30 COMRAM     7     3      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    6851
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    6243
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   10561
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    4267
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3285
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               27    21      6    1656
                                             16 COMRAM    27    21      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                16    10      6    2449
                                             16 COMRAM    16    10      6
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Green                                     7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Blue                                      7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1206
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   _card_response
     _collect_avg_readings
       ___lwdiv
         ___wmul (ARG)
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
       ___lwdiv
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Blue
   _color_read_Clear
     _I2C_2_Master_Read
     _I2C_2_Master_RepStart
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _color_read_Green
   _color_read_Red
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     72      E2       9       88.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F3      FA       7       97.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9D      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhl     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhl      3      0       0      57        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D4      64        0.0%
DATA                 0      0     2D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Dec 12 20:58:28 2022

                        _color_read_Red 3060                         _color_read_Blue 3100  
                                    l22 33B0                                      l31 314E  
                                    l25 30AE                                      l34 305E  
                                    l19 3248                                      l28 30FE  
                                    l86 24DC                                      l95 2DFA  
                                    l79 2D74                                      bsr 000FE0  
                   ___wmul@multiplicand 0006                        _color_read_Clear 3010  
                      _color_read_Green 30B0                       ??_Interrupts_init 0004  
                                   l100 2BD4                                     l110 2CEC  
                                   l105 2B26                                     l115 2C60  
                                   l142 32CE                                     l151 33E8  
                                   l160 33D4                                     l240 13C0  
                                   l145 3324                                     l241 13BE  
                                   l154 33F2                                     l330 2002  
                                   l242 13CE                                     l163 31D4  
                                   l148 334A                                     l157 33DE  
                                   l325 21E8                                     l341 2E7A  
                                   l335 29AE                                     l417 3390  
                                   l362 1308                                     l426 33B4  
                                   l435 3278                                     l611 2370  
                                   l276 32F8                                     l429 33C8  
                                   l375 1B5C                                     l624 2640  
                                   l378 28DA                                     l488 3322  
                                   l497 3370                                     l995 2F68  
                                   l988 2F60                                     u900 2A32  
                                   u901 2A2E                                     u910 3192  
                                   u911 318E                                     u920 31F0  
                                   u921 31EC                                     u930 21FC  
                                   u931 21F8                                     u940 222E  
                                   u941 222A                                     u870 29C2  
                                   u951 2258                                     u871 29BE  
                                   u960 227C                                     u880 29D4  
                                   u961 2278                                     u881 29D0  
                                   u970 22A6                                     u890 29FC  
                                   u971 22A2                                     u891 29F8  
                                   u980 22E6                                     u981 22E2  
                                   u990 2330                                     u991 232C  
   normalise_readings@normalised_values 0024                        ??_motor_response 0026  
                                   _abs 31D6                                     _pad 2E7C  
                 __end_of_card_response 28DC                                     prod 000FF3  
                                   wreg 000FE8                                    ?_abs 0016  
                                  l1204 2E9E                                    l1213 1BEA  
                                  l1215 1BF2                                    l1208 2EF4  
                                  l1216 1C38                                    l1240 2FBC  
                                  l1234 279E                                    l3003 1030  
                                  l1227 1DDA                                    l1172 320C  
                                  l1252 2A78                                    l1260 3192  
                                  l3021 10B4                                    l3005 1044  
                                  l3101 2CEE                                    l1182 300E  
                                  l3007 105C                                    l1175 3214  
                                  l1263 33F4                                    l3111 2D50  
                                  l3103 2CF6                                    l3009 1088  
                                  l2401 224E                                    l3121 2D72  
                                  l3113 2D5A                                    l3105 2D20  
                                  l3123 32D0                                    l3051 1114  
                                  l3035 10D0                                    l3019 10A0  
                                  l2411 2298                                    l2403 2252  
                                  l3115 2D5C                                    l3107 2D44  
                                  l3131 3380                                    l3141 32FE  
                                  l3061 11F4                                    l3053 11C8  
                                  l3037 10E4                                    l2421 2308  
                                  l2413 22A6                                    l2405 225E  
                                  l2501 2EC2                                    l3117 2D66  
                                  l3109 2D4E                                    l3133 338A  
                                  l3125 3372                                    l3151 331E  
                                  l3143 3306                                    l2511 23F6  
                                  l3071 1258                                    l3063 1208  
                                  l3039 10FC                                    l2423 231A  
                                  l2415 22B8                                    l2407 227C  
                                  l2503 2EE0                                    l3119 2D68  
                                  l3135 338C                                    l3127 337C  
                                  l3153 3320                                    l3145 3310  
                                  l2521 3324                                    l2601 31D0  
                                  l2513 23FA                                    l2505 2372  
                                  l3065 1214                                    l3073 128E  
                                  l2417 22E6                                    l2409 2284  
                                  l2425 2320                                    l2441 2514  
                                  l2433 24DE                                    l2361 29D4  
                                  l3137 338E                                    l3129 337E  
                                  l3147 3312                                    l3139 32FA  
                                  l2523 3334                                    l2603 31D2  
                                  l2515 243C                                    l2507 238E  
                                  l2611 2D86                                    l3075 1294  
                                  l3067 122C                                    l3059 11D0  
                                  l2427 2330                                    l2419 2306  
                                  l2451 257C                                    l2443 2522  
                                  l2435 24E2                                    l2363 29DE  
                                  l2371 3150                                    l2531 1BA2  
                                  l3091 3234                                    l3149 331C  
                                  l2517 2458                                    l2509 23E2  
                                  l2621 2DD6                                    l2613 2D94  
                                  l3069 1230                                    l2381 31F0  
                                  l2429 2350                                    l2453 258A  
                                  l2461 25F0                                    l2445 2542  
                                  l2437 24F0                                    l2365 29FC  
                                  l2357 29B0                                    l2373 315C  
                                  l2541 1C10                                    l2533 1BC2  
                                  l2525 1B5E                                    l2701 26BA  
                                  l3093 323E                                    l3085 3216  
                                  l3501 1336                                    l2471 2EFE  
                                  l2383 334C                                    l2519 249C  
                                  l2623 2DE2                                    l2615 2DA0  
                                  l2607 2D76                                    l3079 12A6  
                                  l2391 21EE                                    l2463 2600  
                                  l2455 25B8                                    l2447 2560  
                                  l2439 2510                                    l2367 2A32  
                                  l2359 29C2                                    l2375 316E  
                                  l2551 1C4A                                    l2543 1C20  
                                  l2535 1BDE                                    l2527 1B7E  
                                  l2703 26DA                                    l3087 321A  
                                  l3095 3010                                    l3511 1354  
                                  l3503 133A                                    l2481 2F34  
                                  l2473 2F10                                    l2721 30A6  
                                  l2385 3368                                    l2617 2DBC  
                                  l2609 2D7A                                    l2641 2B98  
                                  l2633 2B50                                    l2625 2B28  
                                  l2393 21FC                                    l2465 2620  
                                  l2457 25D8                                    l2449 2568  
                                  l2377 3172                                    l2553 1C50  
                                  l2561 1D42                                    l2545 1C2C  
                                  l2537 1BFA                                    l2529 1B92  
                                  l2705 2730                                    l2713 2772  
                                  l3433 2F6A                                    l2801 32B0  
                                  l3089 3224                                    l3097 3056  
                                  l3601 15BE                                    l3521 138A  
                                  l3513 1358                                    l3505 1342  
                                  l2483 2F4A                                    l2475 2F18  
                                  l2731 3100                                    l2619 2DC8  
                                  l2643 2BA0                                    l2635 2B68  
                                  l2627 2B48                                    l2379 31D6  
                                  l2395 221C                                    l2459 25EA  
                                  l2491 2E7C                                    l2571 1DAA  
                                  l2563 1D5C                                    l2555 1CD2  
                                  l2547 1C34                                    l2539 1C0A  
                                  l3435 2F76                                    l3451 2FFC  
                                  l3443 2FBE                                    l2803 32B6  
                                  l2811 3394                                    l3611 1648  
                                  l3603 15DC                                    l3531 13AC  
                                  l3523 1394                                    l3515 136C  
                                  l3507 134A                                    l2485 2F52  
                                  l2477 2F20                                    l2469 2EF6  
                                  l2581 33CC                                    l2733 3146  
                                  l2725 30B0                                    l2821 2048  
                                  l2813 2004                                    l2645 2BBC  
                                  l2637 2B80                                    l2661 2ADE  
                                  l2901 1FF0                                    l2397 2220  
                                  l2389 21EA                                    l2493 2E8A  
                                  l2573 1DBA                                    l2565 1D7A  
                                  l2557 1CD8                                    l2549 1C40  
                                  l2709 2760                                    l3437 2F92  
                                  l3445 2FD0                                    l3461 2802  
                                  l2805 32B8                                    l3621 16DA  
                                  l3613 1654                                    l3605 15F6  
                                  l3541 13EC                                    l3533 13B4  
                                  l3525 139C                                    l3517 1372  
                                  l3509 1350                                    l2487 2F54  
                                  l2479 2F2E                                    l2591 33EE  
                                  l2583 33D0                                    l2727 30F6  
                                  l2719 3060                                    l2831 2070  
                                  l2823 204C                                    l2911 28E0  
                                  l2671 2C82                                    l2639 2B8C  
                                  l2663 2AEA                                    l2655 2AA2  
                                  l2647 2A7A                                    l2751 2C2E  
                                  l2903 1FF2                                    l2399 222E  
                                  l2495 2E96                                    l2567 1D94  
                                  l2559 1CDE                                    l3439 2FB2  
                                  l3447 2FD8                                    l3471 28A0  
                                  l3463 280E                                    l3455 27A0  
                                  l2807 32BA                                    l3631 1712  
                                  l3623 16DE                                    l3615 1662  
                                  l3607 160A                                    l3551 1458  
                                  l3543 1406                                    l3527 13A4  
                                  l3519 137E                                    l2489 2F5A  
                                  l2593 3196                                    l2577 33E0  
                                  l2585 33D6                                    l2841 20E8  
                                  l2833 2084                                    l2825 2068  
                                  l2921 2E10                                    l2913 299C  
                                  l2905 28DC                                    l2681 2CAE  
                                  l2665 2AF2                                    l2657 2ABA  
                                  l2649 2A9A                                    l2761 180A  
                                  l2753 2C3C                                    l2745 2BFE  
                                  l2737 2BD6                                    l2497 2EAA  
                                  l2569 1DA4                                    l3449 2FE0  
                                  l3473 28AC                                    l3465 285A  
                                  l3457 27A0                                    l2809 32BC  
                                  l3641 1784                                    l3633 171E  
                                  l3625 16E6                                    l3617 16BA  
                                  l3609 1618                                    l3561 1474  
                                  l3545 1426                                    l3529 13A4  
                                  l3481 130E                                    l2595 319A  
                                  l2579 33E4                                    l2587 33DA  
                                  l2851 211C                                    l2835 209C  
                                  l2819 200C                                    l2931 2E62  
                                  l2915 299E                                    l2683 2CBA  
                                  l2667 2B0E                                    l2659 2AD2  
                                  l2763 185E                                    l2755 2C44  
                                  l2747 2C16                                    l2739 2BF6  
                                  l2499 2EBE                                    l2691 266A  
                                  l3475 28D6                                    l3467 2876  
                                  l3459 27BC                                    l3635 172A  
                                  l3619 16C8                                    l3627 16FA  
                                  l3571 14A6                                    l3563 1490  
                                  l3547 1446                                    l3539 13D0  
                                  l3491 1322                                    l3483 1312  
                                  l2597 31A2                                    l2589 33EA  
                                  l2853 2120                                    l2837 20A0  
                                  l2933 2E66                                    l2917 2DFC  
                                  l2685 2CC8                                    l2677 2C8A  
                                  l2669 2C62                                    l2773 1A12  
                                  l2765 1902                                    l2757 17B2  
                                  l2749 2C22                                    l2941 0E64  
                                  l2693 2678                                    l3469 2886  
                                  l3637 1760                                    l3629 1706  
                                  l3581 1518                                    l3573 14BE  
                                  l3557 1462                                    l3549 1448  
                                  l3493 1324                                    l3485 1316  
                                  ?_pad 0014                                    l2599 31AA  
                                  l2871 21BC                                    l2863 2170  
                                  l2855 213C                                    l2847 20F0  
                                  l2839 20BC                                    l2935 2E68  
                                  l2927 2E14                                    l2919 2E00  
                                  l2687 2CD0                                    l2679 2CA2  
                                  l2775 1A8E                                    l2767 197A  
                                  l2759 17B6                                    l2951 0EBC  
                                  l2943 0E68                                    l2695 2686  
                                  l3639 176C                                    l3591 1566  
                                  l3583 1524                                    l3575 14C4  
                                  l3559 146E                                    l3495 1328  
                                  l3487 131A                                    l3479 130A  
                                  l2865 2184                                    l2857 2168  
                                  l2849 2104                                    l2937 2E78  
                                  l2929 2E42                                    l2769 1996  
                                  l2961 0F28                                    l2953 0ED0  
                                  l2945 0E7C                                    l2785 33B4  
                                  l2697 268A                                    l2689 2642  
                                  l3593 157A                                    l3585 1538  
                                  l3577 14E0                                    l3569 1498  
                                  l3497 132C                                    l3489 131E  
                                  l2867 219C                                    l2779 1B0A  
                                  l3683 12BA                                    l2971 0F80  
                                  l2963 0F3C                                    l2955 0EE8  
                                  l2947 0E94                                    l2787 33C4  
                                  l2891 3260                                    l2699 269A  
                                  l3595 159E                                    l3587 154C  
                                  l3579 14FC                                    l3499 1332  
                                  l2869 21A0                                    l3685 1B1E  
                                  l2973 0F94                                    l2957 0EFC  
                                  l2949 0EA8                                    l2893 1DDC  
                                  l2885 324A                                    l3597 15A8  
                                  l3589 1560                                    l2991 1000  
                                  l2975 0FA8                                    l2967 0F54  
                                  l2959 0F14                                    l2887 324E  
                                  l2799 32A6                                    l3599 15B2  
                                  l2977 0FBC                                    l2969 0F68  
                                  l2889 325C                                    l2987 0FD4  
                                  l2899 1DE0                                    l2989 0FE8  
                                  STR_1 0E1B                                    STR_2 0E47  
                                  STR_3 0E32                                    STR_4 0E01  
                                  STR_5 0E57                                    u1000 24F0  
                                  u1001 24EC                                    u1010 2522  
                                  u1011 251E                                    u1020 2560  
                                  u1100 2EE0                                    u1021 255C  
                                  u1101 2EDC                                    u1110 238E  
                                  u1030 258A                                    u1111 238A  
                                  u1031 2586                                    u1120 2458  
                                  u1040 25B8                                    u1200 1C20  
                                  u1121 2454                                    u1041 25B4  
                                  u1201 1C1C                                    u1130 3334  
                                  u1050 2600                                    u1210 1D5C  
                                  u1131 3330                                    u1051 25FC  
                                  u1211 1D58                                    u1060 2F10  
                                  u1140 334A                                    u1300 2B0E  
                                  u1220 1D7A                            ?_LEDSon_init 0001  
                                  u1061 2F0C                                    u1141 3346  
                                  u1301 2B0A                                    u1221 1D76  
                                  u1070 2F2E                                    u1310 2CEC  
                                  u1230 1D94                                    u1150 1B8E  
                                  u1071 2F2A                                    u1311 2CE8  
                                  u2007 1984                                    u1231 1D90  
                                  u1151 1B88                                    u1080 2F4A  
                                  u1400 213C                                    u1240 1DA4  
                                  u1160 1B90                                    u1320 266A  
                                  u1081 2F46                                    u1401 2138  
                                  u2017 2AC4                                    u1241 1DA0  
                                  u1321 2666                                    u1250 31BE  
                                  u1410 21BC                                    u1090 2E8A  
                                  u1170 1BA2                                    u1330 26BA  
                                  u1251 31B6                                    u1411 21B8  
                                  u2107 218E                                    u2027 2B18  
                                  u1091 2E86                                    u1171 1B9E  
                                  u1331 26B6                                    u1420 3278  
                                  u1180 1BDE                                    u1340 26DA  
                                  u2037 2B72                                    u1421 3274  
                                  u1181 1BDA                                    u1341 26D6  
                                  u1270 2DB8                                    u1350 2C60  
                                  u1430 2002                                    u1190 1C0A  
                                  u1271 2DB4                                    u2047 2BC6  
                                  u1351 2C5C                                    u1431 1FFE  
                                  u1191 1C06                                    u1440 29AE  
                                  u1280 2DFA                                    u1360 33C4  
                          _BAUD4CONbits 000EE9                                    u1441 29AA  
                                  u1281 2DF6                                    u2057 2D8C  
                                  u1361 33C0                                    u1450 2E42  
                                  u1290 2BBC                                    u1451 2E3E  
                                  u2067 2DCE                                    u1291 2BB8  
                                  u1268 31C0                                    u1380 2068  
                                  u1460 2E78                                    u1381 2064  
                                  u1461 2E74                                    u2077 2CC0  
                                  u1701 28C6                                    u1390 20BC  
                                  u1470 11F4                                    u1710 13CE  
                                  u1391 20B8                                    u2087 208E  
                                  u1471 11F0                                    u1711 13CA  
                                  u1480 1258                                    u1720 1458  
                                  u2097 210E                                    u1481 1254  
                                  u1801 16AA                                    u1721 1454  
                                  u1490 12A2                                    u1810 1796  
                                  u1730 1490                                    _T2PR 000FBC  
                                  u1491 129E                                    u1811 178E  
                                  u1731 148C                                    u1740 14E0  
                                  u1741 14DC                                    u1750 1560  
                                  u1751 155C                                    u1760 157A  
                                  u1761 1576                                    u1690 2FB2  
                                  u1770 158C                                    u1907 0F06  
                                  u1691 2FAE                                    u1771 1584  
                                  u1828 1798                                    u1917 0F72  
                                  u1837 14B0                                    u1790 15DC  
                                  u1927 0FF2                                    u1847 1610  
                                  u1791 15D8                                    u1937 101E  
                                  u1857 165A                                    u1947 104E  
                                  u1867 16C0                                    u1788 158E  
                                  u1957 107A                                    u1877 1776  
                                  u1967 10BE                                    u1887 322A  
                                  u1977 10EE                                    u1897 0E86  
                                  u1987 121E                                    u1997 2C34  
            normalise_readings@red_read 001C                                    abs@a 0016  
                                  _dbuf 02C2                                    _main 130A  
                                  _dtoa 1B5E                                    _prec 01F5  
                                  pad@i 001B                                    pad@p 0018  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  pad@w 001D                                    fsr2l 000FD9  
                                  btemp 005B                                    _stop 2D76  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 005C                         card_response@mL 00AB  
                       card_response@mR 00AD                  __end_of_color_read_Red 30B0  
           normalise_readings@blue_read 0020                            ___param_bank 000000  
                                 ??_abs 0018                                   ??_pad 001A  
                           _turnRight45 2A7A                         __end_of___aodiv 2372  
                                 ?_main 0001                                   ?_dtoa 001F  
                       __end_of___aomod 2642                                   ?_stop 0017  
                       __end_of___lwdiv 2F6A                                   i1l494 004C  
                          vfpfcnvrt@fmt 0044                                   _TMR0H 000FD4  
                                 _TMR0L 000FD3                            main@red_read 00F7  
               __end_of_sendCharSerial4 33CA              __end_of_I2C_2_Master_Start 33EA  
            __end_of_I2C_2_Master_Write 33D6                                   _flags 01F9  
                                 _fputc 29B0                                   _fputs 3150  
                                 pad@fp 0014          determine_card@master_closeness 0004  
               ??_make_master_closeness 0017                                   _width 01F3  
                                 _putch 33F4                                   main@i 01DE  
                                 dtoa@d 0021                                   dtoa@i 003F  
                                 dtoa@n 0037                                   dtoa@p 0033  
                                 dtoa@s 0041                                   dtoa@w 0035  
                   normalise_readings@i 0030            card_response@ReturnHomeArray 00AF  
                                 tablat 000FF5                                   plusw0 000FEB  
                                 plusw2 000FDB                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 3010          card_response@normalised_values 0100  
                      card_response@buf 00A0                 __end_of_color_read_Blue 3150  
                 _I2C_2_Master_RepStart 33EA                         ?_color_read_Red 0008  
                       __initialization 327A                            __end_of_main 17B0  
                          __end_of_dtoa 1DDC                            __end_of_stop 2DFC  
                                ??_main 0056                                  ??_dtoa 0029  
                                ??_stop 001B                           __activetblptr 000003  
                         main@blue_read 00FB                    main@clear_read_check 00EB  
                          ?_setMotorPWM 0011                                  ?_fputc 0004  
                                ?_fputs 000D                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21                          main@TimerCount 00F3  
          collect_avg_readings@red_read 0011                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i1l3391 0048  
                                i1l3387 0026                                  i1l3389 0036  
                                _RG6PPS 000E88                __end_of_color_click_init 324A  
                                _TMR0IE 00714D                                  _TMR0IF 00719D  
                make_master_closeness@i 002B                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                                  _LowISR 0018  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0054  
                             ??___aodiv 0014                               ??___aomod 0014  
                                ___wmul 334C                      _normalise_readings 1DDC  
                             ??___lwdiv 000E                                  clear_0 3280  
                                clear_1 328C                                  isa$std 000001  
                                pad@buf 0016                                  dtoa@fp 001F  
                   ?_normalise_readings 001A                                  fputc@c 0004  
                                fputs@c 0011                                  fputs@i 0012  
                                fputs@s 000D                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                        ?_sendCharSerial4 0001  
                         _home_response 17B0                                  putch@c 0001  
                      __end_of_vfprintf 2FBE                                  stop@mL 0017  
                                stop@mR 0019                       ??_initDCmotorsPWM 0004  
                             ??_sprintf 0056                       card_response@card 00AA  
                            __accesstop 0060                 __end_of__initialization 329C  
              __end_of_color_read_Clear 3060                         fullSpeedAhead@i 001C  
              __end_of_color_read_Green 3100                  ?_I2C_2_Master_RepStart 0001  
                  ??_normalise_readings 0026                           ___rparam_used 000001  
                      ?_color_read_Blue 0008                         _Interrupts_init 32FA  
          __end_of_collect_avg_readings 21EA                          __pcstackCOMRAM 0001  
                      _reverseFullSpeed 2BD6              collect_avg_readings@i_1581 001B  
            collect_avg_readings@i_1582 001D              collect_avg_readings@i_1583 001F  
                         __end_of_fputc 2A7A                           __end_of_fputs 3194  
                         __end_of_putch 33F6                          ?_home_response 001F  
                        main@clear_read 01DF                                 ??_fputc 0008  
                               ??_fputs 0011                                 ??_putch 0004  
                            __pbssBANK0 00FD                              __pbssBANK1 01F3  
                            __pbssBANK2 0272                                 ?_LowISR 0001  
                     _color_writetoaddr 3392                            _T2CLKCONbits 000FBF  
                      motor_response@mL 0060                        motor_response@mR 0062  
                    ?_color_writetoaddr 0006                                 ?___wmul 0004  
                    motor_response@card 002A                            ?_turnRight45 0017  
                   ??_color_writetoaddr 0007                          main@green_read 00F9  
                               _SP4BRGH 000EE6                                 _SP4BRGL 000EE5  
                               _SSP2ADD 000ED6                                 _SSP2BUF 000ED5  
               __end_of_Interrupts_init 3324                  color_writetoaddr@value 0006  
                      ??_color_read_Red 000A           __end_of_make_master_closeness 29B0  
        determine_card@predicted_colour 000C               __end_of_color_writetoaddr 33B2  
                    _I2C_2_Master_Start 33E0                              _initUSART4 3372  
                    _I2C_2_Master_Write 33CA                                 __Hparam 0000  
                               __Lparam 0000                       color_read_Red@tmp 000D  
make_master_closeness@normalised_values 0013                 sendStringSerial4@string 0005  
                     reverseFullSpeed@i 001C                                 ___aodiv 21EA  
                               ___aomod 24DE                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 2EF6                     ?_I2C_2_Master_Write 0001  
                             ?_vfprintf 0060                            __psmallconst 0E00  
                          turnLeft45@mL 0017                            turnLeft45@mR 0019  
                               __pcinit 327A                                 __ramtop 0E00  
                               __ptext0 130A                                 __ptext1 3372  
                               __ptext2 2CEE                                 __ptext3 3010  
                               __ptext4 3216                                 __ptext5 3392  
                               __ptext6 32A6                                 __ptext7 27A0  
                               __ptext8 2FBE                                 __ptext9 2F6A  
                       ??_home_response 0023                               _T2CONbits 000FBD  
                             _T2HLTbits 000FBE                           _RxBufWriteCnt 005A  
                  _collect_avg_readings 2004                                 main@buf 0148  
                               _sprintf 2FBE                    ??_I2C_2_Master_Start 0005  
                  ??_I2C_2_Master_Write 0005                    end_of_initialization 329C  
        collect_avg_readings@green_read 0013                   normalise_readings@buf 001A  
                               fputc@fp 0006                                 fputs@fp 000F  
                     ?_color_click_init 0001                            turnRight45@i 001D  
                    ??_color_click_init 0008                       __end_of_vfpfcnvrt 27A0  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 004A                              ??_vfprintf 0054  
                       _initDCmotorsPWM 2CEE                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0016       normalise_readings@expected_values 0022  
                         _card_response 27A0                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0015                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 0011  
              __end_of_reverseFullSpeed 2C62                              main@i_1233 00EF  
                            main@i_1235 00F1                        fullSpeedAhead@mL 0017  
                      fullSpeedAhead@mR 0019                     main@expected_values 0200  
              color_writetoaddr@address 0007                 ??_I2C_2_Master_RepStart 0005  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0008                            _EUSART4RXbuf 02AE  
                          _EUSART4TXbuf 0272                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0008                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                             _CCP4CONbits 000F22  
             sendCharSerial4@charToSend 0004                              main@motorL 01E1  
                            main@motorR 01EA                      ??_color_read_Clear 000A  
                    ??_color_read_Green 000A                              _turnLeft45 2B28  
                        __end_of_LowISR 005C                          _fullSpeedAhead 2C62  
                           vfpfcnvrt@ap 0046                             vfpfcnvrt@cp 0052  
                           vfpfcnvrt@fp 0042                          __end_of___wmul 3372  
                       determine_card@i 000D                          ?_card_response 00A0  
                   color_read_Clear@tmp 000D                     start_initialization 327A  
                           __end_of_abs 3216                             __end_of_pad 2EF6  
                         _TxBufWriteCnt 0059                           ??_LEDSon_init 0004  
                   color_read_Green@tmp 000D                                ??_LowISR 0001  
               __end_of_initDCmotorsPWM 2D76                             vfprintf@fmt 0062  
                __end_of_fullSpeedAhead 2CEE                               _TimerFlag 01F7  
                              ??___wmul 0008                          _determine_card 2DFC  
                           __pbssCOMRAM 0058                  ??_collect_avg_readings 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                        ___aodiv@dividend 0004  
                        _motor_response 0E62                     __end_of_LEDSon_init 32FA  
                      ___lwdiv@dividend 000A                               _dtoa$2493 0031  
                           ?_turnLeft45 0017                         motor_response@i 002B  
                       motor_response@j 0028                         ?_fullSpeedAhead 0017  
                              ?___aodiv 0004                                ?___aomod 0004  
                      ___aodiv@quotient 0016                  __end_of_determine_card 2E7C  
                              ?___lwdiv 000A                             __pintcodelo 0018  
                  I2C_2_Master_Read@ack 0006                         ??_card_response 0056  
                  I2C_2_Master_Read@tmp 0007                             __smallconst 0E00  
                     _I2C_2_Master_Idle 3324                       _I2C_2_Master_Init 32A6  
                     _I2C_2_Master_Read 3194                       _I2C_2_Master_Stop 33D6  
                          _RxBufReadCnt 00FD            normalise_readings@difference 002E  
                   main@ReturnHomeArray 0236                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0013                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000E                  __end_of_motor_response 130A  
                           turnLeft45@i 001D                                ?_sprintf 0066  
                     _sendStringSerial4 324A                     ??_I2C_2_Master_Idle 0004  
                   ??_I2C_2_Master_Init 0004                     ??_I2C_2_Master_Read 0005  
                        ___wmul@product 0008                                _LATAbits 000F79  
                   ??_I2C_2_Master_Stop 0005                                _LATDbits 000F7C  
                              _LATFbits 000F7E                                _LATGbits 000F7F  
                              _LATHbits 000F80                                _IPR0bits 000E1F  
                    ?_sendStringSerial4 0005                                _PIE4bits 000E2D  
                 _make_master_closeness 28DC                                i1u168_20 0036  
                              i1u168_21 0032                                _PIR4bits 000E37  
                      ?_initDCmotorsPWM 0001                       ??_sendCharSerial4 0004  
              make_master_closeness@buf 0011                                _SSP2CON2 000EDA  
                   ??_sendStringSerial4 0007                                _SSP2STAT 000ED8  
                       ?_determine_card 0004                               _vfpfcnvrt 2642  
             __end_of_I2C_2_Master_Idle 334C               __end_of_I2C_2_Master_Init 32D0  
             __end_of_I2C_2_Master_Read 31D6                       ___wmul@multiplier 0004  
             __end_of_I2C_2_Master_Stop 33E0                            setMotorPWM@m 0011  
           I2C_2_Master_Write@data_byte 0005            normalise_readings@green_read 001E  
                 __end_of_home_response 1B5E                       ??_color_read_Blue 000A  
                          _TxBufReadCnt 0058                         ?_motor_response 0060  
                     ?_reverseFullSpeed 0017               __end_of_sendStringSerial4 327A  
                           _LEDSon_init 32D0                      ??_reverseFullSpeed 001B  
         __end_of_I2C_2_Master_RepStart 33F4                      color_read_Blue@tmp 000D  
                   __end_of_setMotorPWM 24DE                            ??_initUSART4 0004  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0015                      reverseFullSpeed@mL 0017  
                    reverseFullSpeed@mR 0019                       home_response@card 0025  
                            ?_vfpfcnvrt 0042                         ___aodiv@divisor 000C  
                       ___aodiv@counter 0014                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                            _T0CON0bits 000FD5                              _T0CON1bits 000FD6  
                       ___lwdiv@divisor 000C                      __end_of_initUSART4 3392  
                       ___lwdiv@counter 0010                                __ptext10 2642  
                              __ptext11 1B5E                                __ptext20 1DDC  
                              __ptext12 2E7C                                __ptext21 31D6  
                              __ptext13 3150                                __ptext30 334C  
                              __ptext22 0E62                                __ptext14 29B0  
                              __ptext31 28DC                                __ptext23 2BD6  
                              __ptext15 33F4                                __ptext40 33EA  
                              __ptext32 2DFC                                __ptext24 17B0  
                              __ptext16 24DE                                __ptext41 3194  
                              __ptext33 2004                                __ptext25 2A7A  
                              __ptext17 21EA                                __ptext42 3324  
                              __ptext34 3060                                __ptext26 2B28  
                              __ptext18 324A                                __ptext43 2EF6  
                              __ptext35 30B0                                __ptext27 2D76  
                              __ptext19 33B2                                __ptext44 32D0  
                              __ptext36 3100                                __ptext28 2C62  
                              __ptext45 32FA                                __ptext37 33CA  
                              __ptext29 2372                                __ptext38 33D6  
                              __ptext39 33E0           motor_response@ReturnHomeArray 0064  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0011                                isa$xinst 000000  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 2F6A                           ??_turnRight45 001B  
                              main@card 00EE                        ___aomod@dividend 0004  
                 collect_avg_readings@i 0019                              _INTCONbits 000FF2  
                           _setMotorPWM 2372           collect_avg_readings@blue_read 0015  
                         turnRight45@mL 0017                           turnRight45@mR 0019  
                              intlevel1 0000                               sprintf@ap 0072  
            __end_of_normalise_readings 2004            card_response@expected_values 00A8  
                      ??_fullSpeedAhead 001B                 card_response@green_read 00A4  
                          ??_turnLeft45 001B          determine_card@current_smallest 000A  
                       ___aomod@divisor 000C                             ??_vfpfcnvrt 0048  
                       ___aomod@counter 0014                  card_response@blue_read 00A6  
                      _color_click_init 3216                         home_response@mL 001F  
                       home_response@mR 0021           card_response@master_closeness 0136  
                              sprintf@f 0074                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 2B28                      __end_of_turnLeft45 2BD6  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0015  
                       _sendCharSerial4 33B2                   card_response@red_read 00A2  
                          ___aomod@sign 0015                        ??_determine_card 0006  
                         main@CardCount 00F5                            main@PWMcycle 00ED  
